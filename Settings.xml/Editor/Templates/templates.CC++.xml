<?xml version="1.0" encoding="utf-8"?>
<Templates xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <TemplateCategory Name="1-key">
    <Comments>These templates are composed of a single key. If any of these templates conflict with single letter variables that you use frequently, you can move them individually to a disabled folder, or you can disable all templates in this category by clicking the green check box to the left of the "1-key" category node.</Comments>
    <Template Name="." CaseSensitiveName="false">
      <Comment>/* */ Comment</Comment>
      <Expansion Priority="0">
        <Body>«:..»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="~" CaseSensitiveName="false">
      <Comment>Destructor</Comment>
      <Expansion Priority="0">
        <Body>«:dd»</Body>
        <Context>
          <Selected>Editor\Code\InClass</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="a">
      <Comment>Creates an abstract class</Comment>
      <Expansion Priority="0">
        <Body>«:pbacl»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEvent</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="b">
      <Comment>Creates a braced block -- { }</Comment>
      <Expansion Priority="0">
        <Body>«:bk»</Body>
        <Context>
          <Selected>Editor\Line\AtEndOfLine</Selected>
          <Excluded>Editor\Code\DeclaresLocal(b)</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(b)</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="c">
      <Comment>Class and constructor.</Comment>
      <Expansion Priority="0">
        <Body>«:#ClassWithConstructor#(ClassName=MyClass)»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Selected>Project\IsManaged</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InStruct</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«:cl»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Selected>Project\IsNative</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InStruct</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="2">
        <Body>«:ca»</Body>
        <Context>
          <Selected>Editor\Code\InSwitch</Selected>
          <Excluded>Editor\Code\DeclaresLocal(c)</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(c)</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="d">
      <Comment>Creates a default block for a switch statement.</Comment>
      <Expansion Priority="0">
        <Body>«:#DelegateDeclaration#»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«:#default#»</Body>
        <Context>
          <Selected>Editor\Code\InSwitch</Selected>
          <Excluded>Editor\Code\DeclaresLocal(d)</Excluded>
          <Excluded>Editor\Code\InCase</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(d)</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="e">
      <Comment>public enumerationt</Comment>
      <Expansion Priority="0">
        <Body>«:en»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="f" CaseSensitiveName="false">
      <Comment>for loop, false, or field of type integer (depending on context) </Comment>
      <Expansion Priority="0">
        <Body>false</Body>
        <Context>
          <Selected>Editor\Code\InAttribute</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Code\InType</Selected>
          <Excluded>Editor\Code\DeclaresLocal(f)</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InParameterBlock</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(f)</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«:f.»</Body>
        <Context>
          <Selected>Editor\Code\InClass</Selected>
          <Selected>Editor\Code\InManagedClass</Selected>
          <Selected>Editor\Code\InManagedStruct</Selected>
          <Selected>Editor\Code\InStruct</Selected>
          <Selected>Editor\Code\InValueClass</Selected>
          <Selected>Editor\Code\InValueStruct</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InAttribute</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="2">
        <Body>«:for»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\DeclaresLocal(f)</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(f)</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="g">
      <Expansion Priority="0">
        <Body>«:get»</Body>
        <Context>
          <Selected>Editor\Code\InProperty</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InPropertyAccessor</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="i">
      <Comment>Creates a public interface</Comment>
      <Expansion Priority="0">
        <Body>«:#interface#»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InStruct</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="l">
      <Comment>"else" keyword</Comment>
      <Expansion Priority="0">
        <Body>«:ll»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\DeclaresLocal(l)</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(l)</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="m" CaseSensitiveName="false">
      <Comment>Method (void). You can also use "mb" for methods that return a bool, ms for methods that return a string, etc.</Comment>
      <Expansion Priority="0">
        <Body>«:mv»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="n">
      <Expansion Priority="0">
        <Body>0</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>System\VSVersion\VS2002</Selected>
          <Selected>System\VSVersion\VS2003</Selected>
          <Excluded>Editor\Code\DeclaresLocal</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(n)</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>nullptr</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\DeclaresLocal</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare(n)</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="p" CaseSensitiveName="false">
      <Comment>Declares a read/write property of type object (type is selected after expansion for quick changes). </Comment>
      <Expansion Priority="0">
        <Body>«:p.»</Body>
        <Context>
          <Selected>Editor\Code\InClass</Selected>
          <Selected>Editor\Code\InInterface</Selected>
          <Selected>Editor\Code\InStruct</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="r">
      <Comment>Smart return</Comment>
      <Expansion Priority="0">
        <Body>«:rr»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\DeclaresLocal(r)</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Line\InParens</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s">
      <Comment>property setter, public struct, or "s=" alias.</Comment>
      <Expansion Priority="0">
        <Body>«:setter_»</Body>
        <Context>
          <Selected>Editor\Code\InProperty</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InPropertyAccessor</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«:#struct#»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InAttribute</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InPropertyAccessor</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="2">
        <Body>«:setter_»</Body>
        <Context>
          <Selected>Editor\Code\InInterface</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="t">
      <Expansion Priority="0">
        <Body>true</Body>
        <Context>
          <Selected>Editor\Code\InAttribute</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Code\InType</Selected>
          <Excluded>Editor\Code\DeclaresLocal</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InParameterBlock</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«:tm»</Body>
        <Context>
          <Selected>Editor\Code\InClass</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare</Excluded>
        </Context>
        <UsingClause>NUnit.Framework</UsingClause>
      </Expansion>
      <Expansion Priority="2">
        <Body>«:tf»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InClass</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InInterface</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InStruct</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare</Excluded>
        </Context>
        <UsingClause>NUnit.Framework</UsingClause>
      </Expansion>
    </Template>
    <Template Name="u">
      <Comment>using block or using statement</Comment>
      <Expansion Priority="0">
        <Body>«:using»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="v">
      <Expansion Priority="0">
        <Body>value</Body>
        <Context>
          <Selected>Editor\Code\DeclaresLocal(value)</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>virtual </Body>
        <Context>
          <Selected>Editor\Code\InMethod</Selected>
          <Selected>Editor\Code\InProperty</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethodBlock</Excluded>
          <Excluded>Editor\Code\InParameterBlock</Excluded>
          <Excluded>Editor\Code\InPropertyAccessor</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="w">
      <Comment>while block</Comment>
      <Expansion Priority="0">
        <Body>«:while»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="ASP.NET">
    <Comments>Templates for ASP.NET development.</Comments>
    <TemplateCategory Name="CodeRush 1.1.46 Compatibility" ActionHintColor="#ffff0000">
      <ActionHint>Use "s" + type mnemonic instead of "pv"</ActionHint>
      <Template Name="pva" CaseSensitiveName="false">
        <Comment>ArrayList ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetArrayListType#»«?Set(Type,ArrayList)»«?Set(retVal,«:#NullSign#»)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System.Collections</UsingClause>
        </Expansion>
      </Template>
      <Template Name="pvb" CaseSensitiveName="false">
        <Comment>Boolean ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetBoolType#»«?Set(retVal,false)»«:#PropertyViewStatePrimitiveType#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvc" CaseSensitiveName="false">
        <Comment>Char ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetCharType#»«?Set(retVal,Char::MinValue)»«:#PropertyViewStatePrimitiveType#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvcl" CaseSensitiveName="false">
        <Comment>Color ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetColorType#»«?Set(retVal,Color::Empty)»«:#PropertyViewStatePrimitiveType#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System.Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="pvd" CaseSensitiveName="false">
        <Comment>Double ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetDoubleType#»«?Set(retVal,0)»«:#PropertyViewStatePrimitiveType#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvdt" CaseSensitiveName="false">
        <Comment>DateTime ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetDateTimeType#»«?Set(retVal,DateTime::MinValue)»«:#PropertyViewStatePrimitiveType#»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvf" CaseSensitiveName="false">
        <Comment>Float ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetFloatType#»«?Set(retVal,0)»«:#PropertyViewStatePrimitiveType#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvh" CaseSensitiveName="false">
        <Comment>Hashtable ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetHashtableType#»«?Set(retVal,«:#NullSign#»)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System.Collections</UsingClause>
        </Expansion>
      </Template>
      <Template Name="pvi" CaseSensitiveName="false">
        <Comment>Int ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetIntType#»«?Set(retVal,0)»«:#PropertyViewStatePrimitiveType#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvip" CaseSensitiveName="false">
        <Comment>IntPtr ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetIntPtrType#»«?Set(retVal,IntPtr::Zero)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvo" CaseSensitiveName="false">
        <Comment>Object ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetObjectType#»«?Set(retVal,«:#NullSign#»)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvs" CaseSensitiveName="false">
        <Comment>String ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetStringType#»«?Set(retVal,String::Empty)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvsh" CaseSensitiveName="false">
        <Comment>Short ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetHashtableType#»«?Set(retVal,0)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvsi" CaseSensitiveName="false">
        <Comment>Float ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«?Set(Type,Single)»«?Set(retVal,0)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pvui" CaseSensitiveName="false">
        <Comment>Unit ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetUnsignedIntType#»«?Set(retVal,0)»«:#PropertyViewState#»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="System">
      <Comments>System templates called by other ASP.NET templates</Comments>
      <Template Name="#PropertyViewState#" CaseSensitiveName="false">
        <Comment>System template called by the ViewState property templates.</Comment>
        <Expansion Priority="0">
          <Body>__property «:#ViewStateType#» get_«FieldStart(ViewState property name)»«Caret»«:#ViewStatePropName#»«BlockAnchor»«FieldEnd»() 
{
	Object* «:#ViewStateLocal#» = «Link(ViewState)»-&gt;Item[«Marker»];
  if («:#ViewStateLocal#» != «:#NullSign#»)
		return 	*static_cast&lt;__box «:#ViewStateType#»*&gt;(«:#ViewStateLocal#»);
	else
		return «?Get(retVal)»;	
}
__property void set_«:#ViewStatePropName#»(«:#ViewStateType#» value) 
	{
		«Link(ViewState)»-&gt;Item[«Marker»] = __box(value);
	}«Target»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\IsRefType(«?Get(Type.FullName)»)</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>__property «:#ViewStateType#» get_«FieldStart(ViewState property name)»«Caret»«:#ViewStatePropName#»«BlockAnchor»«FieldEnd»() 
{
	Object* «:#ViewStateLocal#» = «Link(ViewState)»-&gt;Item[«Marker»];
  if («:#ViewStateLocal#» != «:#NullSign#»)
		return static_cast&lt;«:#ViewStateType#»&gt;(«:#ViewStateLocal#»);
	else
		return «?Get(retVal)»;	
}
__property void set_«:#ViewStatePropName#»(«:#ViewStateType#» value) 
	{
		«Link(ViewState)»-&gt;Item[«Marker»] = value;
	}«Target»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>	property «:#ViewStateType#» «FieldStart(ViewState property name)»«Caret»«:#ViewStatePropName#»«BlockAnchor»«FieldEnd»
	{
		«:#ViewStateType#» get() 
		{
			Object^ «:#ViewStateLocal#» = ViewState[«Marker»];
		if (lName != «:#NullSign#»)
			return 	(«:#ViewStateType#»)lName;
		else
			return «?Get(retVal)»;	
		}
		void set(«:#ViewStateType#» value) 
		{
			«Link(ViewState)»[«Marker»] = value;
		}
	}«Target»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyViewStatePrimitiveType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>__property «:#ViewStateType#» get_«FieldStart(ViewState property name)»«Caret»«:#ViewStatePropName#»«BlockAnchor»«FieldEnd»() 
{
	Object* «:#ViewStateLocal#» = «Link(ViewState)»-&gt;Item[«Marker»];
  if («:#ViewStateLocal#» != «:#NullSign#»)
		return 	*static_cast&lt;__box «:#ViewStateType#»*&gt;(«:#ViewStateLocal#»);
	else
		return «?Get(retVal)»;	
}
__property void set_«:#ViewStatePropName#»(«:#ViewStateType#» value) 
	{
		«Link(ViewState)»-&gt;Item[«Marker»] = __box(value);
	}«Target»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#PropertyViewState#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ViewStateLocal#" CaseSensitiveName="false">
        <Comment>System template called by the ViewState property templates.</Comment>
        <Expansion Priority="0">
          <Body>«Link(Name,FormatLocalName,PropertyNameFromLocal)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ViewStatePropName#" CaseSensitiveName="false">
        <Comment>System template called by the ViewState property templates.</Comment>
        <Expansion Priority="0">
          <Body>«Link(Name)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ViewStateType#" CaseSensitiveName="false">
        <Comment>System template called by the ViewState property templates.</Comment>
        <Expansion Priority="0">
          <Body>«:#GetFullType#»</Body>
          <Context />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="ViewState Props">
      <Comments>Properties that work with data in the ViewState instance.</Comments>
      <Template Name="s?Type?" CaseSensitiveName="false">
        <Comment>ViewState property</Comment>
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«?Set(retVal,«:#InitialValue#»)»«:#PropertyViewState#»
</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InheritsFrom(System.Web.UI.Control)</Selected>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Assignment Statements">
    <Comments>These templates create assignment statements.</Comments>
    <TemplateCategory Name="Full">
      <Comments>These templates build both sides of an assignment statement (e.g., "aa = bb;"). All of these templates have the "=" sign in the middle.</Comments>
      <Template Name="c=c" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>CheckState = CheckState::Checked;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="c=f" ExpansionTrigger="Secondary" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Checked = false;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="c=i" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>CheckState = CheckState.Indeterminate;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="c=t" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Checked = true;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="c=u" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>CheckState = CheckState.Unchecked;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="ca=f" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Capture = false;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="ca=t" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Capture = true;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="e=f" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Enabled = false;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="e=t" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Enabled = true;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="v=f" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Visible = false;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="v=t" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Visible = true;</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Left side only">
      <Comments>These templates build the left side of an assignment statement (e.g., "aa =").</Comments>
      <Template Name="c=" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Checked = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ca=" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Capture = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="e=" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Enabled = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ht=" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body> Height = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lt=" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>Left = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="t=" CaseSensitiveName="false">
        <Comment>Text = </Comment>
        <Expansion Priority="0">
          <Body>«:tx=»</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="tp=" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>Top = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tx=" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>Text = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="v=" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>Visible = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="va=" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>value = «Cursor»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="wd=" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>Width = «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Right side only">
      <Comments>These templates build the right side of an assignment statement (e.g., "= bb;"). Most of these templates start with "="; a subset of these templates start with "!=".</Comments>
      <Template Name="!='" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= '«Cursor»'</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InProperty</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=&quot;" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= "«Cursor»"</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InProperty</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=0" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= 0</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=1" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= 1</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=-1" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= -1</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=f" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= false</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=n" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= «:#NullSign#»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="!=th" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= this</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=v" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= value</Body>
          <Context>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="!=va" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:!=v»</Body>
          <Context>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="='" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= '«Cursor»';</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InProperty</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= '«Cursor»';</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InProperty</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=&quot;" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= "«Cursor»";</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InProperty</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= "«Cursor»";</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InProperty</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=0" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= 0;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= 0;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=1" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= 1;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= 1;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=-1" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= -1;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= -1;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=cl" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= Color::«Caret»«CompleteWord»;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= Color::«Caret»«CompleteWord»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=f" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= false;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= false;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=n" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= «:#NullSign#»;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= «:#NullSign#»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=t" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= true;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= true;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=th" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= this;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= this;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=v" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>= value;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>= value;</Body>
          <Context>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="=va" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
          <Body>«:=v»</Body>
          <Context>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Attributes">
    <Comments>These templates create .NET attributes. All of these templates start with the "[" character.</Comments>
    <TemplateCategory Name="Assignment Statements">
      <Comments>These templates create assignment statements.</Comments>
      <TemplateCategory Name="Full">
        <Comments>These templates build both sides of an assignment statement (e.g., "aa = bb;"). All of these templates have the "=" sign in the middle.</Comments>
        <Template Name="c=c" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>CheckState = CheckState::Checked;</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="c=f" ExpansionTrigger="Secondary" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Checked = false;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="c=i" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>CheckState = CheckState.Indeterminate;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="c=t" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Checked = true;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="c=u" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>CheckState = CheckState.Unchecked;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="ca=f" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Capture = false;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="ca=t" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Capture = true;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="e=f" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Enabled = false;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="e=t" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Enabled = true;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="v=f" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Visible = false;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="v=t" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Visible = true;</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Left side only">
        <Comments>These templates build the left side of an assignment statement (e.g., "aa =").</Comments>
        <Template Name="c=" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Checked = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ca=" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Capture = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="e=" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Enabled = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ht=" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body> Height = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="lt=" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Left = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="t=" CaseSensitiveName="false">
          <Comment>Text = </Comment>
          <Expansion Priority="0">
            <Body>«:tx=»</Body>
            <Context />
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="tp=" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Top = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="tx=" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>Text = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="v=" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>Visible = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="va=" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>value = «Cursor»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="wd=" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Width = «Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Right side only">
        <Comments>These templates build the right side of an assignment statement (e.g., "= bb;"). Most of these templates start with "="; a subset of these templates start with "!=".</Comments>
        <Template Name="!='" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= '«Cursor»'</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InProperty</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=&quot;" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= "«Cursor»"</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InProperty</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=0" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= 0</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=1" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= 1</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=-1" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= -1</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=f" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= false</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=n" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= «:#NullSign#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="!=th" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= this</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=v" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>!= value</Body>
            <Context>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="!=va" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:!=v»</Body>
            <Context>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="='" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= '«Cursor»';</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InProperty</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= '«Cursor»';</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InProperty</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=&quot;" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= "«Cursor»";</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InProperty</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= "«Cursor»";</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InProperty</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=0" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= 0;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= 0;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=1" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= 1;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= 1;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=-1" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= -1;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= -1;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=cl" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= Color::«Caret»«CompleteWord»;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= Color::«Caret»«CompleteWord»;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=f" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= false;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= false;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=n" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= «:#NullSign#»;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= «:#NullSign#»;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=t" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= true;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= true;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=th" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= this;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= this;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=v" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>= value;</Body>
            <Context>
              <Selected>Editor\Code\Analysis\Expecting Assignment</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>= value;</Body>
            <Context>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="=va" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
            <Body>«:=v»</Body>
            <Context>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
      </TemplateCategory>
    </TemplateCategory>
    <Template Name="[a" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[assembly: «Cursor»]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="[ac" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[AutoComplete]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::EnterpriseServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[au" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[AttributeUsage(AttributeTargets::«Caret»«CompleteWord»)]</Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="[bf" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Browseable(false)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[bt" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Browseable(true)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[c" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Category("«Cursor»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[cc" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[CLSCompliant(«Caret»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="[ccf" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[CLSCompliant(false)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="[cct" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[CLSCompliant(true)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="[cp" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[ContentProperty("«Cursor»")]</Body>
        <Context>
          <Selected>Editor\Code\InClass</Selected>
          <Selected>Editor\Code\InManagedClass</Selected>
          <Selected>Editor\Code\InManagedStruct</Selected>
          <Selected>Editor\Code\InStruct</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Windows::Markup</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[cv" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[ComVisible(«Cursor»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[cvf" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[ComVisible(false)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[cvt" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[ComVisible(true)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[d" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Description("«Cursor»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[de" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DefaultEvent("«Cursor»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[di" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DllImport("«Cursor»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[dm" CaseSensitiveName="false">
      <Comment>WCF Data Member</Comment>
      <Expansion Priority="0">
        <Body>[DataMember(«Caret»«Field»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="[dv" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DefaultValue(«Cursor»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[dv&quot;" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DefaultValue("«Cursor»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[dv0" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DefaultValue(«BlockAnchor»0«Cursor»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[dvf" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DefaultValue(false)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[dvn" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DefaultValue(«:#NullSign#»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[dvt" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[DefaultValue(true)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[eb" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[EditorBrowsable(EditorBrowsableState::«Cursor»«CompleteWord»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[eba" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[EditorBrowsable(EditorBrowsableState::Advanced)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[ebn" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[EditorBrowsable(EditorBrowsableState::Never)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[es" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[EnterpriseServices]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::EnterpriseServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[f" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Flags]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="[g" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Guid("«Cursor»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime.InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[h" CaseSensitiveName="false">
      <Comment>Hides property from design-time access and design-time streaming</Comment>
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Browsable(false)]
[DesignerSerializationVisibility(DesignerSerializationVisibility::Hidden)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[it" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[InterfaceType(ComInterfaceType::«CompleteWord»«Cursor»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[lf" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Localizable(false)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[lt" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Localizable(true)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[ma" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[MarshalAs(UnmanagedType::«Cursor»«CompleteWord»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[mi" CaseSensitiveName="false">
      <Comment>Method Synchronization</Comment>
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[MethodImpl(MethodImplOptions::«Cursor»«CompleteWord»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::CompilerServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[ms" CaseSensitiveName="false">
      <Comment>Method Synchronized</Comment>
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[MethodImpl(MethodImplOptions::Synchronized)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::CompilerServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[o" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Obsolete("«Caret»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="[oc1" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>[OperationContract(IsOneWay = true)]</Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="[pi" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[ProgId("«Cursor»")]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[ps" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[PreserveSig]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[rma" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[return: MarshalAs(UnmanagedType::«Cursor»«CompleteWord»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[s" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[Serializable]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="[sl" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[StructLayout(LayoutKind::«Cursor»«CompleteWord»)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[tif" CaseSensitiveName="false">
      <Comment>Prevents the control from appearing on the Customize Toolbox dialog.</Comment>
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[ToolboxItem(false)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[tit" CaseSensitiveName="false">
      <Comment>Ensures the control will appear on the Customize Toolbox dialog, useful when ancestors classes use the [ToolboxItem(false)] attribute.</Comment>
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[ToolboxItem(true)]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::ComponentModel</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[tp" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[TemplatePart(Name = "PART_«Caret»«Field(Name)»«BlockAnchor»", Type = __typeof(«Field(Button)»))]</Body>
        <Context>
          <Selected>System\VSVersion\VS2002</Selected>
          <Selected>System\VSVersion\VS2003</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>System\VSVersion\VS2005</Excluded>
          <Excluded>System\VSVersion\VS2008</Excluded>
        </Context>
        <UsingClause>System::Windows</UsingClause>
      </Expansion>
      <Expansion Priority="1" SuppressLastChar="true">
        <Body>[TemplatePart(Name = "PART_«Caret»«Field(Name)»«BlockAnchor»", Type = Type = «Field(Button)»::typeid))]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Windows</UsingClause>
      </Expansion>
    </Template>
    <Template Name="[wm" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>[WebMethod]</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Comments">
    <Comments>These templates add comments to the code. Nearly all of these templates start with the "/" character.</Comments>
    <TemplateCategory Name="Code areas" ActionHintColor="#ffc00000">
      <Comments>The templates add area comments that can highlight the organization of your code.</Comments>
      <ActionHint>Code Area Comment</ActionHint>
      <Template Name="/c" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// constructors...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ci" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// constructors/initialization...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/d" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// destructor...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/eh" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// event handlers...</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="/et" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// event triggers...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ie" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// internal events...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/if" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// internal fields...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/im" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// internal methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/ip" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// internal properties...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/ism" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// internal static methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ite" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:/ie»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/itf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:/if»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/itm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:/im»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/itp" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:/ip»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/itvm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:/ivm»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ivm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// internal virtual methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/mo" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// method overrides...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pbe" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public events...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pbf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public fields...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pbm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pbo" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public method overrides...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pbp" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public properties...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pbvm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public virtual methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pe" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public events...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public fields...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pmo" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:/pbo»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pp" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public properties...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/psm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// public static methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pte" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// protected events...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ptf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// protected fields...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ptm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// protected methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pto" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// protected method overrides...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ptp" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// protected properties...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ptsm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// protected static methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/ptvm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// protected virtual methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pve" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// private events...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pvf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// private fields...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pvm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// private methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pvp" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// private properties...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/pvsm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// private static methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/sc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// static constructor...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/sm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// static methods...</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Misc.">
      <Comments>Miscellaneous comment templates, including "/t" (Translate) and "/dnt" (Do Not Translate), used to mark strings for translation.</Comments>
      <Template Name=".." CaseSensitiveName="false">
        <Comment>Generates a /* */ comment. See also: "." 1-key template</Comment>
        <Expansion Priority="0">
          <Body>/* «Cursor» */</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/cod" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// Create on demand...</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/dn" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// Do nothing. Let descendants override.</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/dnt" CaseSensitiveName="false">
        <Comment>A comment to indicate that strings on this line should not be localized. Includes the "MLHIDE" keyword recognized by the Multi-Language add-in.</Comment>
        <Expansion Priority="0">
          <Body>// Do not translate (MLHIDE)</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/t" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// Translate</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Tasks">
      <Comments>Templates for adding TODO tasks and marking problem areas of the code.</Comments>
      <Template Name="/b" CaseSensitiveName="false">
        <Comment>Comment a bug in the code to address later.</Comment>
        <Expansion Priority="0">
          <Body>// BUGBUG: «Caret»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/h" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// HACK: «Caret»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="/t" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// TODO: «Cursor»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="XML Doc" ActionHintColor="#ff32cd32">
      <Comments>Templates for generating XML documentation.</Comments>
      <ActionHint>XML Doc Comment</ActionHint>
      <TemplateCategory Name="Literals" ActionHintColor="#ff32cd32" OptExpanded="true">
        <Comments>Templates for translating literal characters into XML escape sequences.</Comments>
        <ActionHint>XML Doc Literal</ActionHint>
        <Template Name="&amp;" CaseSensitiveName="false">
          <Comment>Creates an XML-legal character sequence for the "&amp;"</Comment>
          <Expansion Priority="0">
            <Body>&amp;amp; </Body>
            <Context>
              <Selected>Editor\Code\InXmlDocComment</Selected>
            </Context>
            <UsingClause />
          </Expansion>
        </Template>
        <Template Name="&lt;" ExpansionTrigger="Secondary" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>&amp;lt; </Body>
            <Context>
              <Selected>Editor\Code\InXmlDocComment</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="&gt;" ExpansionTrigger="Secondary" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>&amp;gt; </Body>
            <Context>
              <Selected>Editor\Code\InXmlDocComment</Selected>
              <Excluded>Editor\Line\Left Text Contains(&lt;see cref=")</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="/p" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>/// &lt;param name="«Paste»"&gt;«BlockAnchor»«PasteType»«Cursor»&lt;/param&gt;</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
        <Expansion Priority="1">
          <Body>/// &lt;param name="«Cursor»"&gt;«HardMarker(20)»&lt;/param&gt;</Body>
          <Context>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="/r" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>/// &lt;returns&gt;«Caret»&lt;/returns&gt;</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/rem" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>/// &lt;remarks&gt;
/// «Cursor»
/// &lt;/remarks&gt;</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="/s" CaseSensitiveName="false">
        <Comment>XML Summary doc comment</Comment>
        <Expansion Priority="0">
          <Body>/// &lt;summary&gt;
/// «Cursor»«Paste»«BlockAnchor»
/// &lt;/summary&gt;</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Declarations">
    <TemplateCategory Name="CodeRush 1.1.46 Compatibility" OptExpanded="true">
      <Comments>These templates are to provide backwards-compatibility with customers upgrading from CodeRush 1.1.46 and earlier versions.</Comments>
      <TemplateCategory Name="Fields" OptExpanded="true">
        <Comments>These templates declare fields, parameters, and local variables. These templates all start with an "f". These templates are here primarily for backwards compatibility for customers using CodeRush 1.1.46 or earlier, where the verb for creating fields, parameters, and locals was "f". In CodeRush 1.1.47 and up, this verb was changed to "v" for discoverability reasons.</Comments>
        <TemplateCategory Name="Generics" OptExpanded="true">
          <Comments>Templates for declaring variables of generic types. These templates start with an "f", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

fl.
fs.
fq.
fd.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonics for the type parameter to the generic, like this:

fl.i
fq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

fd.i,b</Comments>
          <Template Name="f?Generic1Type?." CaseSensitiveName="false">
            <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericVarNoArgsSpecified#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="f?Generic1Type?.?Type?" CaseSensitiveName="false">
            <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericVarPrep#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="f?Generic2Type?." CaseSensitiveName="false">
            <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericVarNoArgsSpecified#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="f?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
            <Comment>Declares a field of the specified two-parameter generic type. Letters following the "f" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericVarPrep#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="f?Type?0" CaseSensitiveName="false">
            <Comment>Declares a nullable field of the specified type. The letters following the "f" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#GetNullableType#»</Body>
              <Context>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="f?Type?0[" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#GetNullableTypeArray#»</Body>
              <Context>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#GetNullableTypeArray#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="f." CaseSensitiveName="false">
          <Comment>Variable of type Object.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetIntType#»«:#VarRouterSelectType#»</Body>
            <Context>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetObjectType#»«:#VarRouterSelectType#»</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="f?Type?" CaseSensitiveName="false">
          <Comment>Declares a field of the specified type. The letters following the "f" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«?Set(AfterType,«?GetTypeSuffix(«?Get(Type.FullName)»)»)»«:#VarRouter#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InParameterBlock</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEvent</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="f?Type?[" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#GetArrayVarRouter#»</Body>
            <Context>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#GetArrayVarRouter#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Properties" OptExpanded="true">
        <TemplateCategory Name="Read-only" OptExpanded="true">
          <Comments>These templates declare read-only properties. Templates in this category start with the letter "rp" and are followed by a short mnemonic that represents the type of property to create. Most of these templates declare fields for the property as well, taking advantage of linked identifier technology, which links property names to their corresponding fields. To declare a property without a field variable, end the template with a comma before expanding (comma at the end means you'll get "a shorter version of the template").</Comments>
          <TemplateCategory Name="Generics" OptExpanded="true">
            <Comments>Templates for declaring read-only properties of a generic type. These templates start with "rp", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

rpl.
rps.
rpq.
rpd.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonic for the type parameter to the generic, like this:

rpl.i
rpq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

rpd.i,b</Comments>
            <Template Name="rp?Generic1Type?." CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsSpecified#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="rp?Generic1Type?.," CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsNoField#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="rp?Generic1Type?.?Type?" CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadOnlyPropertyPrep#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="rp?Generic1Type?.?Type?," CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadOnlyPropertyPrep#(IsNoField=true)»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="rp?Generic2Type?." CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsSpecified#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="rp?Generic2Type?.," CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsNoField#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="rp?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
              <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadOnlyPropertyPrep#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="rp?Generic2Type?.?Type1?,?Type2?," CaseSensitiveName="false">
              <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadOnlyPropertyPrep#(IsNoField=true)»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
          </TemplateCategory>
          <Template Name="rp." CaseSensitiveName="false">
            <Comment>Property with type as a text field.</Comment>
            <Expansion Priority="0">
              <Body>«:r.»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="rp?Type?" CaseSensitiveName="false">
            <Comment>Declares a read-only property of the specified type. The letters following the "rp" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="rp?Type?," CaseSensitiveName="false">
            <Comment>Declares a property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <TemplateCategory Name="Write-only" OptExpanded="true">
          <Comments>These templates declare write-only properties. Templates in this category start with the letters "wp" and are followed by a short mnemonic that represents the type of write-only property to create. Most of these templates declare fields for the property as well, taking advantage of linked identifier technology, which links property names to their corresponding fields. To declare a write-only property without a field variable, end the template with a comma before expanding (comma at the end means you'll get "a shorter version of the template").</Comments>
          <TemplateCategory Name="Generics" OptExpanded="true">
            <Comments>Templates for declaring write-only properties of a generic type. These templates start with "wp", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

wpl.
wps.
wpq.
wpd.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonic for the type parameter to the generic, like this:

wpl.i
wpq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

wpd.i,b</Comments>
            <Template Name="wp?Generic1Type?." CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsSpecified#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="wp?Generic1Type?.," CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsNoField#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="wp?Generic1Type?.?Type?" CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericWriteOnlyPropertyPrep#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="wp?Generic1Type?.?Type?," CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericWriteOnlyPropertyPrep#(IsNoField=true)»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="wp?Generic2Type?." CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsSpecified#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="wp?Generic2Type?.," CaseSensitiveName="false">
              <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
              <Expansion Priority="0">
                <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsNoField#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="wp?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
              <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericWriteOnlyPropertyPrep#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
            <Template Name="wp?Generic2Type?.?Type1?,?Type2?," CaseSensitiveName="false">
              <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
              <Expansion Priority="0">
                <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericWriteOnlyPropertyPrep#(IsNoField=true)»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                  <Selected>Editor\Code\InManagedClass</Selected>
                  <Selected>Editor\Code\InManagedStruct</Selected>
                  <Selected>Editor\Line\OnEmptyLine</Selected>
                  <Excluded>Editor\Code\InComment</Excluded>
                  <Excluded>Editor\Code\InMethod</Excluded>
                  <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                  <Excluded>Editor\Code\InProperty</Excluded>
                  <Excluded>Editor\Code\InString</Excluded>
                </Context>
              </Expansion>
            </Template>
          </TemplateCategory>
          <Template Name="wp." CaseSensitiveName="false">
            <Comment>Property with empty getters and setters</Comment>
            <Expansion Priority="0">
              <Body>«:w.»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="wp?Type?" CaseSensitiveName="false">
            <Comment>Declares a write-only property of the specified type. The letters following the "wp" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="wp?Type?," CaseSensitiveName="false">
            <Comment>Declares a write-only property of the specified type. The letters following the "wp" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
      </TemplateCategory>
    </TemplateCategory>
    <TemplateCategory Name="Constants">
      <Comments>These templates create constants and read-only instances of objects. These templates start with the letter "q" and are followed by a type mnemonic to represent the type to declare.</Comments>
      <TemplateCategory Name="Generics">
        <TemplateCategory Name="System">
          <Template Name="#Generic1ReadOnlyPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#GenericSetVars#»«:#ReadOnlyGeneric1InstanceRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#Generic2ReadOnlyPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#GenericSetVars#»«:#ReadOnlyGeneric2InstanceRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#GenericReadOnlyNoArgsSpecified#" CaseSensitiveName="false">
            <Comment>Creates a new instance of the specified type.</Comment>
            <Expansion Priority="0" IsExpression="true">
              <Body>«:#ReadOnlyGenericSelectedArgs#»</Body>
              <Context>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1" IsExpression="true">
              <Body>«:#GenericTypeSelectedNoArgs#» «FieldStart(Variable name)»«?FormatLocalName(«?Get(GenericType)»)»«FieldEnd» = «:#ReadOnlyGenericNoArgsLinked#»;</Body>
              <Context>
                <Selected>Editor\Code\InCodeBlock</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2" IsExpression="true">
              <Body>«:#ConstDefaultScope#»«:#GenericTypeSelectedNoArgs#» «FieldStart(Variable name)»«?FormatFieldName(«?Get(GenericType)»)»«FieldEnd» = «:#ReadOnlyGenericNoArgsLinked#»;</Body>
              <Context>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#GenericReadOnlyPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#GenericSetVars#»«:#ConstantPrep#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyGeneric1Instance#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#NewTypeWithArgs#»</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Generic1Type.FullName)»`1)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#NewTypeNoArgs#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyGeneric1InstanceRouter#" CaseSensitiveName="false">
            <Comment>Creates a new instance of the specified type.</Comment>
            <Expansion Priority="0" IsExpression="true">
              <Body>«:#ReadOnlyGeneric1Instance#»</Body>
              <Context>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1" IsExpression="true">
              <Body>«:#LocalConstAssignment#»«:#ReadOnlyGeneric1Instance#»;</Body>
              <Context>
                <Selected>Editor\Code\InCodeBlock</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2" IsExpression="true">
              <Body>«:#FieldConstAssignment#»«:#ReadOnlyGeneric1Instance#»;</Body>
              <Context>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyGeneric2Instance#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#NewTypeWithArgs#»</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Generic2Type.FullName)»`2)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#NewTypeNoArgs#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyGeneric2InstanceRouter#" CaseSensitiveName="false">
            <Comment>Creates a new instance of the specified type.</Comment>
            <Expansion Priority="0" IsExpression="true">
              <Body>«:#ReadOnlyGeneric2Instance#»</Body>
              <Context>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1" IsExpression="true">
              <Body>«:#LocalConstAssignment#»«:#ReadOnlyGeneric2Instance#»;
</Body>
              <Context>
                <Selected>Editor\Code\InCodeBlock</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2" IsExpression="true">
              <Body>«:#FieldConstAssignment#»«:#ReadOnlyGeneric2Instance#»;</Body>
              <Context>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyGenericNoArgsLinked#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>new «:#GenericTypeNoArgs#»(«Field(,New instance parameters)»«SoftCaret»)</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Type.FullName)»)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>new «:#GenericTypeNoArgs#»()«SoftCaret»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyGenericSelectedArgs#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>new «:#GenericTypeSelectedNoArgs#»(«Field(,New instance parameters)»)</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Type.FullName)»)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>new «:#GenericTypeSelectedNoArgs#»()«Target»</Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="q?Generic1Type?." CaseSensitiveName="false">
          <Comment>Declares a new instance of the specified one-parameter generic type. Letters following the "n" specify the generic.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadOnlyNoArgsSpecified#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="q?Generic1Type?.?Type?" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified generic type. Letters following the "n" specify the generic.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#Generic1ReadOnlyPrep#»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="q?Generic2Type?." CaseSensitiveName="false">
          <Comment>Declares a new instance of the specified one-parameter generic type.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadOnlyNoArgsSpecified#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="q?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified generic type. Letters following the "n" specify the generic.</Comment>
          <Expansion Priority="0">
            <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#Generic2ReadOnlyPrep#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="q?Type?0" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified nullable type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#TypePrep#(IsNullable=true)»«:#ConstantPrep#»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="q?Type?0[" CaseSensitiveName="false">
          <Comment>Creates a new array instance of the specified nullable type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«DeleteRight("]")»«:#TypePrep#(IsArray=true,IsNullable=true)»«:#ConstantPrep#»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>«:#TypePrep#(IsArray=true,IsNullable=true)»«:#ConstantPrep#»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="q?Type?0]" CaseSensitiveName="false">
          <Comment>Creates a new initialized array instance of the specified nullable type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«DeleteRight("]")»«:#TypePrep#(IsArray=true,IsNullable=true)»«:#ConstantPrep#(IsEmptyArray=true)»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>«:#TypePrep#(IsArray=true,IsNullable=true)»«:#ConstantPrep#(IsEmptyArray=true)»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System">
        <Template Name="#ConstantPrep#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ConstantRouter#(IsStatic=true,IsConst=true)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ConstantRouter#" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#NewInstance#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>«:#LocalConstAssignment#»«:#NewInstance#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>«:#FieldConstAssignment#»«:#NewInstance#»;</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#FieldConstAssignment#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«:#ConstDefaultScope#»const «:#GetNotLinkingType#» «Caret»«Field(«?FormatFieldName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor» = </Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#LocalConstAssignment#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>const «:#GetNotLinkingType#» «Caret»«Field(«?FormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor» = </Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="q." CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(Type,object)»«:#NewReadOnlySelectTypeRouter#»</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="q?Type?" CaseSensitiveName="false">
        <Comment>Creates a new instance of the specified type.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#SetSuffix#»«?Set(InstanceBaseName,«?Get(Type)»)»«:#ConstantPrep#»</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="q?Type?[" CaseSensitiveName="false">
        <Comment>Creates a new array instance of the specified nullable type.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«DeleteRight("]")»«:#SetSuffix#»«:#TypePrep#(IsArray=true)»«:#ConstantPrep#»</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Selected>Editor\Line\Char Right Is(])</Selected>
            <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:#SetSuffix#»«:#TypePrep#(IsArray=true)»«:#ConstantPrep#»</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="q?Type?]" CaseSensitiveName="false">
        <Comment>Creates a new initialized array instance of the specified type.</Comment>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:#SetSuffix#»«:#TypePrep#(IsArray=true)»«:#ConstantPrep#(IsEmptyArray=true)»</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="qbr" CaseSensitiveName="false">
        <Comment>new brush</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«:nbr»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:nbr»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="2" IsExpression="true">
          <Body>«:#ConstDefaultScope#» Brush «:#BeforeGcnew#»const «Caret»«Field(«?FormatFieldName(Brush)»,Variable name)»«BlockAnchor» = «:#RefNew#» SolidBrush(«Field(,New brush parameters)»)</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="qbt" CaseSensitiveName="false">
        <Comment>new Bitmap</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«:nbt»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:nbt»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="2" IsExpression="true">
          <Body>«:#ConstDefaultScope#»Bitmap «:#BeforeGcnew#»const«Caret»«Field(«?FormatFieldName(Bitmap)»,Variable name)»«BlockAnchor» = «:#RefNew#» Bitmap(typeof(«Class»), "«Field(FileName,Name of the bitmap resource to load.)».bmp")</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="qo" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#RefNew#» «Caret»«Field(ClassName,Type to create)»«BlockAnchor»()</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#RefNew#» «Caret»«Field(ClassName,Type to create)»«BlockAnchor»()</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="qp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:qpt»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="qpt" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:npt»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:npt»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="2" IsExpression="true">
          <Body>«:#ConstDefaultScope#»Point «:#BeforeGcnew#»const«Caret»«Field(«?FormatFieldName(Point)»,Point variable name)»«BlockAnchor» = «:#RefNew#» Point(«Field(0,X-coordinate)», «Field(0,Y-coordinate)»)</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Constructors/Destructors">
      <Comments>These templates declare constructors and destructors.</Comments>
      <Template Name="cc" CaseSensitiveName="false">
        <Comment>Constructor</Comment>
        <Expansion Priority="0">
          <Body>«SmartConstructor»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ccs" CaseSensitiveName="false">
        <Comment>Static constructor</Comment>
        <Expansion Priority="0">
          <Body>static «TypeName»()
{
	«Cursor»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="dd" CaseSensitiveName="false">
        <Comment>Destructor. See also: "~" 1-key template</Comment>
        <Expansion Priority="0">
          <Body>~«Class»()
{
	«Cursor»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Events" OptExpanded="true">
      <Comments>These templates declare events, event args, event parameters, and delegates.</Comments>
      <TemplateCategory Name="Advanced">
        <Template Name="#EventKey#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Link(MyEvent,FormatFieldName,PropertyNameFromField)»Key</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="ehl" CaseSensitiveName="false">
          <Comment>This template shows how to use an EventHandlerList to provide memory-efficient backing store for objects with many events.</Comment>
          <Expansion Priority="0">
            <Body>private:
  static EventHandlerList «Link(_EventHandlers)» = new EventHandlerList();

	static Object* «:#EventKey#» = new Object();
	
public:
 	__event void add_«Link(MyEvent)»(«Link(DelegateName)»* «Link(addParameter)») 
  {
		«Link(_EventHandlers)»-&gt;AddHandler(«:#EventKey#», «Link(addParameter)»);
  }
  __event void remove_«Link(MyEvent)»(«Link(DelegateName)»* «Link(removeParameter)») 
	{
		«Link(_EventHandlers)»-&gt;RemoveHandler(«:#EventKey#», «Link(removeParameter)»);
  }
  
	«:#StaticIfNeeded#»void On«Link(MyEvent)»()
	{
		EventHandler* myEvent = static_cast&lt;EventHandler*&gt;(«Link(_EventHandlers)»[«:#EventKey#»]);
		if (myEvent != 0) 
			myEvent(0, EventArgs::Empty);
	}
</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>private:
	static EventHandlerList «Link(_EventHandlers)» = gcnew EventHandlerList();

	static Object^ «:#EventKey#» = gcnew Object();
public:
		«:#StaticIfNeeded#»event EventHandler^  «Caret»«Link(MyEvent)»«BlockAnchor»
	{
	public:
	      void add(EventHandler^ «Link(addParameter)»)
	      {
	         «Link(_EventHandlers)»-&gt;AddHandler(«:#EventKey#», «Link(addParameter)»);
	      }
	      void remove(EventHandler^ «Link(removeParameter)»)
				{
	        «Link(_EventHandlers)»-&gt;RemoveHandler(«:#EventKey#», «Link(removeParameter)»);
	   	  }     
	}
	
	internal «:#StaticIfNeeded#»void On«Link(MyEvent)»()
	{
		EventHandler^ myEvent = (EventHandler^)«Link(_EventHandlers)»[«:#EventKey#»];
		if (myEvent != nullptr) 
			myEvent(nullptr, EventArgs::Empty);
	}
	</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="isi" CaseSensitiveName="false">
          <Comment>Using ISynchronizeInvoke to trigger events</Comment>
          <Expansion Priority="0">
            <Body>ISynchronizeInvoke* «Link(sync)» = static_cast&lt;ISynchronizeInvoke*&gt;(«Caret»«FieldStart(The event handler to call)»«Link(eventHandler)»«FieldEnd»«BlockAnchor»-&gt;Target);
if («Link(sync)» != 0 &amp;&amp; «Link(sync)»-&gt;InvokeRequired)
{
	// Invoke on the main thread:
	Object* lObject[] = { «FieldStart(The sender argument)»«Link(sender)»«FieldEnd», «FieldStart(The arguments to the event)»«Link(eventArgs)»«FieldEnd» };
	«Link(sync)»-&gt;Invoke(«Link(eventHandler)», lObject);
}
else
{
	// Raise the event normally:
	«Link(eventHandler)»(«Link(sender)», «Link(eventArgs)»);
}</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
            <UsingClause>System::ComponentModel</UsingClause>
          </Expansion>
          <Expansion Priority="1">
            <Body>ISynchronizeInvoke^ «Link(sync)» = (ISynchronizeInvoke^)«Caret»«FieldStart(The event handler to call)»«Link(eventHandler)»«FieldEnd»«BlockAnchor»-&gt;Target;
if («Link(sync)» != nullptr &amp;&amp; «Link(sync)»-&gt;InvokeRequired)
{
	// Invoke on the main thread:
	array&lt;Object^&gt;^ lObject = { «FieldStart(The sender argument)»«Link(sender)»«FieldEnd», «FieldStart(The arguments to the event)»«Link(eventArgs)»«FieldEnd» };
	«Link(sync)».Invoke(«Link(eventHandler)», lObject);
}
else
{
	// Raise the event normally:
	«Link(eventHandler)»(«Link(sender)», «Link(eventArgs)»);
}</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="CodeRush 1.1.46 Compatibility" OptExpanded="true">
        <Template Name="dea" CaseSensitiveName="false">
          <Comment>Delegate &amp; Event Args.</Comment>
          <Expansion Priority="0">
            <Body>/// &lt;summary&gt;
/// Arguments for the «Link(MyEvent)» event.
/// &lt;/summary&gt;
__gc class «Link(MyEvent)»Args: public EventArgs
{
	«Marker»
};
/// &lt;summary&gt;
/// Delegate for the «Link(MyEvent)» event.
/// &lt;/summary&gt;
public __delegate void «BlockAnchor»«Link(MyEvent)»«Cursor»Handler(Object *sender, «Link(MyEvent)»Args *ea);
</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>/// &lt;summary&gt;
/// Arguments for the «Link(MyEvent)» event.
/// &lt;/summary&gt;
ref class «Link(MyEvent)»Args: EventArgs
{
	«Marker»
};
/// &lt;summary&gt;
/// Delegate for the «Link(MyEvent)» event.
/// &lt;/summary&gt;
public delegate void «BlockAnchor»«Link(MyEvent)»«Cursor»Handler(Object ^sender, «Link(MyEvent)»Args ^ea);</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="eak" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>KeyEventArgs«:#Pointer#» ea</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="eakp" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>KeyPressEventArgs«:#Pointer#» ea</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="eam" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>MouseEventArgs«:#Pointer#» ea</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="eap" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>PaintEventArgs«:#Pointer#» ea</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ev" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:pbe»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbe" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«:#EventDeclaration#»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbeo" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:eo»</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pdv" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#DelegateDeclaration#»</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="se" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>static «:#Event#» EventHandler«Cursor»;</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Generics">
        <TemplateCategory Name="System">
          <Template Name="#GenericEventBody#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#Event#» EventHandler&lt;«Caret»«Field(MyEventArgs,Custom event arguments)»«BlockAnchor»&gt; «Field(EventName,Name of the event)»;</Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="ev." CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#GenericEventBody#»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System">
        <Template Name="#Delegate#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>__delegate</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>delegate</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#DelegateDeclaration#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public «:#Delegate#» void «Caret»«Field(MyEventHandler,Delegate name)»«BlockAnchor»(«FieldStart(Press Delete if you don't need this first parameter)»Object«:#Pointer#» sender, «FieldEnd»«Field(EventArgs,This argument will be passed to event handlers)»«:#Pointer#» ea);</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#Event#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>__event</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>event</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#EventDeclaration#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#Event#» «Caret»«Field(EventHandler,Delegate name)»«BlockAnchor»«:#Pointer#» «Field(EventName,Event name)»;</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>System</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#EventVarName#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Link(EventName,FormatFieldName,PropertyNameFromField)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#MyEventVar#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Link(MyEvent,FormatLocalName,PropertyNameFromLocal)»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="ea" ExpansionTrigger="Secondary">
        <Expansion Priority="0">
          <Body>EventArgs«:#Pointer#» ea</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="eae" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>EventArgs::Empty</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="eh" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>EventHandler</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="eo" CaseSensitiveName="false">
        <Comment>public event plus "On..." event trigger.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«Link(DelegateName)» *«Link(_DelegateField)»;
  __event void add_«Link(MyEvent)»(«Link(DelegateName)» *«Link(addParameter)») 
  {
	 «Link(_DelegateField)» += «Link(addParameter)»;
  }
  __event void remove_«Link(MyEvent)»(«Link(DelegateName)» *«Link(removeParameter)») 
	{
	 «Link(_DelegateField)» -= «Link(removeParameter)»;
  }
  __event void raise_«Link(MyEvent)»(«Marker») 
 {
	 if («Link(_DelegateField)»)
	«Link(_DelegateField)»(«Marker»);
 }	
/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
__event «Cursor»«Link(MyEvent)»«BlockAnchor»Handler* «Link(MyEvent)»;
/// &lt;summary&gt;
/// Triggers the «Link(MyEvent)» event.
/// &lt;/summary&gt;
virtual void On«Link(MyEvent)»()
{ 
    «Link(MyEvent)»Args «?FormatLocalName(EventArgs)»* = new «Link(MyEvent)»Args(«Marker(60)»);
    «Link(MyEvent)»(this, «?FormatLocalName(EventArgs)»);  
}</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«Link(DelegateName)» ^«Link(_DelegateField)»;
/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
event «Cursor»«Link(DelegateName)»«BlockAnchor»Handler^ «Link(MyEvent)»
{
public:
      void add(«Link(DelegateName)» ^«Link(addParameter)») 
      {
         «Link(_DelegateField)» += «Link(addParameter)»;
      }
      void remove(«Link(DelegateName)» ^«Link(removeParameter)») 
			{
         «Link(_DelegateField)» -= «Link(removeParameter)»;
   	  }
      void raise(«Marker») 
      {
         if («Link(_DelegateField)»)
            «Link(_DelegateField)»(«Marker»);
      }			
}
/// &lt;summary&gt;
/// Triggers the «Link(MyEvent)» event.
/// &lt;/summary&gt;
virtual void On«Link(MyEvent)»()
{
    «Link(MyEvent)»Args «?FormatLocalName(EventArgs)»^ = gcnew «Link(MyEvent)»Args(«Marker(60)»);
    «Link(MyEvent)»(this, «?FormatLocalName(EventArgs)»); 
}</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ev" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#EventDeclaration#»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InInterface</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="evar" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#FieldDefaultScope#»«:#Static#»«Link(EventHandler)» *«:#EventVarName#»;
«:#EventDefaultScope#»
__event «:#Static#»void add_«Link(EventName)»(«Link(EventHandler)» *«Link(addParameter)») 
{
 	if («:#EventVarName#» == 0)		// First listener...
	{
	  «Marker»// TODO: If needed, add code to respond to the first event hook-up.
	}
	«:#EventVarName#» = static_cast&lt;«Link(EventHandler)» *&gt;(Delegate::Combine(«:#EventVarName#», addParameter));
}
__event «:#Static#»void remove_«Link(EventName)»(«Link(EventHandler)» *«Link(removeParameter)») 
{
 	«:#EventVarName#» = static_cast&lt;«Link(EventHandler)» *&gt;(Delegate::Remove(«:#EventVarName#», removeParameter));
	if («:#EventVarName#» == 0)  // No more listeners to this event
	{
		«Marker»// TODO: Add code to clean up if necessary.
	}
}«Target»</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#FieldDefaultScope#»«:#Static#»«Link(EventHandler)» ^«:#EventVarName#»;
«:#EventDefaultScope#»event «:#Static#»«Caret»«FieldStart(Delegate name)»«Link(EventHandler)»«FieldEnd»«BlockAnchor» ^«FieldStart(Event name)»«Link(EventName)»«FieldEnd»
{
public:
	«:#Static#»void add(«Link(EventHandler)» ^«Link(addParameter)»)
	{
		if («:#EventVarName#» == nullptr)		// First listener...
		{
		  «Marker»// TODO: If needed, add code to respond to the first event hook-up.
		}
		«:#EventVarName#» = static_cast&lt;«Link(EventHandler)» ^&gt;(Delegate::Combine(«:#EventVarName#», addParameter));
	}
	«:#Static#»void remove(«Link(EventHandler)» ^«Link(removeParameter)») 
	{
		«:#EventVarName#» = static_cast&lt; «Link(EventHandler)» ^&gt;(Delegate::Remove(«:#EventVarName#», removeParameter));
		if («:#EventVarName#» == nullptr)  // No more listeners to this event
		{
			«Marker»// TODO: Add code to clean up if necessary.
		}
	}
}«Target»</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="evh" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>  __event void add_«Link(MyEvent)»(«Link(DelegateName)» *«Link(addParameter)») 
  {
	 «Link(_DelegateField)» += «Link(addParameter)»;
  }
  __event void remove_«Link(MyEvent)»(«Link(DelegateName)» *«Link(removeParameter)») 
	{
	 «Link(_DelegateField)» -= «Link(removeParameter)»;
  }
  __event void raise_«Link(MyEvent)»(«Marker») 
 {
	 if («Link(_DelegateField)»)
		«Link(_DelegateField)»(«Marker»);
 }
</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>event «Cursor»«Link(MyEvent)»«BlockAnchor»Handler^ «Link(MyEvent)»
{
public:
      void add(«Link(DelegateName)» ^«Link(addParameter)»)
      {
         «Link(_DelegateField)» += «Link(addParameter)»;
      }
      void remove(«Link(DelegateName)» ^«Link(removeParameter)»)
			{
         «Link(_DelegateField)» -= «Link(removeParameter)»;
   	  }
      void raise(«Marker»)
      {
         if («Link(_DelegateField)»)
            «Link(_DelegateField)»(«Marker»);
      }	
}</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="evx" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>static Object* «:#MyEventVar#» = __gc new Object();
 __event void add_«Link(MyEvent)»(«Link(DelegateName)» *«Link(addParameter)») 
  {
 		Events[«:#MyEventVar#»] += «Link(addParameter)»;
  }
  __event void remove_«Link(MyEvent)»(«Link(DelegateName)» *«Link(removeParameter)») 
 {
	 Events[«:#MyEventVar#»] -= «Link(removeParameter)»;
 }
  __event void raise_«Link(MyEvent)»(«Link(MyEvent)»Args* e) 
 {
 	«Link(MyEvent)»Handler* handler = («Link(MyEvent)»Handler*)Events[«:#MyEventVar#»];
  	if(handler != «:#NullExpression#») handler(this, e);
 }</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>static Object^ «:#MyEventVar#» = gcnew Object();
event «Cursor»«Link(MyEvent)»«BlockAnchor»Handler^ «Link(MyEvent)»
{
	public:
      void add(«Link(DelegateName)» ^«Link(addParameter)»)
      {
         Events[«:#MyEventVar#»] += «Link(addParameter)»;
      }
      void remove(«Link(DelegateName)» ^«Link(removeParameter)»)
			{
         Events[«:#MyEventVar#»] -= «Link(removeParameter)»;
   	  }
      void raise(«Link(MyEvent)»Args e)
      {
          «Link(MyEvent)»Handler^ handler = («Link(MyEvent)»Handler^)Events[«:#MyEventVar#»];
  			if(handler != «:#NullExpression#») handler(this, e);
      }	
}</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="os" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#SetObjectType#»«:#GetFullType#» sender,</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="osea" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#SetObjectType#»«:#GetFullType#» aSender, «Cursor»EventArgs«:#Pointer#» ea</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InInterface</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Selected>Editor\Line\InParens</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Exceptions" OptExpanded="true">
      <Comments>These templates build custom exception classes. You can use the "ex" template by itself, or follow it up with one or two letters to indicate the type of a custom property to add to the exception class. For example, "exs" will create a custom exception descendant with a string property.</Comments>
      <TemplateCategory Name="Generics">
        <TemplateCategory Name="System">
          <Template Name="#ExceptionClassWithGenericFieldNoArgs#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
[Serializable]
public «:#ManagedClass#» «:#ExceptionNameSelected#»: public Exception, public ISerializable 
{
private:	
	#pragma region private fields...
	«:#GenericTypeNoArgsWithTextField#» «:#ExceptionFieldName#»;
	#pragma endregion

protected:
	#pragma region «:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context)
	/// &lt;summary&gt;
	/// Serialization constructor.
	/// &lt;/summary&gt;
	«:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) : Exception(info, context) 
	{
		this-&gt;«:#ExceptionFieldName#» = («:#GenericTypeNoArgs#»)(info-&gt;GetValue("«Link(Value)»", «:#GenericTypeOf#»));
	}
	#pragma endregion

public:
  «:#ExceptionConstructor#»
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#GenericTypeNoArgs#» «:#ExceptionParamName#»)
  /// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#»message, «:#GenericTypeNoArgs#» «:#ExceptionParamName#») : Exception(message) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#GenericTypeNoArgs#» «:#ExceptionParamName#», «:#WriteExceptionType#» innerException)
	/// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message.&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	/// &lt;param name="innerException"&gt;The inner exception.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#GenericTypeNoArgs#» «:#ExceptionParamName#», «:#WriteExceptionType#»innerException) : Exception(message, innerException) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion

	
	// public methods...
	#pragma region GetObjectData
	/// &lt;summary&gt;
  /// Overridden method from the ISerializable interface, to include the additional fields in serialization.
  /// &lt;/summary&gt;
	virtual void GetObjectData(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) override 
	{
		__super::GetObjectData(info, context);
		info-&gt;AddValue("«Link(Value)»", «Link(Value)»);
	}
	#pragma endregion
	
	// public properties...
	#pragma region Message
	/// &lt;summary&gt;
	/// Overridden property from System::Exception, to include the additional fields in the message.
	/// &lt;/summary&gt;
	 property «:#WriteStringType#» Message
	 {
	 	virtual «:#WriteStringType#» get()  override
	 	{
	 		array&lt;Object^&gt;^«Link(objectArray)» ={__super::Message, «Link(Value)»};
	 		return String::Format(CultureInfo::CurrentCulture, "{0}, «Link(Value)»: {1}", «Link(objectArray)»);
	 	}
	 }	
	#pragma endregion
	#pragma region «Link(Value)»
	/// &lt;summary&gt;
	/// «Marker»
	/// &lt;/summary&gt;
	property «:#GenericTypeNoArgs#» «Link(Value)»
	{
		«:#GenericTypeNoArgs#» get()
		{
			return «:#ExceptionFieldName#»;
		}
	}
	#pragma endregion
};</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
              <UsingClause>System::Runtime::Serialization</UsingClause>
              <UsingClause>System::Globalization</UsingClause>
              <UsingClause>System::Security::Permissions</UsingClause>
            </Expansion>
          </Template>
          <Template Name="#ExClassWithGenericField#" CaseSensitiveName="false">
            <Comment>Sets a value for the ExceptionClass name variable and then calls #ExceptionClassWithField#.</Comment>
            <Expansion Priority="0">
              <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#ExClassWithFieldClipRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#ExClassWithGenericFieldNoArgsClipRouter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«?Set(ExceptionClass,«?Paste»)»«:#ExceptionClassWithGenericFieldNoArgs#»</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«?Set(ExceptionClass,New)»«:#ExceptionClassWithGenericFieldNoArgs#»</Body>
              <Context>
                <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#GenericTypeOf#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«?Get(GenericType)»«?Get(TypeStart)»«TypeLink(args)»«?Get(TypeEnd)»::typeid</Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="x?Generic1Type?." CaseSensitiveName="false">
          <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#ExClassWithGenericFieldNoArgsClipRouter#»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InAttribute</Excluded>
              <Excluded>Editor\Code\InCodeBlock</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="x?Generic1Type?.?Type?" CaseSensitiveName="false">
          <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#ExClassWithGenericField#»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InAttribute</Excluded>
              <Excluded>Editor\Code\InCodeBlock</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="x?Generic2Type?." CaseSensitiveName="false">
          <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#ExClassWithGenericFieldNoArgsClipRouter#»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InAttribute</Excluded>
              <Excluded>Editor\Code\InCodeBlock</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="x?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
          <Comment>Declares a field of the specified two-parameter generic type. Letters following the "f" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#ExClassWithGenericField#»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InAttribute</Excluded>
              <Excluded>Editor\Code\InCodeBlock</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>System\VSVersion\VS2002</Excluded>
              <Excluded>System\VSVersion\VS2003</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System" OptExpanded="true">
        <Template Name="#ExceptionClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
[Serializable]
public «:#ManagedClass#» «:#ExceptionNameSelected#»: public Exception
{
public:	
	«:#ExceptionConstructor#»
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message)
	/// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message) : Exception(message) {}
	#pragma endregion
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#WriteExceptionType#» innerException)
	/// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message&lt;/param&gt;
	/// &lt;param name="innerException"&gt;The inner exception&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#WriteExceptionType#» innerException) : Exception(message, innerException) {}
	#pragma endregion
protected:
	#pragma region «:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context)
	/// &lt;summary&gt;
	/// Serialization constructor.
	/// &lt;/summary&gt;
	«:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) : Exception(info, context) {}
	#pragma endregion
};</Body>
            <Context />
            <UsingClause>System::Runtime::Serialization</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#ExceptionClassWithField#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
[Serializable]
public «:#ManagedClass#» «:#ExceptionNameSelected#»: public Exception, public ISerializable 
{
private:	
	#pragma region private fields...
	«:#ExceptionFieldType#» «:#ExceptionFieldName#»;
	#pragma endregion

protected:
	#pragma region «:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context)
	/// &lt;summary&gt;
	/// Serialization constructor.
	/// &lt;/summary&gt;
	«:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) : Exception(info, context) 
	{
		this-&gt;«:#ExceptionFieldName#» = *static_cast&lt;__box «:#ExceptionFieldType#»*&gt;(info-&gt;GetValue("«Link(Value)»", «:#TypeOfExceptionField#»));
	}
	#pragma endregion

public:
  «:#ExceptionConstructor#»
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#»)
  /// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#») : Exception(message) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#», «:#WriteExceptionType#» innerException)
	/// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message.&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	/// &lt;param name="innerException"&gt;The inner exception.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#», «:#WriteExceptionType#» innerException) : Exception(message, innerException) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion

	
	// public methods...
	#pragma region GetObjectData
	/// &lt;summary&gt;
  /// Overridden method from the ISerializable interface, to include the additional fields in serialization.
  /// &lt;/summary&gt;
  [SecurityPermission(SecurityAction::Demand, SerializationFormatter = true)]
	virtual void GetObjectData(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) 
	{
		__super::GetObjectData(info, context);
		info-&gt;AddValue("«Link(Value)»", __box(«Link(Value)»));
	}
	#pragma endregion
	
	// public properties...
	#pragma region Message
	/// &lt;summary&gt;
	/// Overridden property from System::Exception, to include the additional fields in the message.
	/// &lt;/summary&gt;
	 __property virtual «:#WriteStringType#» get_Message()
	 {
	 	 Object *«Link(objectArray)»[] = { __super::Message, __box(«Link(Value)»)};
	 	 return String::Format(CultureInfo::CurrentCulture, "{0}, «Link(Value)»: {1}", «Link(objectArray)»);
	 }	
	#pragma endregion
	#pragma region «FieldStart(Name of the property added to this exception)»«Link(Value)»«FieldEnd»
	/// &lt;summary&gt;
	/// «Marker»
	/// &lt;/summary&gt;
	__property «:#ExceptionFieldType#» get_«Link(Value)»()
	{
		return «:#ExceptionFieldName#»;
	}
	#pragma endregion
};</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
            <UsingClause>System::Runtime::Serialization</UsingClause>
            <UsingClause>System::Globalization</UsingClause>
            <UsingClause>System::Security::Permissions</UsingClause>
          </Expansion>
          <Expansion Priority="1">
            <Body>/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
[Serializable]
public «:#ManagedClass#» «:#ExceptionNameSelected#»: public Exception, public ISerializable 
{
private:	
	#pragma region private fields...
	«:#ExceptionFieldType#» «:#ExceptionFieldName#»;
	#pragma endregion

protected:
	#pragma region «:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context)
	/// &lt;summary&gt;
	/// Serialization constructor.
	/// &lt;/summary&gt;
	«:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) : Exception(info, context) 
	{
		this-&gt;«:#ExceptionFieldName#» = («:#ExceptionFieldType#»)(info-&gt;GetValue("«Link(Value)»", «:#TypeOfExceptionField#»));
	}
	#pragma endregion

public:
  «:#ExceptionConstructor#»
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#»)
  /// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#») : Exception(message) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#», «:#WriteExceptionType#» innerException)
	/// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message.&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	/// &lt;param name="innerException"&gt;The inner exception.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldType#» «:#ExceptionParamName#», «:#WriteExceptionType#»innerException) : Exception(message, innerException) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion

	
	// public methods...
	#pragma region GetObjectData
	/// &lt;summary&gt;
  /// Overridden method from the ISerializable interface, to include the additional fields in serialization.
  /// &lt;/summary&gt;
  [SecurityPermission(SecurityAction::Demand, SerializationFormatter=true)]
	virtual void GetObjectData(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) override 
	{
		__super::GetObjectData(info, context);
		info-&gt;AddValue("«Link(Value)»", «Link(Value)»);
	}
	#pragma endregion
	
	// public properties...
	#pragma region Message
	/// &lt;summary&gt;
	/// Overridden property from System::Exception, to include the additional fields in the message.
	/// &lt;/summary&gt;
	 property «:#WriteStringType#» Message
	 {
	 	virtual «:#WriteStringType#» get()  override
	 	{
	 		array&lt;Object^&gt;^«Link(objectArray)» ={__super::Message, «Link(Value)»};
	 		return String::Format(CultureInfo::CurrentCulture, "{0}, «Link(Value)»: {1}", «Link(objectArray)»);
	 	}
	 }	
	#pragma endregion
	#pragma region «Link(Value)»
	/// &lt;summary&gt;
	/// «Marker»
	/// &lt;/summary&gt;
	property «:#ExceptionFieldType#» «FieldStart(Name of the property added to this exception)»«Link(Value)»«FieldEnd»
	{
		«:#ExceptionFieldType#» get()
		{
			return «:#ExceptionFieldName#»;
		}
	}
	#pragma endregion
};</Body>
            <Context />
            <UsingClause>System::Runtime::Serialization</UsingClause>
            <UsingClause>System::Globalization</UsingClause>
            <UsingClause>System::Security::Permissions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#ExceptionClassWithManagedField#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
[Serializable]
public «:#ManagedClass#» «:#ExceptionNameSelected#»: public Exception, public ISerializable 
{
private:	
	#pragma region private fields...
	«:#ExceptionFieldManagedType#»«:#ExceptionFieldName#»;
	#pragma endregion

protected:
	#pragma region «:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context)
	/// &lt;summary&gt;
	/// Serialization constructor.
	/// &lt;/summary&gt;
	«:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) : Exception(info, context) 
	{
		this-&gt;«:#ExceptionFieldName#» = static_cast&lt;«:#ExceptionFieldManagedType#»&gt;(info-&gt;GetValue("«Link(Value)»", «:#TypeOfExceptionField#»));
	}
	#pragma endregion

public:
  «:#ExceptionConstructor#»
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#»)
  /// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#») : Exception(message) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#», «:#WriteExceptionType#» innerException)
	/// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message.&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	/// &lt;param name="innerException"&gt;The inner exception.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#», «:#WriteExceptionType#» innerException) : Exception(message, innerException) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion

	
	// public methods...
	#pragma region GetObjectData
	/// &lt;summary&gt;
  /// Overridden method from the ISerializable interface, to include the additional fields in serialization.
  /// &lt;/summary&gt;
	virtual void GetObjectData(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) 
	{
		__super::GetObjectData(info, context);
		info-&gt;AddValue("«Link(Value)»", «Link(Value)»);
	}
	#pragma endregion
	
	// public properties...
	#pragma region Message
	/// &lt;summary&gt;
	/// Overridden property from System::Exception, to include the additional fields in the message.
	/// &lt;/summary&gt;
	 __property virtual «:#WriteStringType#» get_Message()
	 {
	 	 Object *«Link(objectArray)»[] ={ __super::Message, «Link(Value)»};
	 	 return String::Format(CultureInfo::CurrentCulture, "{0}, «Link(Value)»: {1}", «Link(objectArray)»);
	 }	
	#pragma endregion
	#pragma region «Link(Value)»
	/// &lt;summary&gt;
	/// «Marker»
	/// &lt;/summary&gt;
	__property «:#ExceptionFieldManagedType#» get_«FieldStart(Name of the property added to this exception)»«Link(Value)»«FieldEnd»()
	{
		return «:#ExceptionFieldName#»;
	}
	#pragma endregion
};</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
            <UsingClause>System::Runtime::Serialization</UsingClause>
            <UsingClause>System::Globalization</UsingClause>
            <UsingClause>System::Security::Permissions</UsingClause>
          </Expansion>
          <Expansion Priority="1">
            <Body>/// &lt;summary&gt;
/// «Marker»
/// &lt;/summary&gt;
[Serializable]
public «:#ManagedClass#» «:#ExceptionNameSelected#»: public Exception, public ISerializable 
{
private:	
	#pragma region private fields...
	«:#ExceptionFieldManagedType#» «:#ExceptionFieldName#»;
	#pragma endregion

protected:
	#pragma region «:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context)
	/// &lt;summary&gt;
	/// Serialization constructor.
	/// &lt;/summary&gt;
	«:#ExceptionName#»(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) : Exception(info, context) 
	{
		this-&gt;«:#ExceptionFieldName#» = («:#ExceptionFieldManagedType#»)(info-&gt;GetValue("«Link(Value)»", «:#TypeOfExceptionField#»));
	}
	#pragma endregion

public:
  «:#ExceptionConstructor#»
	#pragma region «:#ExceptionName#»(«:#WriteStringType#»message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#»)
  /// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#»message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#») : Exception(message) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion
	#pragma region «:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#», «:#WriteExceptionType#» innerException)
	/// &lt;summary&gt;
	/// Constructs a new «:#ExceptionName#».
	/// &lt;/summary&gt;
	/// &lt;param name="message"&gt;The exception message.&lt;/param&gt;
	/// &lt;param name="«:#ExceptionParamName#»"&gt;The value for the «Link(Value)» property.&lt;/param&gt;
	/// &lt;param name="innerException"&gt;The inner exception.&lt;/param&gt;
	«:#ExceptionName#»(«:#WriteStringType#» message, «:#ExceptionFieldManagedType#» «:#ExceptionParamName#», «:#WriteExceptionType#»innerException) : Exception(message, innerException) 
	{
		this-&gt;«:#ExceptionFieldName#» = «:#ExceptionParamName#»;
	}
	#pragma endregion

	
	// public methods...
	#pragma region GetObjectData
	/// &lt;summary&gt;
  /// Overridden method from the ISerializable interface, to include the additional fields in serialization.
  /// &lt;/summary&gt;
	virtual void GetObjectData(«:#WriteSerializationInfoType#» info, «:#WriteStreamingContextType#» context) override 
	{
		__super::GetObjectData(info, context);
		info-&gt;AddValue("«Link(Value)»", «Link(Value)»);
	}
	#pragma endregion
	
	// public properties...
	#pragma region Message
	/// &lt;summary&gt;
	/// Overridden property from System::Exception, to include the additional fields in the message.
	/// &lt;/summary&gt;
	 property «:#WriteStringType#» Message
	 {
	 	virtual «:#WriteStringType#» get()  override
	 	{
	 		array&lt;Object^&gt;^«Link(objectArray)» ={__super::Message, «Link(Value)»};
	 		return String::Format(CultureInfo::CurrentCulture, "{0}, «Link(Value)»: {1}", «Link(objectArray)»);
	 	}
	 }	
	#pragma endregion
	#pragma region «Link(Value)»
	/// &lt;summary&gt;
	/// «Marker»
	/// &lt;/summary&gt;
	property «:#ExceptionFieldManagedType#» «FieldStart(Name of the property added to this exception)»«Link(Value)»«FieldEnd»
	{
		«:#ExceptionFieldManagedType#» get()
		{
			return «:#ExceptionFieldName#»;
		}
	}
	#pragma endregion
};</Body>
            <Context />
            <UsingClause>System::Runtime::Serialization</UsingClause>
            <UsingClause>System::Globalization</UsingClause>
            <UsingClause>System::Security::Permissions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#ExceptionConstructor#" CaseSensitiveName="false">
          <Comment>The common constructor</Comment>
          <Expansion Priority="0">
            <Body>  // constructors...
  #pragma region «:#ExceptionName#»()
  /// &lt;summary&gt;
  /// Constructs a new «:#ExceptionName#».
  /// &lt;/summary&gt;
	«:#ExceptionName#»() { }
	#pragma endregion</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ExceptionFieldManagedType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#GetFullType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ExceptionFieldName#" CaseSensitiveName="false">
          <Comment>The name of the field added to the exception, Linked.</Comment>
          <Expansion Priority="0">
            <Body>«Link(Value,FormatFieldName,PropertyNameFromField)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ExceptionFieldType#" CaseSensitiveName="false">
          <Comment>The type of the field added to the exception, Linked.</Comment>
          <Expansion Priority="0">
            <Body>«:#GetFullType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ExceptionName#" CaseSensitiveName="false">
          <Comment>The name of the exception class to create.</Comment>
          <Expansion Priority="0">
            <Body>«Link(«?Get(ExceptionClass)»)»Exception</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ExceptionNameSelected#" CaseSensitiveName="false">
          <Comment>The name of the exception class to create.</Comment>
          <Expansion Priority="0">
            <Body>«Caret»«Link(«?Get(ExceptionClass)»)»«BlockAnchor»Exception</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ExceptionParamName#" CaseSensitiveName="false">
          <Comment>The name of the parameter used to set a value to the field added to the exception, Linked.</Comment>
          <Expansion Priority="0">
            <Body>«Link(Value,FormatParamName,PropertyNameFromParam)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ExceptionTypeRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ExceptionClassWithManagedField#»</Body>
            <Context>
              <Selected>Editor\Code\IsRefType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#ExceptionClassWithField#»</Body>
            <Context>
              <Excluded>Editor\Code\IsRefType(«?Get(Type.FullName)»)</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#ExClassClipRouter#" CaseSensitiveName="false">
          <Comment>Sets a value for the ExceptionClass name variable and then calls #ExceptionClassWithField#.</Comment>
          <Expansion Priority="0">
            <Body>«?Set(ExceptionClass,«?Paste»)»«:#ExceptionClass#»</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Set(ExceptionClass,New)»«:#ExceptionClass#»</Body>
            <Context>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#ExClassWithFieldClipRouter#" CaseSensitiveName="false">
          <Comment>Sets a value for the ExceptionClass name variable and then calls #ExceptionClassWithField#.</Comment>
          <Expansion Priority="0">
            <Body>«?Set(ExceptionClass,«?Paste»)»«:#ExceptionTypeRouter#»</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Set(ExceptionClass,New)»«:#ExceptionTypeRouter#»</Body>
            <Context>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#GcManaged#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>*</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>^</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#TypeOfExceptionField#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>__typeof(«TypeLink(«?Get(Type)»)»)</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«TypeLink("«?Get(Type)»")»::typeid</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="ex" CaseSensitiveName="false">
        <Comment>Creates a new Exception class descendant.</Comment>
        <Expansion Priority="0">
          <Body>«:#ExClassClipRouter#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InAttribute</Excluded>
            <Excluded>Editor\Code\InCodeBlock</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="x?Type?" CaseSensitiveName="false">
        <Comment>Creates a new Exception class descendant with a custom property of the specified type. The letters following the "ex" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
        <Expansion Priority="0">
          <Body>«?Set(AfterType,«?GetTypeSuffix(«?Get(Type.FullName)»)»)»«:#ExClassWithFieldClipRouter#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InAttribute</Excluded>
            <Excluded>Editor\Code\InCodeBlock</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Methods" OptExpanded="true">
      <Comments>Templates for declaring methods. Most of these templates start with the letter "m" and are followed by a mnemonic to represent the return type.</Comments>
      <TemplateCategory Name="Assign">
        <Comments>Templates to create an Assign method that performs a shallow copy, transfering data between fields.</Comments>
        <Template Name="#AssignParam#" CaseSensitiveName="false">
          <Comment>Called from the as template. This generates a parameter variable based on the current type.</Comment>
          <Expansion Priority="0">
            <Body>«Link(«?FormatParamName(«?Type»)»)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#AssignStatement#" CaseSensitiveName="false">
          <Comment>Called from the as template. This generates an assignment to a field from a corresponding property.</Comment>
          <Expansion Priority="0">
            <Body>	«?Get(itemName)» = «:#AssignParam#».«?Get(itemName)»;
</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="asm" CaseSensitiveName="false">
          <Comment>Creates an Assign method, which performs a shallow-copy between fields of this class.</Comment>
          <Expansion Priority="0">
            <Body>void Assign(«Class» «Caret»«:#AssignParam#»«BlockAnchor»)
{«ForEach(field in this,#AssignStatement#)»}</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Generics" OptExpanded="true">
        <Comments>Templates for declaring methods that return generic types. These templates start with an "m", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

ml.
ms.
mq.
md.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonic for the type parameter to the generic, like this:

ml.i
mq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

md.i,b</Comments>
        <TemplateCategory Name="System">
          <Template Name="#GenericMethodNoArgsSpecified#" CaseSensitiveName="false">
            <Comment>Declares a method in an interface, class or struct.</Comment>
            <Expansion Priority="0">
              <Body>virtual «:#GenericNoArgsMethodSignature#» abstract;</Body>
              <Context>
                <Selected>System\VariableMatches(IsAbstract,true)</Selected>
                <Excluded>Editor\Code\InInterface</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#GenericNoArgsMethodSignature#»«:#MethodBody#»</Body>
              <Context>
                <Excluded>Editor\Code\InInterface</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="2">
              <Body>«:#GenericNoArgsMethodSignature#»«:#InterfaceMethodBody#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#GenericMethodPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#MethodRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="m?Generic1Type?." CaseSensitiveName="false">
          <Comment>Declares a method of the specified generic type. Letters following the "m" specify the generic.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericMethodNoArgsSpecified#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Generic1Type?.-" CaseSensitiveName="false">
          <Comment>Declares an abstract method of the specified one-parameter generic type. Letters following the "m" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericMethodNoArgsSpecified#(IsAbstract=true)»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Generic1Type?.?Type?" CaseSensitiveName="false">
          <Comment>Declares a method of the specified one-parameter generic type. Letters following the "m" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericMethodPrep#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Generic1Type?.?Type?-" CaseSensitiveName="false">
          <Comment>Declares an abstract method of the specified one-parameter generic type. Letters following the "m" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericMethodPrep#(IsAbstract=true)»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Generic2Type?." CaseSensitiveName="false">
          <Comment>Declares a method of the specified generic type. Letters following the "m" specify the generic.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericMethodNoArgsSpecified#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Generic2Type?.-" CaseSensitiveName="false">
          <Comment>Declares an abstract method of the specified one-parameter generic type. Letters following the "m" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericMethodNoArgsSpecified#(IsAbstract=true)»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
          <Comment>Declares a method of the specified two-parameter generic type. Letters following the "m" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericMethodPrep#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Generic2Type?.?Type1?,?Type2?-" CaseSensitiveName="false">
          <Comment>Declares an abstract method of the specified two-parameter generic type. Letters following the "m" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericMethodPrep#(IsAbstract=true)»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Type?0" CaseSensitiveName="false">
          <Comment>Declares a method of the specified nullable type. The letters following the "m" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#MethodRouter#(IsNullableType=true)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Type?0[" CaseSensitiveName="false">
          <Comment>Declares a method of the specified array of nullable types.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#MethodRouter#(IsNullableType=true,IsArray=true)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#MethodRouter#(IsNullableType=true,IsArray=true)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2005</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="m?Type?0[-" CaseSensitiveName="false">
          <Comment>Declares an abstract method of the specified array of nullable types.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#MethodRouter#(IsNullableType=true,IsAbstract=true,IsArray=true)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#MethodRouter#(IsNullableType=true,IsAbstract=true,IsArray=true)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Misc" OptExpanded="true">
        <Template Name="Main" ExpansionTrigger="Secondary">
          <Expansion Priority="0">
            <Body>static void Main()
{
	Application::Run(«:#SimpleGcnew#» «Class»());
} 
</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbv" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>void «Cursor»()
{
	«Marker»
}</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="vm" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:pbv»</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Operator Oveloads" OptExpanded="true">
        <Template Name="op=" CaseSensitiveName="false">
          <Comment>Implicit conversion operators</Comment>
          <Expansion Priority="0">
            <Body>«Cursor»«TypeName»«BlockAnchor» ^operator=(«TypeName» ^«Link(ParameterName)»)
{
	«Marker»
	return ^this;
}</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueClass</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Cursor»«TypeName»«BlockAnchor» operator=(«TypeName» «Link(ParameterName)»)
{
	«Marker»
	return *this;
}</Body>
            <Context>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueClass</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="op==" CaseSensitiveName="false">
          <Comment>Operator overloads: == and != </Comment>
          <Expansion Priority="0">
            <Body>bool operator ==(«TypeName» ^«Link(ParameterNameEq)»)
{	
	if(«Link(Equals)»(this, «Link(ParameterNameEq)»))
		return true;
	else
		return false;
}
bool operator !=(«TypeName» ^«Link(ParameterNameNotEq)»)
{
	if(«Link(Equals)»(this, «Link(ParameterNameNotEq)»))
		return false;
	else
		return true;
}
bool «Cursor»«Link(Equals)»«BlockAnchor»(«TypeName» ^«Link(objLeft)», «TypeName» ^«Link(objRigth)»)
{
	«Marker»
  return true;
	«Marker»
  return false;
}</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueClass</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>bool operator ==(«TypeName» «Link(ParameterNameEq)»)
{	
	if(«Link(Equals)»(*this, «Link(ParameterNameEq)»))
		return true;
	else
		return false;
}
bool operator !=(«TypeName» «Link(ParameterNameNotEq)»)
{
	if(«Link(Equals)»(*this, «Link(ParameterNameNotEq)»))
		return false;
	else
		return true;
}
bool «Cursor»«Link(Equals)»«BlockAnchor»(«TypeName» «Link(objLeft)», «TypeName» «Link(objRigth)»)
{
	«Marker»
  return true;
	«Marker»
  return false;
}</Body>
            <Context>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System" OptExpanded="true">
        <Template Name="#MethodRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#MethodSignature#»«:#MethodBody#»</Body>
            <Context>
              <Excluded>Editor\Code\InInterface</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#MethodSignature#»«:#InterfaceMethodBody#»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#MethodRouterSelectType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#MethodSignatureSelectType#»«:#MethodBody#»</Body>
            <Context>
              <Excluded>Editor\Code\InInterface</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#MethodSignatureSelectType#»«:#InterfaceMethodBody#»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="m-" CaseSensitiveName="false">
        <Comment>Abstract method.</Comment>
        <Expansion Priority="0">
          <Body>«:mv-(IsAbstract=true)»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="m." CaseSensitiveName="false">
        <Comment>Method that returns an Object. Return type is highlighted so you can specify a different type easily.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetIntType#»«:#MethodRouterSelectType#»</Body>
          <Context>
            <Selected>Editor\Code\InNativeClass</Selected>
            <Selected>Editor\Code\InNativeStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#SetObjectType#»«:#MethodRouterSelectType#»</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="m.-" CaseSensitiveName="false">
        <Comment>Abstract method that returns an Object. Return type is highlighted so you can specify a different type easily.</Comment>
        <Expansion Priority="0">
          <Body>«:m.(IsAbstract=true)»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="m?Type?" CaseSensitiveName="false">
        <Comment>Declares a method of the specified type. The letters following the "m" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«:#MethodRouter#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="m?Type?-" CaseSensitiveName="false">
        <Comment>Declares an abstract method of the specified type. The letters following the "m" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«:#MethodRouter#(IsAbstract=true)»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="m?Type?[" CaseSensitiveName="false">
        <Comment>Declares a method of the specified type. The letters following the "m" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
        <Expansion Priority="0">
          <Body>«DeleteRight("]")»«:#SetSuffix#»«:#MethodRouter#(IsArray=true)»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Editor\Line\Char Right Is(])</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#SetSuffix#»«:#MethodRouter#(IsArray=true)»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="m?Type?[-" CaseSensitiveName="false">
        <Comment>Declares an abstract method of the specified array type.</Comment>
        <Expansion Priority="0">
          <Body>«DeleteRight("]")»«:#SetSuffix#»«:#MethodRouter#(IsAbstract=true,IsArray=true)»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Editor\Line\Char Right Is(])</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#SetSuffix#»«:#MethodRouter#(IsAbstract=true,IsArray=true)»</Body>
          <Context>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="mv" CaseSensitiveName="false">
        <Comment>Method that returns an Object.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetVoidType#»«:#MethodRouter#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="mv-" CaseSensitiveName="false">
        <Comment>Abstract method.</Comment>
        <Expansion Priority="0">
          <Body>«:mv(IsAbstract=true)»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Modifiers" OptExpanded="true">
      <Comments>These templates create modifiers (e.g., "private", "override", etc.) for methods and properties.</Comments>
      <Template Name="ab" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>abstract </Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ext" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>extern </Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="it" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>internal </Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ov" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>override</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pt" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>protected:
	</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>protected </Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pub" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>public:
	</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>public </Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pv" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>private:
	</Body>
          <Context>
            <Selected>Editor\Code\InCase</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>private </Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ro" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>readonly </Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="st" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:sta»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethodBlock</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InPropertyAccessor</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="sta" CaseSensitiveName="false">
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>static </Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethodBlock</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InPropertyAccessor</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="New Instances" OptExpanded="true">
      <Comments>These templates create new instances of objects. These templates start with the letter "n" and are followed by one or two letters that represent the instance type to create.</Comments>
      <TemplateCategory Name="Array">
        <Template Name="#NestedArrayType0[#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»array&lt;Nullable&lt;«?Get(Type)»&gt;&gt;^ «:#GetVarName#» = gcnew array&lt;Nullable&lt;«?Get(Type)»&gt;&gt;(«SoftCaret»«Field(10,Number of elements in the array)»«SoftAnchor»)</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
              <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#PrimitiveTypeRouter[#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NestedArrayType0]#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»array&lt;Nullable&lt;«?Get(Type)»&gt;&gt;^ «:#GetVarName#» = {Nullable&lt;«?Get(Type)»&gt;(«:#NewInstance#»)}</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
              <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#PrimitiveTypeRouter]#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#PrimitiveFieldRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»«Field(«?FormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor»[«SoftCaret»«Field(10,Number of elements in the array)»«SoftAnchor»];</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Caret»«Field(«?FormatFieldName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor» __gc[];</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«Caret»«Field(«?FormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor»[«SoftCaret»«Field(10,Number of elements in the array)»«SoftAnchor»];</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#PrimitiveTypeRouter[#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«?Get(Type)» «:#PrimitiveFieldRouter#»</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#TypePrep#(IsArray=true)»«:#NewInstanceRouter#»</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«:#SetSuffix#»array&lt;«:#GetFullType#»&gt;^ «:#GetVarName#» = gcnew array&lt;«:#GetFullType#»&gt;(«SoftCaret»«Field(10,Number of elements in the array)»«SoftAnchor»)</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#PrimitiveTypeRouter]#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#TypePrep#(IsArray=true)»«:#NewInstanceRouter#(IsEmptyArray=true)»</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#TypePrep#(IsArray=true)»«:#NewInstanceRouter#(IsEmptyArray=true)»</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«:#SetSuffix#»array&lt;«:#GetFullType#»&gt;^ «:#GetVarName#» = {«SoftCaret»«FieldStart(Enter array elements here)»«?SimpleName(«?InitialValueFromType(«?Get(Type.FullName)»)»)»«FieldEnd»«SoftAnchor»}</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Generics" OptExpanded="true">
        <TemplateCategory Name="System">
          <Template Name="#Generic1NewPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#GenericSetVars#»«:#NewGeneric1InstanceRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#Generic2NewPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#GenericSetVars#»«:#NewGeneric2InstanceRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#GenericNewNoArgsSpecified#" CaseSensitiveName="false">
            <Comment>Creates a new instance of the specified type.</Comment>
            <Expansion Priority="0" IsExpression="true">
              <Body>«:#NewGenericSelectedArgs#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1" IsExpression="true">
              <Body>«:#GenericTypeSelectedNoArgs#» «FieldStart(Variable name)»«?FormatLocalName(«?Get(GenericType)»)»«FieldEnd» = «:#NewGenericNoArgsLinked#»;</Body>
              <Context>
                <Selected>Editor\Code\InCodeBlock</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2" IsExpression="true">
              <Body>«:#FieldDefaultScope#»«:#GenericTypeSelectedNoArgs#» «FieldStart(Variable name)»«?FormatFieldName(«?Get(GenericType)»)»«FieldEnd» = «:#NewGenericNoArgsLinked#»;
											</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#GenericNewPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#GenericSetVars#»«:#NewInstanceRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#GenericSetVars#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«?Set(Type,«:#GenericType#»)»«?Set(Type.FullName,«?Get(GenericType.FullName)»)»«?Set(InstanceBaseName,«?Get(GenericType)»)»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#InitialValue#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>0</Body>
              <Context>
                <Selected>System\VSVersion\VS2002</Selected>
                <Selected>System\VSVersion\VS2003</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>nullptr</Body>
              <Context>
                <Selected>System\VariableMatches(IsNullable,true)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2">
              <Body>«:#InitialValueFromString#»</Body>
              <Context>
                <Selected>System\VariableMatches(Type.FullName,System.String)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="3">
              <Body>nullptr</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#InitialValueFromString#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#SimpleInitialValue#»</Body>
              <Context>
                <Selected>System\VariableMatches(ForceReadOnly,true)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>""</Body>
              <Context>
                <Selected>System\VariableMatches(IsConst,true)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2">
              <Body>«:#SimpleInitialValue#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#NewFieldGenericAssignment#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«?Get(Type)»^ «Caret»«Field(«?FormatFieldName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor» = </Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#NewGeneric1Instance#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#NewTypeWithArgs#»</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Generic1Type.FullName)»`1)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#NewTypeNoArgs#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#NewGeneric1InstanceRouter#" CaseSensitiveName="false">
            <Comment>Creates a new instance of the specified type.</Comment>
            <Expansion Priority="0" IsExpression="true">
              <Body>«:#NewGeneric1Instance#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1" IsExpression="true">
              <Body>«:#NewLocalGenericAssignment#»«:#NewGeneric1Instance#»;</Body>
              <Context>
                <Selected>Editor\Code\InCodeBlock</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2" IsExpression="true">
              <Body>static «:#NewFieldGenericAssignment#»«:#NewGeneric1Instance#»;</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InNativeClass</Selected>
                <Selected>Editor\Code\InNativeStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="3">
              <Body>«:#NewLocalGenericAssignment#»«:#NewGeneric1Instance#»;</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#NewGeneric2Instance#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#NewTypeWithArgs#»</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Generic2Type.FullName)»`2)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#NewTypeNoArgs#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#NewGeneric2InstanceRouter#" CaseSensitiveName="false">
            <Comment>Creates a new instance of the specified type.</Comment>
            <Expansion Priority="0" IsExpression="true">
              <Body>«:#NewGeneric2Instance#»</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1" IsExpression="true">
              <Body>«:#NewLocalGenericAssignment#»«:#NewGeneric2Instance#»;</Body>
              <Context>
                <Selected>Editor\Code\InCodeBlock</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2" IsExpression="true">
              <Body>static «:#NewFieldGenericAssignment#»«:#NewGeneric2Instance#»;</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InNativeClass</Selected>
                <Selected>Editor\Code\InNativeStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="3">
              <Body>«:#NewLocalGenericAssignment#»«:#NewGeneric2Instance#»;</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#NewGenericNoArgsLinked#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#RefNew#» «:#GenericTypeNoArgsTail#»(«Field(,New instance parameters)»«SoftCaret»)</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Type.FullName)»)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#RefNew#» «:#GenericTypeNoArgsTail#»()«SoftCaret»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#NewGenericSelectedArgs#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#RefNew#» «:#GenericTypeSelectedNoArgs#»(«Field(,New instance parameters)»)</Body>
              <Context>
                <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Type.FullName)»)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#RefNew#» «:#GenericTypeSelectedNoArgs#»()«Target»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#NewLocalGenericAssignment#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«?Get(Type)»^ «Caret»«Field(«?FormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor» = </Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="n?Generic1Type?." CaseSensitiveName="false">
          <Comment>Declares a new instance of the specified one-parameter generic type. Letters following the "n" specify the generic.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericNewNoArgsSpecified#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="n?Generic1Type?.?Type?" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#Generic1NewPrep#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="n?Generic2Type?." CaseSensitiveName="false">
          <Comment>Declares a new instance of the specified one-parameter generic type.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericNewNoArgsSpecified#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="n?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
          <Comment>Declares a field of the specified two-parameter generic type. Letters following the "f" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#Generic2NewPrep#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="n?Type?0" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified nullable type.</Comment>
          <Expansion Priority="0">
            <Body>«:#NestedType0#»</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="n?Type?0[" CaseSensitiveName="false">
          <Comment>Creates a new array instance of the specified nullable type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«DeleteRight("]")»«:#NestedArrayType0[#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true" SuppressLastChar="true">
            <Body>«:#NestedArrayType0[#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="n?Type?0]" CaseSensitiveName="false">
          <Comment>Creates a new initialized array instance of the specified nullable type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«DeleteRight("]")»«:#NestedArrayType0]#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>«:#NestedArrayType0]#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Old" OptExpanded="true">
        <Template Name="nb" CaseSensitiveName="false">
          <Comment>new brush</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#SimpleGcnew#» SolidBrush(«Field(,New brush parameters)»«Caret»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>Brush«:#BeforeGcnew#» «Cursor»«?FormatLocalName(Brush)»«BlockAnchor» = «:#SimpleGcnew#» SolidBrush(«Field(,New brush parameters)»)</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>Brush«:#BeforeGcnew#» «Caret»«Field(«?FormatLocalName(Brush)»,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» SolidBrush(«Field(,New brush parameters)»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
        </Template>
        <Template Name="nbr" CaseSensitiveName="false">
          <Comment>new brush</Comment>
          <Expansion Priority="0">
            <Body>«:nb»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="nbt" CaseSensitiveName="false">
          <Comment>new Bitmap</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#SimpleGcnew#» Bitmap(«:#ClassType#», "«Field(FileName,Name of the bitmap resource to load.)».bmp")</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>Bitmap«:#BeforeGcnew#» «Caret»«Field(«?FormatLocalName(Bitmap)»,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» Bitmap(«:#ClassType#», "«Field(FileName,Name of the bitmap resource to load.)».bmp")</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>Bitmap «:#BeforeGcnew#»«Caret»«Field(«?FormatFieldName(Bitmap)»,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» Bitmap(«:#ClassType#», "«Field(FileName,Name of the bitmap resource to load.)».bmp")</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
        </Template>
        <Template Name="nli" CaseSensitiveName="false">
          <Comment>New local variable instance.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«Paste» «:#BeforeNew#»l«Paste» = «BlockAnchor»«:#SimpleNew#» «Paste»()«Cursor»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="np" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>«:npt»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
        </Template>
        <Template Name="npn" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#SimpleGcnew#» Pen(«Field(,New Pen parameters)»«Caret»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>Pen«:#BeforeGcnew#» «Caret»«Field(«?FormatFieldName(Pen)»,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» Pen(«Field(,New Pen parameters)»)</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>Pen«:#BeforeGcnew#» «Caret»«Field(«?FormatFieldName(Pen)»,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» Pen(«Field(,New Pen parameters)»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
        </Template>
        <Template Name="nr" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#SimpleNew#» Rectangle(«Field(,New Rectangle arguments)»«Caret»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>Rectangle«:#BeforeNew#» «Caret»«Field(«?FormatLocalName(Rectangle)»,Variable name)»«BlockAnchor» = «:#SimpleNew#» Rectangle(«Field(,New Rectangle arguments)»)</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>Rectangle«:#BeforeNew#» «Caret»«Field(«?FormatFieldName(Rectangle)»,Variable name)»«BlockAnchor» = «:#SimpleNew#» Rectangle(«Field(,New Rectangle arguments)»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>System::Drawing</UsingClause>
          </Expansion>
        </Template>
        <Template Name="nsb" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#SimpleGcnew#» StringBuilder(«Field(,New StringBuilder parameters)»«Caret»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
            <UsingClause>System::Text</UsingClause>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>StringBuilder«:#BeforeGcnew#» «Caret»«Field(«?FormatLocalName(StringBuilder)»,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» StringBuilder(«Field(,New StringBuilder parameters)»)</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
            <UsingClause>System::Text</UsingClause>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>StringBuilder«:#BeforeGcnew#» «Caret»«Field(«?FormatFieldName(StringBuilder)»,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» StringBuilder(«Field(,New StringBuilder parameters)»)</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>System::Text</UsingClause>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System" OptExpanded="true">
        <TemplateCategory Name="#Old#" OptExpanded="true">
          <Template Name="#ClassType#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>__typeof(«Class»)</Body>
              <Context>
                <Selected>System\VSVersion\VS2002</Selected>
                <Selected>System\VSVersion\VS2003</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«Class»::typeid</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#gcnew#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>new «?Get(Type)»(«Cursor»)</Body>
              <Context>
                <Selected>System\VSVersion\VS2002</Selected>
                <Selected>System\VSVersion\VS2003</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>gcnew «?Get(Type)»(«Cursor»)</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#new#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>__nogc new «?Get(Type)»(«Cursor»)</Body>
              <Context>
                <Selected>System\VSVersion\VS2002</Selected>
                <Selected>System\VSVersion\VS2003</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>new «?Get(Type)»(«Cursor»)</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#SimpleGcnew#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>new</Body>
              <Context>
                <Selected>System\VSVersion\VS2002</Selected>
                <Selected>System\VSVersion\VS2003</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>gcnew</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#SimpleNew#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>__nogc new</Body>
              <Context>
                <Selected>System\VSVersion\VS2002</Selected>
                <Selected>System\VSVersion\VS2003</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>new</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="#GetVarName#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»«Field(«?FormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Caret»«Field(«?FormatFieldName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«Caret»«Field(«?FormatParamName(ParamName)»)»«BlockAnchor»</Body>
            <Context>
              <Selected>Editor\Code\InParameterBlock</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«Caret»«Field(«?FormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#NewFieldAssignment#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#GetNotLinkingType#» «Caret»«Field(«?FormatFieldName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor»[] = </Body>
            <Context>
              <Selected>System\VariableMatches(IsArray,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#GetNotLinkingType#» «Caret»«Field(«?FormatFieldName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor» = </Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NewFieldVarNameBasedOnType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?PrefixField»«Field(«?RootFormatFieldName(«?Get(Type)»)»,Variable name)»«?SuffixField»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NewInstance#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>{«SoftCaret»«FieldStart(Enter array elements here)»«:#InitialValue#»«FieldEnd»«SoftAnchor»}</Body>
            <Context>
              <Selected>System\VariableMatches(IsEmptyArray,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#RefNew#» «?Get(ArrayType)»«?Get(AfterType)»[«SoftCaret»«Field(10,Number of elements in the array)»«SoftAnchor»]</Body>
            <Context>
              <Selected>System\VariableMatches(IsArray,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«FieldStart(Initial value)»«?SimpleName(«?InitialValueFromType(«?Get(Type.FullName)»)»)»«FieldEnd»«SoftCaret»</Body>
            <Context>
              <Selected>Editor\Code\Analysis\HasStaticInitializer(«?Get(Type.FullName)»)</Selected>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#RefNew#» «?Get(Type)»(«Field(,New instance parameters)»«SoftCaret»)</Body>
            <Context>
              <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="4">
            <Body>«:#NewTypeNoArgs#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NewInstanceLinkedType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#RefNew#» «TypeLink(«?Get(Type)»)»(«Field(,New instance parameters)»«SoftCaret»)</Body>
            <Context>
              <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#RefNew#» «TypeLink(«?Get(Type)»)»()«SoftCaret»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NewInstanceRouter#" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#NewInstance#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>«:#NewLocalAssignment#»«:#NewInstance#»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>static «:#NewFieldAssignment#»«:#NewInstance#»;</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#NewLocalAssignment#»«:#NewInstance#»;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#NewInstanceSelectedType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#RefNew#» «Caret»«Field(«?Get(Type)»,Type to create)»«BlockAnchor»(«Field(,New instance parameters)»)</Body>
            <Context>
              <Selected>Editor\Code\Analysis\ConstructorHasParameter(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#RefNew#» «Caret»«Field(«?Get(Type)»,Type to create)»«BlockAnchor»()«Target»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NewInstanceSelectTypeRouter#" CaseSensitiveName="false">
          <Comment>Creates a new instance of the specified type.</Comment>
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#NewInstanceSelectedType#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1" IsExpression="true">
            <Body>«:#SelectedTypeName#» «:#NewLocalVarNameBasedOnType#» = «:#NewInstanceLinkedType#»;</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2" IsExpression="true">
            <Body>static «:#SelectedTypeName#» «:#NewFieldVarNameBasedOnType#» = «:#NewInstanceLinkedType#»;
											</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#SelectedTypeName#» «:#NewFieldVarNameBasedOnType#» = «:#NewInstanceLinkedType#»;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#NewLocalAssignment#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Get(ArrayType)»«?Get(AfterType)» «?PrefixLocal»«Caret»«Field(«?RootFormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor»[]«?SuffixLocal» = </Body>
            <Context>
              <Selected>System\VariableMatches(IsArray,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#GetNotLinkingType#» «Caret»«Field(«?FormatLocalName(«?Get(InstanceBaseName)»)»,Variable name)»«BlockAnchor» = </Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NewTypeNoArgs#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#RefNew#» «?Get(Type)»()«SoftCaret»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#NewTypeWithArgs#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#RefNew#» «?Get(Type)»(«Field(,New instance parameters)»«SoftCaret»)</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SimpleInitialValue#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?SimpleName(«?InitialValueFromType(«?Get(Type.FullName)»)»)»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="#NestedType0#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(InstanceBaseName,«?Get(Type)»)»Nullable&lt;«?Get(Type)»&gt; «:#GetVarName#» = «:#NewInstance#»;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?Set(AfterType,«?GetTypeSuffix(«?Get(Type.FullName)»)»)»«?Set(InstanceBaseName,«?Get(Type)»)»«:#NewInstanceRouter#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="c7" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>const&amp;</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="n." CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#SetIntType#»«:#NewInstanceSelectTypeRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InNativeClass</Selected>
            <Selected>Editor\Code\InNativeStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#SetObjectType#»«:#NewInstanceSelectTypeRouter#»</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="n?Type?" CaseSensitiveName="false">
        <Comment>Creates a new instance of the specified type.</Comment>
        <Expansion Priority="0">
          <Body>«?Set(AfterType,«?GetTypeSuffix(«?Get(Type.FullName)»)»)»«?Set(InstanceBaseName,«?Get(Type)»)»«:#NewInstanceRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="n?Type?[" CaseSensitiveName="false">
        <Comment>Creates a new array instance of the specified nullable type.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«DeleteRight("]")»«:#PrimitiveTypeRouter[#»</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InType</Selected>
            <Selected>Editor\Line\Char Right Is(])</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:#PrimitiveTypeRouter[#»</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InType</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPropertyAccessor</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="n?Type?]" CaseSensitiveName="false">
        <Comment>Creates a new initialized array instance of the specified type.</Comment>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:#PrimitiveTypeRouter]#»</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="neh" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#SimpleGcnew#» EventHandler(«Cursor»);</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ninst" CaseSensitiveName="false">
        <Comment>New Instance of the variable on the clipboard</Comment>
        <Expansion Priority="0">
          <Body>«Paste» = «:#RefNew#» «PasteType»(«Caret»);</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="nli" CaseSensitiveName="false">
        <Comment>New local variable instance.</Comment>
        <Expansion Priority="0">
          <Body>«Paste»«:#BeforeGcnew#» «?FormatLocalName(«?Paste»)» = «BlockAnchor»«:#RefNew#» «Paste»()«Caret»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="no" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#SimpleNew#» «Caret»«Field(ClassName,Type to create)»«BlockAnchor»()</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>«FieldStart(Type to create)»«Link(Object)»«:#BeforeGcnew#»«FieldEnd» «Caret»«Field(VarName,Variable name)»«BlockAnchor» = «:#SimpleGcnew#» «Link(Object)»(«Field(,Arguments to constructor)»)</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="nob" CaseSensitiveName="false">
        <Comment>New Object</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#RefNew#» «Cursor»()</Body>
          <Context>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InProperty</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="npt" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#SimpleNew#» Point(«Caret»«Field(0,X-coordinate)»«BlockAnchor», «Field(0,Y-coordinate)»)</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>Point «:#BeforeNew#»«Caret»«Field(«?FormatLocalName(Point)»,Point variable name)»«BlockAnchor» = «:#SimpleNew#» Point(«Field(0,X-coordinate)», «Field(0,Y-coordinate)»)</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
        <Expansion Priority="2" IsExpression="true">
          <Body>Point «:#BeforeNew#»«Caret»«Field(«?FormatFieldName(Point)»,Point variable name)»«BlockAnchor» = «:#SimpleNew#» Point(«Field(0,X-coordinate)», «Field(0,Y-coordinate)»)</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="nsz" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#SimpleNew#» Size(«Cursor», )</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="nwr" CaseSensitiveName="false">
        <Comment>Creates a new WebResponse instance.</Comment>
        <Expansion Priority="0">
          <Body>WebResponse «?FormatLocalName(WebResponse)» = «?NearestLocalOfType(System.Net.WebRequest)»::GetResponse();</Body>
          <Context>
            <Selected>Editor\Code\Analysis\DeclaresLocalOfType(System.Net.WebRequest)</Selected>
            <Selected>Editor\Code\InType</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System.Net</UsingClause>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Overrides" Enabled="false">
      <Comments>Templates in this category declare methods and properties that override members declared in base classes.</Comments>
      <Template Name="#DeclareItem#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?DeclareOverrideItem»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="eq" CaseSensitiveName="false">
        <Comment>Equals override</Comment>
        <Expansion Priority="0">
          <Body>virtual bool Equals(«Marker»  obj) 
{
  return «Marker»«Cursor»__super::Equals(obj)«BlockAnchor»;
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>virtual bool Equals(«Marker» obj) override 
{
  return «Marker»«Cursor»__super::Equals(obj)«BlockAnchor»;
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InComment</Selected>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ghc" CaseSensitiveName="false">
        <Comment>GetHashCode override</Comment>
        <Expansion Priority="0">
          <Body>virtual int GetHashCode(
{
  return «Marker»«Cursor»__super::GetHashCode()«BlockAnchor»;
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>virtual int GetHashCode() override
{
  return «Marker»«Cursor»__super::GetHashCode()«BlockAnchor»;
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="oa" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«ForEach(abstract member in base,#DeclareItem#)»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ts" CaseSensitiveName="false">
        <Comment>ToString override</Comment>
        <Expansion Priority="0">
          <Body>virtual String* ToString()
{
  return «Marker»«Cursor»__super::ToString()«BlockAnchor»;
}</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InClass</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>virtual String^ ToString() override
{
  return «Marker»«Cursor»__super::ToString()«BlockAnchor»;
}</Body>
          <Context>
            <Selected>Editor\Code\InRefType</Selected>
            <Selected>Editor\Code\InValueType</Selected>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
            <Excluded>Editor\Code\InClass</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Properties" OptExpanded="true">
      <Comments>These templates declare properties. This category contains three subcategories for declaring read/write, read-only, and write-only templates. Templates in this parent category create property get and set blocks. </Comments>
      <TemplateCategory Name="Blocks" OptExpanded="true">
        <Template Name="bg" CaseSensitiveName="false">
          <Comment>A read-only property block</Comment>
          <Expansion Priority="0">
            <Body>{
	«Caret»int«BlockAnchor» get()
	{
		return «Marker»;
	}
}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
              <Excluded>Editor\Line\Right Text Contains(abstract)</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>{ «Caret»int«BlockAnchor» get();}</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>__property int get_«BlockAnchor»PropertyName«Cursor»()	 
	{
		return «Marker»;
	}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>__property int get_«BlockAnchor»PropertyName«Cursor»();	 </Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bga" CaseSensitiveName="false">
          <Comment> </Comment>
          <Expansion Priority="0">
            <Body>	{
		virtual «Caret»int«BlockAnchor» get() abstract;
	}
	</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>= 0;
	</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bgs" CaseSensitiveName="false">
          <Comment>A read/write property block</Comment>
          <Expansion Priority="0">
            <Body>{
	«Caret»int«BlockAnchor» get()
	{
		return «Marker»;
	}
	void set(«Caret»int«BlockAnchor» value)
	{
		«Marker» = value;
	}
}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
              <Excluded>Editor\Line\Right Text Contains(abstract)</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>{«Caret»int«BlockAnchor» get();void set(«Caret»int«BlockAnchor» value);}</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>__property «Link(int)» get_«BlockAnchor»«Link(PropertyName)»«Cursor»()	 
	{
		return «Marker»;
	}
__property void set_«BlockAnchor»«Link(PropertyName)»«Cursor»(«Link(int)» value) 
	{
		«Marker» = value;
	}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>__property «Link(int)» get_«BlockAnchor»«Link(PropertyName)»«Cursor»();	 	
__property void set_«BlockAnchor»«Link(PropertyName)»«Cursor»(«Link(int)» value);
</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bs" CaseSensitiveName="false">
          <Comment>A write-only property block</Comment>
          <Expansion Priority="0">
            <Body>{
	void set(«Caret»int«BlockAnchor» value)
	{
		«Marker» = value;
	}
}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
              <Excluded>Editor\Line\Right Text Contains(abstract)</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>{void set(«Caret»int«BlockAnchor» value);}</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>__property void set_«BlockAnchor»PropertyName«Cursor»(int value) 
	{
		«Marker» = value;
	}
</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>__property void set_«BlockAnchor»PropertyName«Cursor»(int value);</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bsa" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>{
	virtual void set(«Caret»int«BlockAnchor» value) abstract;
}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>= 0;</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="get" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»int«BlockAnchor» get()
{
	return «Marker»;
}</Body>
            <Context>
              <Selected>Editor\Code\InProperty</Selected>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InPropertyAccessor</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Caret»int«BlockAnchor» get();</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>__property int get_«BlockAnchor»PropertyName«Cursor»()	 
	{
		return «Marker»;
	}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InPropertyAccessor</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>__property int get_«BlockAnchor»PropertyName«Cursor»();</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="gs" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»int«BlockAnchor» get()
{
	return «Marker»;
}
void set(«Caret»int«BlockAnchor» value)
{
	«Marker» = value;
}</Body>
            <Context>
              <Selected>Editor\Code\InProperty</Selected>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InPropertyAccessor</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>get;set;</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>__property «Link(int)» get_«BlockAnchor»«Link(PropertyName)»«Cursor»()	 
	{
		return «Marker»;
	}
__property void set_«BlockAnchor»«Link(PropertyName)»«Cursor»(«Link(int)» value) 
	{
		«Marker» = value;
	}
</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>get_«BlockAnchor»«Link(PropertyName)»«Cursor»;set_«Link(PropertyName)»;</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ip" CaseSensitiveName="false">
          <Comment>Indexed Property</Comment>
          <Expansion Priority="0">
            <Body>«Link(Element)» GetProjectElement(«Link(int)» index)
{
	return «Marker»;
}
property «Cursor»«Link(Element)»«BlockAnchor» IndexedProperty [«Link(int)»]
{
	«Cursor»«Link(Element)»«BlockAnchor»	get(«Link(int)» «Link(index)»)
	{
		return Get«Link(Element)»(«Link(index)»);
	}
	void set(«Link(int)» «Link(index)», «Link(Element)» «Link(value)»)
	{
     «Marker» = «Link(value)»;
  }
}</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Link(Element)» GetProjectElement(«Link(int)» index)
{
	return «Marker»;
}
__property «Link(Element)» get_«Link(IndexedProperty)»(«Link(int)» «Link(index)»)	 
	{
		return Get«Link(Element)»(«Link(index)»);
	}
__property void set_«Link(IndexedProperty)»(«Link(int)» «Link(index)», «Link(Element)» «Link(value)») 
	{
		MyArr[«Link(index)»] = «Link(value)»;
	}	</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="set" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:setter_»</Body>
            <Context>
              <Selected>Editor\Code\InProperty</Selected>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InPropertyAccessor</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="setter_" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>void set(«Caret»int«BlockAnchor» value)
{
	«Cursor»«Marker» = value;
}</Body>
            <Context>
              <Selected>Editor\Code\InProperty</Selected>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InPropertyAccessor</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>void set(«Caret»int«BlockAnchor» value);</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>__property void set_«BlockAnchor»PropertyName«Cursor»(int value) 
	{
		«Marker» = value;
	}
</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>__property void set_«BlockAnchor»PropertyName«Cursor»(int value);</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Generic System" OptExpanded="true">
        <Template Name="#GenericInterfaceBody#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>
{
	«:#GenericTypeNoArgs#» get(); 
	void set(«:#GenericTypeNoArgs#» value);
}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#GenericInterfaceGetter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>
{
	«:#GenericTypeNoArgs#» get();
}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#GenericInterfaceSetter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>
{
	void set(«:#GenericTypeNoArgs#» value);
}</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Read/Write" OptExpanded="true">
        <Comments>These templates declare properties. Templates in this category start with the letter "p" and are followed by a short mnemonic that represents the type of property to create. Most of these templates declare fields for the property as well, taking advantage of linked identifier technology, which links property names to their corresponding fields. To declare a property without a field variable, end the template with a comma before expanding (comma at the end means you'll get "a shorter version of the template").</Comments>
        <TemplateCategory Name="Generics" OptExpanded="true">
          <Comments>Templates for declaring read/write properties of a generic type. These templates start with "p", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

pl.
ps.
pq.
pd.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonic for the type parameter to the generic, like this:

pl.i
pq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

pd.i,b</Comments>
          <TemplateCategory Name=" System" OptExpanded="true">
            <Template Name="#GenericReadWritePropertyNoArgsNoField#" CaseSensitiveName="false">
              <Comment>Declares a method in an interface, class or struct.</Comment>
              <Expansion Priority="0">
                <Body>property «:#StaticIfNeeded#»«:#GenericNoArgsPropertySignature#»
{
	virtual «:#GenericTypeNoArgs#» get() abstract;	
	virtual void set(«:#GenericTypeNoArgs#» value) abstract;	
}«:#EndProperty#»</Body>
                <Context>
                  <Selected>System\VariableMatches(IsAbstract,true)</Selected>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="1">
                <Body>property «:#StaticIfNeeded#»«:#GenericNoArgsPropertySignature#»
{
	«:#GenericTypeNoArgs#» get()
	{
		«:#GetterNotImplemented#»
	}
	void set(«:#GenericTypeNoArgs#» value)
	{
		«:#SetterNotImplemented#»
	}
}«:#EndProperty#»</Body>
                <Context>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="2">
                <Body>«:#GenericNoArgsPropertySignature#» «:#GenericInterfaceBody#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                </Context>
              </Expansion>
            </Template>
            <Template Name="#GenericReadWritePropertyNoArgsSpecified#" CaseSensitiveName="false">
              <Comment>Declares a method in an interface, class or struct.</Comment>
              <Expansion Priority="0">
                <Body>«:#GenericTypeNoArgs#» «:#PropertyVar#»;
property «:#StaticIfNeeded#»«:#GenericNoArgsPropertySignature#»
{
	«:#GenericTypeNoArgs#» get()
	{
		return «Marker»«:#PropertyVar#»;
	}
	void set(«:#GenericTypeNoArgs#» value)
	{
		«:#PropertyVar#»«Marker» = value;
	}
}«:#EndProperty#»</Body>
                <Context>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="1">
                <Body>«:#GenericNoArgsPropertySignature#» «:#GenericInterfaceBody#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                </Context>
              </Expansion>
            </Template>
            <Template Name="#GenericReadWritePropertyNoFieldPrep#" CaseSensitiveName="false">
              <Expansion Priority="0">
                <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#SetSuffix#»«:#GenericReadWritePropertyNoArgsNoField#(IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
                <Context />
              </Expansion>
            </Template>
            <Template Name="#GenericReadWritePropertyPrep#" CaseSensitiveName="false">
              <Expansion Priority="0">
                <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#ReadWritePropertyRouter#»</Body>
                <Context />
              </Expansion>
            </Template>
          </TemplateCategory>
          <Template Name="p?Generic1Type?." CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadWritePropertyNoArgsSpecified#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic1Type?.-" CaseSensitiveName="false">
            <Comment>Declares an abstract property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadWritePropertyNoArgsSpecified#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic1Type?.," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadWritePropertyNoArgsNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic1Type?.?Type?" CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadWritePropertyPrep#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic1Type?.?Type?-" CaseSensitiveName="false">
            <Comment>Declares an abstract property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadWritePropertyPrep#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic1Type?.?Type?," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadWritePropertyPrep#(IsNoField=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic2Type?." CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadWritePropertyNoArgsSpecified#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic2Type?.-" CaseSensitiveName="false">
            <Comment>Declares an abstract property of the specified two-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter types after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadWritePropertyNoArgsSpecified#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic2Type?.," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadWritePropertyNoArgsNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
            <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadWritePropertyPrep#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic2Type?.?Type1?,?Type2?-" CaseSensitiveName="false">
            <Comment>Declares an abstract property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadWritePropertyPrep#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Generic2Type?.?Type1?,?Type2?," CaseSensitiveName="false">
            <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadWritePropertyPrep#(IsNoField=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Type?0" CaseSensitiveName="false">
            <Comment>Declares a property of the specified nullable type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Type?0-" CaseSensitiveName="false">
            <Comment>Declares an abstract property of the specified nullable type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Type?0," CaseSensitiveName="false">
            <Comment>Declares a property of the specified nullable type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Type?0[" CaseSensitiveName="false">
            <Comment>Declares an array property of the specified nullable type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Type?0[-" CaseSensitiveName="false">
            <Comment>Declares an abstract array property of the specified nullable type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="p?Type?0[," CaseSensitiveName="false">
            <Comment>Declares an array property of the specified nullable type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNullableType=true,IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <TemplateCategory Name="System" OptExpanded="true">
          <Template Name="#ReadWritePropertyNoFieldRouter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:p.,»</Body>
              <Context>
                <Selected>Editor\Code\InRefType</Selected>
                <Selected>Editor\Code\InValueType</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#InterfacePropertyBody#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InClass</Excluded>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InModule</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InStruct</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#ReadWritePropertyRouter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#PropertyReadWrite#»«:#EndProperty#»</Body>
              <Context>
                <Selected>Editor\Code\InRefType</Selected>
                <Selected>Editor\Code\InValueType</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#InterfacePropertyBody#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InClass</Excluded>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InModule</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InStruct</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="p." CaseSensitiveName="false">
          <Comment>Declares a read/write property of type object (type is selected after expansion for quick changes). </Comment>
          <Expansion Priority="0">
            <Body>«:#SetObjectType#»«:#PropertyVarDeclaration#»
property «:#StaticIfNeeded#»«Caret»«:#PropertyTypeField#»«BlockAnchor» «:#PropertyName#»
{
	«:#GetFullType#» get()
	{
		return «Marker»;
	}
	void set(«:#GetFullType#» value)
	{
		«Marker» = value;
	}
}«:#EndProperty#»</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetObjectType#»__property «Caret»«:#PropertyTypeField#»«BlockAnchor»get_«:#PropertyName#»();
__property void set_«Link(PropertyName)» («:#GetFullType#» value);</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#SetObjectType#»«:#PropertyVarDeclaration#»
__property «:#StaticIfNeeded#»«Caret»«:#PropertyTypeField#»«BlockAnchor» get_«:#PropertyName#»()	 
	{
		return «Marker»«:#PropertyVar#»;
	}«:#EndProperty#»
__property «:#StaticIfNeeded#»void set_«Link(PropertyName)»(«:#GetFullType#» value) 
	{
		«:#PropertyVar#»«Marker» = value;
	}«:#EndProperty#»</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#SetObjectType#»property «Caret»«:#PropertyTypeField#»«BlockAnchor» «:#PropertyName#» 
{
	«:#GetFullType#» get(); 
	void set(«:#GetFullType#» value);
}«:#EndProperty#»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="p.," CaseSensitiveName="false">
          <Comment>Declares a read/write property of type object (type is selected after expansion for quick changes). This property does not declare a field variable for storage. </Comment>
          <Expansion Priority="0">
            <Body>«:#SetObjectType#»«:#ReadWritePropertyRouter#(IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="p?Type?" CaseSensitiveName="false">
          <Comment>Declares a property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="p?Type?-" CaseSensitiveName="false">
          <Comment>Declares an abstract property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=false,IsArray=false,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="p?Type?," CaseSensitiveName="false">
          <Comment>Declares a property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="p?Type?[" CaseSensitiveName="false">
          <Comment>Declares an array property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#ReadWritePropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="p?Type?[-" CaseSensitiveName="false">
          <Comment>Declares an abstract array property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="p?Type?[," CaseSensitiveName="false">
          <Comment>Declares an array property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#ReadWritePropertyRouter#(IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Read-only" OptExpanded="true">
        <Comments>These templates declare read-only properties. Templates in this category start with the letter "r" and are followed by a short mnemonic that represents the type of read-only property to create. Most of these templates declare fields for the property as well, taking advantage of linked identifier technology, which links property names to their corresponding fields. To declare a read-only property without a field variable, end the template with a comma before expanding (comma at the end means you'll get "a shorter version of the template").</Comments>
        <TemplateCategory Name="Create on Demand" OptExpanded="true">
          <Comments>Templates for creating properties that initialize a variable based on demand.</Comments>
          <Template Name="cod" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>/// &lt;summary&gt;
/// Gets the «Link(«?PropertyNameFromField(«?Paste»)»)».
/// &lt;/summary&gt;
public «PasteType» «Caret»«Link(«?PropertyNameFromField(«?Paste»)»)»«BlockAnchor»
{
	«PasteType» get()
	{
		// Create on demand...
		if («?Paste» == nullptr)
			«?Paste» = gcnew «PasteType»(«Marker»);
					
		return «?Paste»;
	}
}</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Excluded>Editor\Code\InEvent</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InPropertyAccessor</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>/// &lt;summary&gt;
/// Gets the «Link(«?PropertyNameFromField(«?Paste»)»)».
/// &lt;/summary&gt;
	__property «PasteType» get_«Caret»«Link(«?PropertyNameFromField(«?Paste»)»)»«BlockAnchor»()
	{
			// Create on demand...
		if («?Paste» == 0)
			«?Paste» = new «PasteType»(«Marker»);
					
		return «?Paste»;
	}</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>System\VSVersion\VS2002</Selected>
                <Selected>System\VSVersion\VS2003</Selected>
                <Excluded>Editor\Code\InEvent</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="rpcod" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:cod»</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Code\InStruct</Selected>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <TemplateCategory Name="Generics" OptExpanded="true">
          <Comments>Templates for declaring read-only properties of a generic type. These templates start with "r", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

rl.
rs.
rq.
rd.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonic for the type parameter to the generic, like this:

rl.i
rq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

rd.i,b</Comments>
          <TemplateCategory Name="System" OptExpanded="true">
            <Template Name="#GenericReadOnlyPropertyNoArgsNoField#" CaseSensitiveName="false">
              <Comment>Declares a method in an interface, class or struct.</Comment>
              <Expansion Priority="0">
                <Body>property «:#GenericNoArgsPropertySignature#»
{
	«:#GenericTypeNoArgs#» get()
	{
		«:#GetterNotImplemented#»
	}
}«:#EndProperty#»</Body>
                <Context>
                  <Selected>System\VariableMatches(IsAbstract,true)</Selected>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="1">
                <Body>property «:#GenericNoArgsPropertySignature#»
{
	«:#GenericTypeNoArgs#» get()
	{
		«:#GetterNotImplemented#»
	}
}«:#EndProperty#»</Body>
                <Context>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="2">
                <Body>«:#GenericNoArgsPropertySignature#» «:#GenericInterfaceGetter#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                </Context>
              </Expansion>
            </Template>
            <Template Name="#GenericReadOnlyPropertyNoArgsSpecified#" CaseSensitiveName="false">
              <Comment>Declares a method in an interface, class or struct.</Comment>
              <Expansion Priority="0">
                <Body>«:#GenericTypeNoArgs#» «:#PropertyVar#»;
property «:#GenericNoArgsPropertySignature#»
{
	«:#GenericTypeNoArgs#» get()
	{
		return «Marker»«:#PropertyVar#»;
	}
}«:#EndProperty#»</Body>
                <Context>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="1">
                <Body>«:#GenericNoArgsPropertySignature#» «:#GenericInterfaceGetter#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                </Context>
              </Expansion>
            </Template>
            <Template Name="#GenericReadOnlyPropertyNoFieldPrep#" CaseSensitiveName="false">
              <Expansion Priority="0">
                <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#ReadOnlyPropertyNoFieldRouter#»</Body>
                <Context />
              </Expansion>
            </Template>
            <Template Name="#GenericReadOnlyPropertyPrep#" CaseSensitiveName="false">
              <Expansion Priority="0">
                <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#ReadOnlyPropertyRouter#»</Body>
                <Context />
              </Expansion>
            </Template>
          </TemplateCategory>
          <Template Name="r?Generic1Type?." CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsSpecified#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic1Type?.-" CaseSensitiveName="false">
            <Comment>Declares an abstract read-only property of the specified one-parameter generic type. Letters following the "r" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsSpecified#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic1Type?.," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic1Type?.?Type?" CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadOnlyPropertyPrep#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic1Type?.?Type?-" CaseSensitiveName="false">
            <Comment>Declares an abstract read-only property of the specified one-parameter generic type. Letters following the "r" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadOnlyPropertyPrep#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic1Type?.?Type?," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericReadOnlyPropertyPrep#(IsNoField=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic2Type?." CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsSpecified#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic2Type?.-" CaseSensitiveName="false">
            <Comment>Declares an abstract read-only property of the specified one-parameter generic type. Letters following the "r" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsSpecified#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic2Type?.," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericReadOnlyPropertyNoArgsNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
            <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadOnlyPropertyPrep#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic2Type?.?Type1?,?Type2?-" CaseSensitiveName="false">
            <Comment>Declares an abstract read-only property of the specified two-parameter generic type. Letters following the "r" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadOnlyPropertyPrep#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Generic2Type?.?Type1?,?Type2?," CaseSensitiveName="false">
            <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericReadOnlyPropertyPrep#(IsNoField=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Type?0" CaseSensitiveName="false">
            <Comment>Declares a read-only property of the specified nullable type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Type?0-" CaseSensitiveName="false">
            <Comment>Declares an abstract read-only property of the specified nullable type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Type?0," CaseSensitiveName="false">
            <Comment>Declares a read-only property of the specified nullable type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Type?0[" CaseSensitiveName="false">
            <Comment>Declares a read-only array property of the specified nullable type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Type?0[-" CaseSensitiveName="false">
            <Comment>Declares an abstract read-only array property of the specified nullable type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="r?Type?0[," CaseSensitiveName="false">
            <Comment>Declares a read-only array property of the specified nullable type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNullableType=true,IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <TemplateCategory Name="System" OptExpanded="true">
          <Template Name="#ReadOnlyPropertyBodyNoField#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#SetObjectType#»«:#ReadOnlyPropertyRouter#(IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyPropertyNoFieldRouter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#ReadOnlyPropertyBodyNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InRefType</Selected>
                <Selected>Editor\Code\InValueType</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#InterfaceReadOnlyPropertyBody#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InClass</Excluded>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InModule</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InStruct</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#ReadOnlyPropertyRouter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#PropertyReadOnly#»«:#EndProperty#»</Body>
              <Context>
                <Selected>Editor\Code\InRefType</Selected>
                <Selected>Editor\Code\InValueType</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#InterfaceReadOnlyPropertyBody#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InClass</Excluded>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InModule</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InStruct</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="r." CaseSensitiveName="false">
          <Comment>Read-only property with an empty getter</Comment>
          <Expansion Priority="0">
            <Body>«:#SetObjectType#»«:#PropertyVarDeclaration#»
property «:#StaticIfNeeded#»«Caret»«:#PropertyTypeField#»«BlockAnchor» «:#PropertyName#»
{
	«:#GetFullType#» get()
	{
		return «Marker»;
	}
}«:#EndProperty#»</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetObjectType#»__property «Caret»«:#PropertyTypeField#»«BlockAnchor» get_«:#PropertyName#»();</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#SetObjectType#»«:#PropertyVarDeclaration#»
__property «:#StaticIfNeeded#»«Caret»«:#PropertyTypeField#»«BlockAnchor» get_«:#PropertyName#»()	 
	{
		return «Marker»«:#PropertyVar#»;
	}«:#EndProperty#»</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#SetObjectType#»property «Caret»«:#PropertyTypeField#»«BlockAnchor» «:#PropertyName#» 
{
	«:#GetFullType#» get(); 	
}</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="r.," CaseSensitiveName="false">
          <Comment>Declares a read-only property of type object (type is selected after expansion for quick changes). This property does not declare a field variable for storage. </Comment>
          <Expansion Priority="0">
            <Body>«?Set(Type,object)»«:#PropertyDefaultScope#»«Caret»«:#PropertyTypeField#»«BlockAnchor» «:#PropertyName#»
{
	get
	{
		«:#GetterNotImplemented#»
	}
}«:#EndProperty#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Code\InStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:r.»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="r?Type?" CaseSensitiveName="false">
          <Comment>Declares a read-only property of the specified type. The letters following the "rp" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="r?Type?-" CaseSensitiveName="false">
          <Comment>Declares a read-only property of the specified type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=false,IsArray=false,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2005</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="r?Type?," CaseSensitiveName="false">
          <Comment>Declares a property of the specified type. The letters following the "p" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=true)»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="r?Type?[" CaseSensitiveName="false">
          <Comment>Declares a read-only property of the specified array type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. </Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="r?Type?[-" CaseSensitiveName="false">
          <Comment>Declares an abstract read-only property of the specified array type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. </Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="r?Type?[," CaseSensitiveName="false">
          <Comment>Declares a read-only array property of the specified type. The letters following the "r" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#ReadOnlyPropertyRouter#(IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Write-only" OptExpanded="true">
        <Comments>These templates declare write-only properties. Templates in this category start with the letter "w" and are followed by a short mnemonic that represents the type of write-only property to create. Most of these templates declare fields for the property as well, taking advantage of linked identifier technology, which links property names to their corresponding fields. To declare a write-only property without a field variable, end the template with a comma before expanding (comma at the end means you'll get "a shorter version of the template").</Comments>
        <TemplateCategory Name="Generics" OptExpanded="true">
          <Comments>Templates for declaring write-only properties of a generic type. These templates start with "w", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

wl.
ws.
wq.
wd.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonic for the type parameter to the generic, like this:

wl.i
wq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

wd.i,b</Comments>
          <TemplateCategory Name="System">
            <Template Name="#GenericWriteOnlyPropertyNoArgsNoField#" CaseSensitiveName="false">
              <Comment>Declares a method in an interface, class or struct.</Comment>
              <Expansion Priority="0">
                <Body>property «:#GenericNoArgsPropertySignature#»
{
	virtual void set(«:#GenericTypeNoArgs#» value) abstract;	
}«:#EndProperty#»</Body>
                <Context>
                  <Selected>System\VariableMatches(IsAbstract,true)</Selected>
                  <Selected>System\VSVersion\VS2005</Selected>
                  <Selected>System\VSVersion\VS2008</Selected>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="1">
                <Body>property «:#GenericNoArgsPropertySignature#»
{
	void set(«:#GenericTypeNoArgs#» value)
	{
		«:#SetterNotImplemented#»
	}
}«:#EndProperty#»</Body>
                <Context>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="2">
                <Body>«:#GenericNoArgsPropertySignature#» «:#GenericInterfaceSetter#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                </Context>
              </Expansion>
            </Template>
            <Template Name="#GenericWriteOnlyPropertyNoArgsSpecified#" CaseSensitiveName="false">
              <Comment>Declares a method in an interface, class or struct.</Comment>
              <Expansion Priority="0">
                <Body>«:#GenericTypeNoArgs#» «:#PropertyVar#»;
property «:#GenericNoArgsPropertySignature#»
{
	void set(«:#GenericTypeNoArgs#» value)
	{
		«:#PropertyVar#»«Marker» = value;
	}
}«:#EndProperty#»</Body>
                <Context>
                  <Excluded>Editor\Code\InInterface</Excluded>
                </Context>
              </Expansion>
              <Expansion Priority="1">
                <Body>«:#GenericNoArgsPropertySignature#» «:#GenericInterfaceSetter#»</Body>
                <Context>
                  <Selected>Editor\Code\InInterface</Selected>
                </Context>
              </Expansion>
            </Template>
            <Template Name="#GenericWriteOnlyPropertyNoFieldPrep#" CaseSensitiveName="false">
              <Expansion Priority="0">
                <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#WriteOnlyPropertyNoFieldRouter#»</Body>
                <Context />
              </Expansion>
            </Template>
            <Template Name="#GenericWriteOnlyPropertyPrep#" CaseSensitiveName="false">
              <Expansion Priority="0">
                <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#WriteOnlyPropertyRouter#»</Body>
                <Context />
              </Expansion>
            </Template>
          </TemplateCategory>
          <Template Name="w?Generic1Type?." CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsSpecified#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic1Type?.-" CaseSensitiveName="false">
            <Comment>Declares an abstract write-only property of the specified one-parameter generic type. Letters following the "w" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsSpecified#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic1Type?.," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion.  Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic1Type?.?Type?" CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericWriteOnlyPropertyPrep#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic1Type?.?Type?-" CaseSensitiveName="false">
            <Comment>Declares an abstract write-only property of the specified one-parameter generic type. Letters following the "w" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericWriteOnlyPropertyPrep#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic1Type?.?Type?," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericWriteOnlyPropertyNoFieldPrep#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic2Type?." CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsSpecified#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic2Type?.-" CaseSensitiveName="false">
            <Comment>Declares an abstract write-only property of the specified one-parameter generic type. Letters following the "w" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsSpecified#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic2Type?.," CaseSensitiveName="false">
            <Comment>Declares a property of the specified one-parameter generic type. Letters following the "p" specify the generic. This template allows you to specify the generic parameter type after expansion. Use the Core\Aliases\Dynamic Lists options page to add new generic types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericWriteOnlyPropertyNoArgsNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
            <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericWriteOnlyPropertyPrep#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic2Type?.?Type1?,?Type2?-" CaseSensitiveName="false">
            <Comment>Declares an abstract write-only property of the specified two-parameter generic type. Letters following the "w" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericWriteOnlyPropertyPrep#(IsAbstract=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Generic2Type?.?Type1?,?Type2?," CaseSensitiveName="false">
            <Comment>Declares a property of the specified two-parameter generic type. Letters following the "p" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericWriteOnlyPropertyPrep#(IsNoField=true)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Type?0" CaseSensitiveName="false">
            <Comment>Declares a write-only property of the specified nullable type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Type?0-" CaseSensitiveName="false">
            <Comment>Declares an abstract write-only property of the specified nullable type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Type?0," CaseSensitiveName="false">
            <Comment>Declares a write-only property of the specified nullable type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
            <Expansion Priority="0">
              <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\VSVersion\VS2005</Selected>
                <Selected>System\VSVersion\VS2008</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Type?0[" CaseSensitiveName="false">
            <Comment>Declares a write-only array property of the specified nullable type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Type?0[-" CaseSensitiveName="false">
            <Comment>Declares an abstract write-only array property of the specified nullable type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="w?Type?0[," CaseSensitiveName="false">
            <Comment>Declares a write-only array property of the specified nullable type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
            <Expansion Priority="0">
              <Body>«DeleteRight("]")»«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\Char Right Is(])</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNullableType=true,IsNoField=false,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context>
                <Selected>Editor\Code\InManagedClass</Selected>
                <Selected>Editor\Code\InManagedStruct</Selected>
                <Selected>Editor\Code\InValueClass</Selected>
                <Selected>Editor\Code\InValueStruct</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <TemplateCategory Name="System" OptExpanded="true">
          <Template Name="#WriteOnlyPropertyBodyNoField#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#SetObjectType#»«:#WriteOnlyPropertyRouter#(IsNoField=true,IsArray=false,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#WriteOnlyPropertyNoFieldRouter#" CaseSensitiveName="false">
            <Comment>Creates a write-only property inside an interface, class, or struct.</Comment>
            <Expansion Priority="0">
              <Body>«:#WriteOnlyPropertyBodyNoField#»</Body>
              <Context>
                <Selected>Editor\Code\InRefType</Selected>
                <Selected>Editor\Code\InValueType</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#InterfaceWriteOnlyPropertyBody#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InClass</Excluded>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InModule</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InStruct</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#WriteOnlyPropertyRouter#" CaseSensitiveName="false">
            <Comment>Creates a write-only property inside an interface, class, or struct.</Comment>
            <Expansion Priority="0">
              <Body>«:#PropertyWriteOnly#»«:#EndProperty#»</Body>
              <Context>
                <Selected>Editor\Code\InRefType</Selected>
                <Selected>Editor\Code\InValueType</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InInterface</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#InterfaceWriteOnlyPropertyBody#»</Body>
              <Context>
                <Selected>Editor\Code\InInterface</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InClass</Excluded>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InModule</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InStruct</Excluded>
              </Context>
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="w." CaseSensitiveName="false">
          <Comment>Write-only property with an empty setter</Comment>
          <Expansion Priority="0">
            <Body>«:#SetObjectType#»«:#PropertyVarDeclaration#»
property «Caret»«:#PropertyTypeField#»«BlockAnchor» «:#PropertyName#»
{
	void set(«:#GetFullType#»value)
	{
		«:#PropertyVar#»«Marker» = value;
	}
}«Target»</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetObjectType#»__property void set_«:#PropertyName#»(«:#GetFullType#» value);</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#SetObjectType#»«:#PropertyVarDeclaration#»
__property void set_«:#PropertyName#»(«:#PropertyTypeField#» value) 
	{
		«:#PropertyVar#»«Marker» = value;
	}«Target»</Body>
            <Context>
              <Selected>Editor\Code\InRefType</Selected>
              <Selected>Editor\Code\InValueType</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#SetObjectType#»property «Caret»«:#PropertyTypeField#»«BlockAnchor» «:#PropertyName#» 
{ 
	void set(«:#GetFullType#» value);
}</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="w.," CaseSensitiveName="false">
          <Comment>Declares a write-only property of type object (type is selected after expansion for quick changes). </Comment>
          <Expansion Priority="0">
            <Body>«:#SetObjectType#»«:#WriteOnlyPropertyNoFieldRouter#»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="w?Type?" CaseSensitiveName="false">
          <Comment>Declares a write-only property of the specified type. The letters following the "wp" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="w?Type?," CaseSensitiveName="false">
          <Comment>Declares a write-only property of the specified type. The letters following the "wp" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=true)»</Body>
            <Context>
              <Selected>Editor\Code\InInterface</Selected>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="w?Type?[" CaseSensitiveName="false">
          <Comment>Declares a write-only property of the specified array type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. </Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="w?Type?[-" CaseSensitiveName="false">
          <Comment>Declares an abstract write-only property of the specified array type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=false,IsArray=true,IsAbstract=true,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="w?Type?[," CaseSensitiveName="false">
          <Comment>Declares a write-only property of the specified array type. The letters following the "w" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types. This property will not have a corresponding field for storage.</Comment>
          <Expansion Priority="0">
            <Body>«DeleteRight("]")»«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#WriteOnlyPropertyRouter#(IsNoField=true,IsArray=true,IsAbstract=false,IsWritePropertySelectedName=false)»</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
    </TemplateCategory>
    <TemplateCategory Name="Scope" OptExpanded="true">
      <Template Name="s?Scope?" CaseSensitiveName="false">
        <Comment>Expands to one of the scope keywords.</Comment>
        <Expansion Priority="0" SuppressLastChar="true">
          <Body>«?Get(Scope)»: </Body>
          <Context>
            <Selected>Editor\Line\Left Text Matches RegEx(^%ws%$)</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InheritsFrom(System.Web.UI.Control)</Excluded>
            <Excluded>Editor\Code\InMethodBlock</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InPropertyAccessor</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?Get(Scope)»: </Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethodBlock</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InPropertyAccessor</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Typecast Instances" OptExpanded="true">
      <TemplateCategory Name="System" OptExpanded="true">
        <Template Name="#FirstType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#GenericTypeSelectedNoArgs#»</Body>
            <Context>
              <Selected>System\VariableMatches(IsGenericNoArgs,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SelectedTypeName#»</Body>
            <Context>
              <Selected>System\VariableMatches(LinkTypes,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Get(Type)»«:#BeforeGcnew#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#GenericTypecastPrep#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#GenericSetVars#»«:#TypeCastClipboardRouter#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SubsequentType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#GenericTypeNoArgs#»</Body>
            <Context>
              <Selected>System\VariableMatches(IsGenericNoArgs,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«TypeLink(«?Get(Type)»)»</Body>
            <Context>
              <Selected>System\VariableMatches(LinkTypes,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Get(Type)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#TypeCastClipboardRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(TypeCastExpression,«?Paste»)»«:#TypeCastDeclaration#»</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#TypeCastDeclaration#(TypeCastExpression=Expression)»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#TypeCastDeclaration#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«:#FirstType#» «?PrefixLocal»«SoftCaret»«Field(«?RootFormatLocalName(«?Get(Type)»)»)»«SoftAnchor»«?SuffixLocal» = «:#TypeCastLeftSide#»;</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#TypeCastLeftSide#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>(«:#SubsequentType#»)«Field(«?Get(TypeCastExpression)»)»</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>static_cast&lt;«:#SubsequentType#»«:#BeforeGcnew#»&gt;(«Field(«?Get(TypeCastExpression)»)»)</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="c." CaseSensitiveName="false">
        <Comment>Creates a new instance typecast to a type that may be specified after template expansion.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetObjectType#»«:#TypeCastClipboardRouter#(LinkTypes=true)»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="c?Generic1Type?." CaseSensitiveName="false">
        <Comment>Creates a new instance typecast to the specified generic type. Letters following the "c" specify the generic.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#SetSuffix#»«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericTypecastPrep#(IsGenericNoArgs=true)»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>System\VSVersion\VS2002</Excluded>
            <Excluded>System\VSVersion\VS2003</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="c?Generic1Type?.?Type?" CaseSensitiveName="false">
        <Comment>Creates a new instance typecast to the specified generic type. Letters following the "c" specify the generic.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericTypecastPrep#»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>System\VSVersion\VS2002</Excluded>
            <Excluded>System\VSVersion\VS2003</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="c?Generic2Type?." CaseSensitiveName="false">
        <Comment>Creates a new instance typecast to the specified generic type. Letters following the "c" specify the generic.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericTypecastPrep#(IsGenericNoArgs=true)»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>System\VSVersion\VS2002</Excluded>
            <Excluded>System\VSVersion\VS2003</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="c?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
        <Comment>Creates a new instance typecast to the specified generic type. Letters following the "c" specify the generic.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericTypecastPrep#»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>System\VSVersion\VS2002</Excluded>
            <Excluded>System\VSVersion\VS2003</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="c?Type?" CaseSensitiveName="false">
        <Comment>Creates a new instance typecast to the specified type. Letters following the "c" specify the type.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«:#TypeCastClipboardRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="c?Type?[" CaseSensitiveName="false">
        <Comment>Creates a new array instance typecast to the specified array type.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#SetSuffix#»«DeleteRight("]")»«:#TypePrep#(IsArray=true)»«:#TypeCastClipboardRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\Char Right Is(])</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1" IsExpression="true">
          <Body>«:#SetSuffix#»«:#TypePrep#(IsArray=true)»«:#TypeCastClipboardRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Types" OptExpanded="true">
      <Comments>Templates for creating classes, structs, and interfaces.</Comments>
      <TemplateCategory Name="Classes" OptExpanded="true">
        <Template Name="c-" CaseSensitiveName="false">
          <Comment>Abstract class with constructor</Comment>
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass,IsAbstract=true)»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\DeclaresLocal(c)</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c," CaseSensitiveName="false">
          <Comment>Class (no constructor)</Comment>
          <Expansion Priority="0">
            <Body>«:#Class#(ClassName=MyClass)»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\DeclaresLocal(c)</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c,-" CaseSensitiveName="false">
          <Comment>Abstract class (no constructor)</Comment>
          <Expansion Priority="0">
            <Body>«:#Class#(ClassName=MyClass,IsAbstract=true)»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c-," CaseSensitiveName="false">
          <Comment>Abstract class (no constructor)</Comment>
          <Expansion Priority="0">
            <Body>«:#Class#(ClassName=MyClass,IsAbstract=true)»	</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c?Type?" CaseSensitiveName="false">
          <Comment>Abstract class with constructor</Comment>
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass,HasAncestor=true)»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c?Type?-" CaseSensitiveName="false">
          <Comment>Abstract class with constructor</Comment>
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass,IsAbstract=true,HasAncestor=true)»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c?Type?," CaseSensitiveName="false">
          <Comment>Class (no constructor)</Comment>
          <Expansion Priority="0">
            <Body>«:#Class#(ClassName=MyClass,HasAncestor=true)»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c?Type?,-" CaseSensitiveName="false">
          <Comment>Abstract class (no constructor)</Comment>
          <Expansion Priority="0">
            <Body>«:#Class#(ClassName=MyClass,IsAbstract=true,HasAncestor=true)»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="c?Type?-," CaseSensitiveName="false">
          <Comment>Abstract class (no constructor)</Comment>
          <Expansion Priority="0">
            <Body>«:#Class#(ClassName=MyClass,IsAbstract=true,HasAncestor=true)»	</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="CodeRush 1.1.46 Compatibility" OptExpanded="true">
        <Template Name="bc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(BaseClassName,BaseClass)»«:#BaseClass#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bdc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(BaseClassName,BaseClass)»«?Set(DerivedClassName,DerivedClass)»«:#BaseClass#»
«:#DerivedClass#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bdgc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(BaseClassName,BaseClass)»«?Set(DerivedClassName,DerivedClass)»«:#BaseGcClass#»
«:#DerivedGcClass#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bdrc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(BaseClassName,BaseClass)»«?Set(DerivedClassName,DerivedClass)»«:#BaseRefClass#»
«:#DerivedRefClass#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="bgc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(BaseClassName,BaseClass)»«:#BaseGcClass#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="brc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(BaseClassName,BaseClass)»«:#BaseRefClass#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ccr" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Link(ClassName)»::«BlockAnchor»«Link(ClassName)»«Caret»(const «Link(ClassName)» &amp; parameter)
{
	«Marker»
}</Body>
            <Context>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InValueClass</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«BlockAnchor»«Link(«?Type»)»«Caret»(const «Link(«?Type»)» &amp;parameter)
{
	«Marker»
}</Body>
            <Context>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InValueClass</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«BlockAnchor»«Link(«?Type»)»«Caret»(«Link(«?Type»)» «:#BeforeGcnew#»parameter)
{
	«Marker»
}</Body>
            <Context>
              <Selected>Editor\Code\InManagedClass</Selected>
              <Selected>Editor\Code\InManagedStruct</Selected>
              <Selected>Editor\Code\InValueClass</Selected>
              <Selected>Editor\Code\InValueStruct</Selected>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="cl" CaseSensitiveName="false">
          <Comment>Class and constructor.</Comment>
          <Expansion Priority="0">
            <Body>«:#ClassBody#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="dc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(DerivedClassName,DerivedClass)»«:#DerivedClass#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="dgc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(DerivedClassName,DerivedClass)»«:#DerivedGcClass#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="drc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(DerivedClassName,DerivedClass)»«:#DerivedRefClass#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="en" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>enum «:#Enum#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="gc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ManagedClassBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="gccr" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Link(ClassName)»::«BlockAnchor»«Link(ClassName)»«Caret»(«Link(ClassName)» «:#BeforeGcnew#»parameter)
{
	«Marker»
}</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InClass</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InValueClass</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="gcl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ManagedClassBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pac" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass,IsAbstract=true)»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbac" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass,IsAbstract=true)»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbacl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass,IsAbstract=true)»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbcl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass)»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:cl»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbec" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#MemberTypeVisibility#» enum class «:#Enum#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Project\IsNative</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pben" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:pbec»</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Project\IsNative</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:pbve»</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Project\IsNative</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbgac" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#TypeVisibility#» __abstract __gc class «BlockAnchor»«Link(MyClass)»«Caret»
{
	public:
	«Link(MyClass)»()
	{
		«Marker»
	}
};</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#TypeVisibility#» __abstract __gc class «BlockAnchor»«Link(MyClass)»«Caret»
{
	public:
	«Link(MyClass)»()
	{
		«Marker»
	}
};</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbgcl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#TypeVisibility#» «:gcl»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbrac" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#TypeVisibility#» ref class «BlockAnchor»«Link(MyClass)»«Caret» abstract
{
	public:
	«Link(MyClass)»()
	{
		«Marker»
	}
};</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:pbgac»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbrcl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:rcl»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbrs" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#DefaultVisibility#» «:#StructBody#»</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbvcl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:vcl»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbve" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#DefaultVisibility#» __value enum «:#Enum#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="pbvs" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#DefaultVisibility#» «:#Value#» «:#StructBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="rc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ManagedClassBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="rcl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass)»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="st" CaseSensitiveName="false">
          <Comment>Class and constructor.</Comment>
          <Expansion Priority="0">
            <Body>«:#StructBody#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="vc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ValueClassBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="vcl" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«:#ValueClassBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System" OptExpanded="true">
        <Template Name="#AbstractClassStartBody#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#TypeDefaultScope#»__gc __abstract class «:#ClassName#»«:#InheritsFrom#»
{</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#TypeDefaultScope#»ref class «:#ClassName#» abstract «:#InheritsFrom#»
{</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#AddEnum#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>,
«Caret»«Field(NextElement,Press Enter to add another element or Escape to jump to the marker)»«BlockAnchor»«Target(#AddEnum#)»</Body>
            <Context>
              <Excluded>Editor\Line\Left Text Contains(",")</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>
«Caret»«Field(NextElement,Press Enter to add another element or Escape to jump to the marker)»«BlockAnchor»«Target(#AddEnum#)»</Body>
            <Context>
              <Selected>Editor\Line\Left Text Contains(",")</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#Class#" CaseSensitiveName="false">
          <Comment>Class (no constructor).</Comment>
          <Expansion Priority="0">
            <Body>«:#ClassStart#»
	«Target»
«:#ClassEnd#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ClassEnd#" CaseSensitiveName="false">
          <Comment>End of a class declaration</Comment>
          <Expansion Priority="0">
            <Body>};</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ClassName#" CaseSensitiveName="false">
          <Comment>The name of a class (selected and linked on the class name)</Comment>
          <Expansion Priority="0">
            <Body>«BlockAnchor»«FieldStart»«Link(«?Get(ClassName)»)»«FieldEnd»«Caret»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ClassStart#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#AbstractClassStartBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#TypeDefaultScope#»«:#Value#» class «:#ClassName#»«:#InheritsFrom#»
{</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Selected>System\VariableMatches(IsValue,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#TypeDefaultScope#»«:#RefGc#» class «:#ClassName#»«:#InheritsFrom#»
{</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
              <Excluded>Project\IsNative</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>class «:#ClassName#»«:#InheritsFrom#»
{</Body>
            <Context>
              <Selected>Project\IsNative</Selected>
              <Excluded>Project\IsManaged</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#ClassWithConstructor#" CaseSensitiveName="false">
          <Comment>Class and constructor.</Comment>
          <Expansion Priority="0">
            <Body>«:#ClassStart#»
	«Target»
«:#Constructor#»
«:#ClassEnd#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#Collection#" CaseSensitiveName="false">
          <Comment>Collection class template. Must call &lt;&lt;?Set(CollItemClass)&gt;&gt; before calling.</Comment>
          <Expansion Priority="0">
            <Body>«?Set(CollItemLocal,«?FormatLocalName(«?Get(CollItemClass)»)»Item)»«?Set(CollItemParam,«?FormatParamName(«?Get(CollItemClass)»)»)»public class «Caret»«Link(«?Get(CollItemClass)»)»«BlockAnchor»Collection: CollectionBase
{
	// public methods...
	#region Add
	public int Add(«Link(«?Get(CollItemClass)»)» «Link(«?Get(CollItemParam)»)»)
	{
		return List.Add(«Link(«?Get(CollItemParam)»)»);
	}
	#endregion
	#region IndexOf
	public int IndexOf(«Link(«?Get(CollItemClass)»)» «Link(«?Get(CollItemParam)»)»)
	{
		for(int i = 0; i &lt; List.Count; i++)
			if (this[i] == «Link(«?Get(CollItemParam)»)»)    // Found it
				return i;
		return -1;
	}
	#endregion
	#region Insert
	public void Insert(int index, «Link(«?Get(CollItemClass)»)» «Link(«?Get(CollItemParam)»)»)
	{
	  List.Insert(index, «Link(«?Get(CollItemParam)»)»);
	}
	#endregion
	#region Remove
	public void Remove(«Link(«?Get(CollItemClass)»)» «Link(«?Get(CollItemParam)»)»)
	{
		List.Remove(«Link(«?Get(CollItemParam)»)»);
	}
	#endregion
	#region Find
	// TODO: If desired, change parameters to Find method to search based on a property of «Link(«?Get(CollItemClass)»)».
	public «Link(«?Get(CollItemClass)»)» Find(«Marker»«Link(«?Get(CollItemClass)»)» «Link(«?Get(CollItemParam)»)»)
	{
		foreach(«Link(«?Get(CollItemClass)»)» «Link(«?Get(CollItemLocal)»)» in this)
			if («Link(«?Get(CollItemLocal)»)» == «Link(«?Get(CollItemParam)»)»)    // Found it
				return «Link(«?Get(CollItemLocal)»)»;
		return null;    // Not found
	}
	#endregion
	#region Contains
	// TODO: If you changed the parameters to Find (above), change them here as well.
	public bool Contains(«Marker»«Link(«?Get(CollItemClass)»)» «Link(«?Get(CollItemParam)»)»)
	{
		return (Find(«Link(«?Get(CollItemParam)»)») != null);
	}
	#endregion
	
	// public properties...
	#region this[int index]
	public «Link(«?Get(CollItemClass)»)» this[int index] 
	{
		get
		{
			return («Link(«?Get(CollItemClass)»)») List[index];
		}
		set
		{
			List[index] = value;
		}
	}
	#endregion
}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#Constructor#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public:
	«:#StaticIfNeeded#»«Link(«?Get(ClassName)»)»()
	{
		«Marker»
	}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#InheritsFrom#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>: «?Get(Type)»</Body>
            <Context>
              <Selected>System\VariableMatches(HasAncestor,true)</Selected>
              <Excluded>Editor\Code\Analysis\IsSealedType(«?Get(Type.FullName)»)</Excluded>
              <Excluded>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body />
            <Context />
          </Expansion>
        </Template>
        <Template Name="#interface#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#InterfaceDefaultScope#»__gc __interface «Caret»«Field(IMyInterface,Interface name)»«BlockAnchor»
{
	«Target»«Marker»
};</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InStruct</Excluded>
              <Excluded>System\VSVersion\VS2005</Excluded>
              <Excluded>System\VSVersion\VS2008</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#InterfaceDefaultScope#»interface class «Caret»«Field(IMyInterface,Interface name)»«BlockAnchor»
{
	«Target»«Marker»
};</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InInterface</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#RefGc#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>__gc</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>ref</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SimpleClassStart#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>class «:#ClassName#»«:#InheritsFrom#»
{</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#struct#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#StructDefaultScope#»«:#ManagedStructBody#»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Type Bodies" OptExpanded="true">
        <Template Name="#BaseClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>class «BlockAnchor»«FieldStart»«Link(«?Get(BaseClassName)»)»«FieldEnd»«Caret»
{
public:
	«Target»
	«Link(«?Get(BaseClassName)»)»()
	{
		«Target»«Marker»
	}
	virtual ~«Link(«?Get(BaseClassName)»)»()
	{
		«Target»«Marker»
	}
};</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#BaseGcClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public __gc class «BlockAnchor»«FieldStart»«Link(«?Get(BaseClassName)»)»«FieldEnd»«Caret»
{
public:
	«Target»
	«Link(«?Get(BaseClassName)»)»()
	{
		«Target»«Marker»
	}
	virtual ~«Link(«?Get(BaseClassName)»)»()
	{
		«Target»«Marker»
	}
};</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#BaseRefClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public ref class «BlockAnchor»«FieldStart»«Link(«?Get(BaseClassName)»)»«FieldEnd»«Caret»
{
public:
	«Target»
	«Link(«?Get(BaseClassName)»)»()
	{
		«Target»«Marker»
	}
	virtual ~«Link(«?Get(BaseClassName)»)»()
	{
		«Target»«Marker»
	}
	!«Link(«?Get(BaseClassName)»)»()
	{
		«Target»«Marker»
	}
};</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#ClassBody#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(ClassName,ClassName)»«:#SimpleClassStart#»
  	«Target»
«:#Constructor#»
«:#ClassEnd#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#Collection#" CaseSensitiveName="false">
          <Comment>Collection class template. Must call &lt;&lt;?Set(CollItemClass)&gt;&gt; before calling.</Comment>
          <Expansion Priority="0">
            <Body>public __gc «?Set(CollItemLocal,«?FormatLocalName(«?Get(CollItemClass)»)»)»«?Set(CollItemParam,«?FormatParamName(«?Get(CollItemClass)»)»)»class «Link(«?Get(CollItemClass)»)»Collection: public CollectionBase
{
	// public methods...
	public:
  int Add(«Link(«?Get(CollItemClass)»)» *«Link(«?Get(CollItemParam)»)»)
	{
		return List-&gt;Add(«Link(«?Get(CollItemParam)»)»);
	}	
	int IndexOf(«Link(«?Get(CollItemClass)»)» *«Link(«?Get(CollItemParam)»)»)
	{
		for(int i = 0; i &lt; List-&gt;Count; i++)
			if (this-&gt;Item[i] == «Link(«?Get(CollItemParam)»)»)    // Found it
				return i;
		return -1;
	}		
	void Insert(int index, «Link(«?Get(CollItemClass)»)» *«Link(«?Get(CollItemParam)»)»)
	{
	  List-&gt;Insert(index, «Link(«?Get(CollItemParam)»)»);
	}
	void Remove(«Link(«?Get(CollItemClass)»)» *«Link(«?Get(CollItemParam)»)»)
	{
		List-&gt;Remove(«Link(«?Get(CollItemParam)»)»);
	}
	// TODO: If desired, change parameters to Find method to search based on a property of «Link(«?Get(CollItemClass)»)».
	«Link(«?Get(CollItemClass)»)» *Find(«Marker»«Link(«?Get(CollItemClass)»)» *«Link(«?Get(CollItemParam)»)»)
	{
		for(int i; i&lt;List-&gt;Count; i++)
			if (this-&gt;Item[i] == «Link(«?Get(CollItemParam)»)»)
					return «Link(«?Get(CollItemParam)»)»;
		return 0;    // Not found
	}
	// TODO: If you changed the parameters to Find (above), change them here as well.
	bool Contains(«Marker»«Link(«?Get(CollItemClass)»)» *«Link(«?Get(CollItemParam)»)»)
	{
		return (Find(«Link(«?Get(CollItemParam)»)») != 0);
	}	
	// public properties...
__property «Link(«?Get(CollItemClass)»)» *get_«Link(Item)»(«Link(int)» «Link(index)»)	 
	{
			return static_cast&lt;«Link(«?Get(CollItemClass)»)»*&gt;(List-&gt;Item[«Link(index)»]);
	}
__property void set_«Link(Item)»(«Link(int)» «Link(index)», «Link(«?Get(CollItemClass)»)» *«Link(value)») 
	{
		List-&gt;Item[«Link(index)»] = «Link(value)»;
	}	
};</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>public ref «?Set(CollItemLocal,«?FormatLocalName(«?Get(CollItemClass)»)»)»«?Set(CollItemParam,«?FormatParamName(«?Get(CollItemClass)»)»)»class «Link(«?Get(CollItemClass)»)»Collection: CollectionBase
{
	// public methods...
	public:
  int Add(«Link(«?Get(CollItemClass)»)» ^«Link(«?Get(CollItemParam)»)»)
	{
		return List-&gt;Add(«Link(«?Get(CollItemParam)»)»);
	}	
	int IndexOf(«Link(«?Get(CollItemClass)»)» ^«Link(«?Get(CollItemParam)»)»)
	{
		for(int i = 0; i &lt; List-&gt;Count; i++)
			if (this[i] == «Link(«?Get(CollItemParam)»)»)    // Found it
				return i;
		return -1;
	}		
	void Insert(int index, «Link(«?Get(CollItemClass)»)» ^«Link(«?Get(CollItemParam)»)»)
	{
	  List-&gt;Insert(index, «Link(«?Get(CollItemParam)»)»);
	}
	void Remove(«Link(«?Get(CollItemClass)»)» ^«Link(«?Get(CollItemParam)»)»)
	{
		List-&gt;Remove(«Link(«?Get(CollItemParam)»)»);
	}
	// TODO: If desired, change parameters to Find method to search based on a property of «Link(«?Get(CollItemClass)»)».
	«Link(«?Get(CollItemClass)»)» ^Find(«Marker»«Link(«?Get(CollItemClass)»)» ^«Link(«?Get(CollItemParam)»)»)
	{
		for each(«Link(«?Get(CollItemClass)»)» ^«Link(«?Get(CollItemLocal)»)» in this)
			if («Link(«?Get(CollItemLocal)»)» == «Link(«?Get(CollItemParam)»)»)    // Found it
				return «Link(«?Get(CollItemLocal)»)»;
		return nullptr;    // Not found
	}
	// TODO: If you changed the parameters to Find (above), change them here as well.
	bool Contains(«Marker»«Link(«?Get(CollItemClass)»)» ^«Link(«?Get(CollItemParam)»)»)
	{
		return (Find(«Link(«?Get(CollItemParam)»)») != nullptr);
	}
	
	// public properties...
	property «Link(«?Get(CollItemClass)»)» ^default [«Link(int)»] 
	{
		«Link(«?Get(CollItemClass)»)» ^get(«Link(int)» «Link(index)»)
		{
			return static_cast&lt;«Link(«?Get(CollItemClass)»)»^&gt; (List[«Link(index)»]);
		}
		void set(«Link(int)» «Link(index)», «Link(«?Get(CollItemClass)»)» ^«Link(value)»)
		{
			List[«Link(index)»] = «Link(value)»;
		}
	}
};</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#DefaultVisibility#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#DerivedClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>class «BlockAnchor»«FieldStart»«Link(«?Get(DerivedClassName)»)»«FieldEnd»«Caret»: public «Marker»«Link(«?Get(BaseClassName)»)»
{
public:
	«Target»
	«Link(«?Get(DerivedClassName)»)»()
	{
		«Target»«Marker»
	}
	virtual ~«Link(«?Get(DerivedClassName)»)»()
	{
		«Target»«Marker»
	}
};</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#DerivedGcClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public __gc class «BlockAnchor»«FieldStart»«Link(«?Get(DerivedClassName)»)»«FieldEnd»«Caret»: public «Marker»«Link(«?Get(BaseClassName)»)»
{
public:
	«Target»
	«Link(«?Get(DerivedClassName)»)»()
	{
		«Target»«Marker»
	}
	virtual ~«Link(«?Get(DerivedClassName)»)»()
	{
		«Target»«Marker»
	}
};</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#DerivedRefClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public ref class «BlockAnchor»«FieldStart»«Link(«?Get(DerivedClassName)»)»«FieldEnd»«Caret»: public «Marker»«Link(«?Get(BaseClassName)»)»
{
public:
	«Target»
	«Link(«?Get(DerivedClassName)»)»()
	{
		«Target»«Marker»
	}
	virtual ~«Link(«?Get(DerivedClassName)»)»()
	{
		«Target»«Marker»
	}
	!«Link(«?Get(DerivedClassName)»)»()
	{
		«Target»«Marker»
	}
};</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#Enum#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»«Field(MyEnum,Enum name)»«BlockAnchor»
{
	«Field(FirstElement,Enter element name and press Enter to add another element or Escape to jump to the marker)»«Target(#AddEnum#)»
};«Marker»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ManagedClassBody#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#RefGc#» «:#ClassBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#ManagedStructBody#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«:#RefGc#» «:#StructBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#StructBody#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>struct «Caret»«Field(MyStruct,Struct name)»«BlockAnchor»
{
	«Target»«Marker»
};</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#Value#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>__value</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>value</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ValueClassBody#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ClassWithConstructor#(ClassName=MyClass,IsValue=true)»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#ValueClassStruct#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#Value#» «:#StructBody#»</Body>
            <Context>
              <Selected>Project\IsManaged</Selected>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="cls" CaseSensitiveName="false">
        <Comment>Current class name</Comment>
        <Expansion Priority="0">
          <Body>«Class»</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="coll" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>//«?Paste»
«?Set(CollItemClass,MyClass)»«:#Collection#»
</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Collections</UsingClause>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?Set(CollItemClass,MyClass)»«:#Collection#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Collections</UsingClause>
        </Expansion>
      </Template>
      <Template Name="pbin" CaseSensitiveName="false">
        <Comment>interface</Comment>
        <Expansion Priority="0">
          <Body>public interface class «Caret»«Field(IMyInterface,Interface name)»«BlockAnchor»
{
	«Target»«Marker»
};</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>public __gc __interface «Caret»«Field(IMyInterface,Interface name)»«BlockAnchor»
{
	«Target»«Marker»
}</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
            <Excluded>System\VSVersion\VS2005</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="pbs" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#DefaultVisibility#» «:#ManagedStructBody#»</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Variables" OptExpanded="true">
      <Comments>Templates for creating variables. These templates all start with a "v" and are followed by a mnemonic to represent the type.</Comments>
      <TemplateCategory Name="Generics" OptExpanded="true">
        <Comments>Templates for declaring variables of generic types. These templates start with a "v", are followed by the mnemonic for the generic type (e.g., "l" for List, "q" for Queue, "s" for Stack, "d" for Dictionary, etc.) and then a dot, like this:

vl.
vs.
vq.
vd.

While the example templates above will expand, you can optionally follow this mnemonic with a mnemonics for the type parameter to the generic, like this:

vl.i
vq.s

Some generics accept two type parameters. You can declare those by separating the types with a comma, like this:

vd.i,b</Comments>
        <TemplateCategory Name="System" OptExpanded="true">
          <Template Name="#GenericVarNoArgsSpecified#" CaseSensitiveName="false">
            <Comment>Declares a variable inside a class or struct, inside an argument list (a parameter), or inside a code block.</Comment>
            <Expansion Priority="0">
              <Body>«:#GenericTypeSelectedNoArgs#» «Field(«?FormatParamName(ParamName)»)»«Target»</Body>
              <Context>
                <Selected>Editor\Code\InParameterBlock</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>«:#GenericTypeSelectedNoArgs#» «Field(«?FormatLocalName(VarName)»)»;</Body>
              <Context>
                <Selected>Editor\Code\InMethod</Selected>
                <Selected>Editor\Code\InPropertyAccessor</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="2">
              <Body>«:#GenericTypeSelectedNoArgs#»</Body>
              <Context>
                <Selected>Editor\Code\InMethod</Selected>
                <Selected>Editor\Code\InPropertyAccessor</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Line\OnEmptyLine</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="3">
              <Body>«:#GenericTypeSelectedNoArgs#» «Field(«?FormatFieldName(FieldName)»)»;</Body>
              <Context>
                <Selected>Editor\Code\InClass</Selected>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InMethod</Excluded>
                <Excluded>Editor\Code\InProperty</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="4">
              <Body>«:#GenericTypeSelectedNoArgs#» «Field(«?FormatLocalName(VarName)»)»;</Body>
              <Context>
                <Selected>Editor\Line\OnEmptyLine</Selected>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InManagedClass</Excluded>
                <Excluded>Editor\Code\InManagedStruct</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InValueStruct</Excluded>
                <Excluded>Editor\Code\InValueType</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="5">
              <Body>«:#GenericTypeSelectedNoArgs#» «Field(«?FormatLocalName(VarName)»)»;</Body>
              <Context>
                <Excluded>Editor\Code\InComment</Excluded>
                <Excluded>Editor\Code\InManagedClass</Excluded>
                <Excluded>Editor\Code\InManagedStruct</Excluded>
                <Excluded>Editor\Code\InNativeClass</Excluded>
                <Excluded>Editor\Code\InNativeStruct</Excluded>
                <Excluded>Editor\Code\InString</Excluded>
                <Excluded>Editor\Code\InValueStruct</Excluded>
                <Excluded>Editor\Code\InValueType</Excluded>
              </Context>
            </Expansion>
          </Template>
          <Template Name="#GenericVarPrep#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«?Set(Type,«:#GenericType#»)»«?Set(AfterType,^)»«:#VarRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#NullableVarRouter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>«:#TypePrep#(IsNullable=true)»«:#VarRouter#»</Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="#ArrayNullableRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«?Get(FieldType)» «:#GetVarName#»</Body>
            <Context>
              <Selected>Editor\Code\InParameterBlock</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Get(FieldType)»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«?Get(FieldType)» «:#GetVarName#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#GetNullableType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(FieldType,Nullable&lt;«?Get(Type)»&gt;^)»«:#ArrayNullableRouter#»</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
              <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Get(FieldType)»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#GetArrayVarRouter#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#GetNullableTypeArray#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(FieldType,array&lt;Nullable&lt;«?Get(Type)»&gt;^&gt;^)»«:#ArrayNullableRouter#»</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
              <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#GetArrayVarRouter#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="v?Generic1Type?." CaseSensitiveName="false">
          <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericVarNoArgsSpecified#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="v?Generic1Type?.?Type?" CaseSensitiveName="false">
          <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericVarPrep#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="v?Generic2Type?." CaseSensitiveName="false">
          <Comment>Declares a field of the specified one-parameter generic type. Letters following the "f" specify the generic. Letters following the "." specify the generic parameter type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericVarNoArgsSpecified#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="v?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
          <Comment>Declares a field of the specified two-parameter generic type. Letters following the "f" specify the generic. Comma-separated letters following the "." specify the generic parameter types. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
          <Expansion Priority="0">
            <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericVarPrep#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="v?Type?0" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>«:#GetNullableType#»</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="v?Type?0[" CaseSensitiveName="false">
          <Expansion Priority="0" IsExpression="true">
            <Body>«DeleteRight("]")»«:#GetNullableTypeArray#»</Body>
            <Context>
              <Selected>Editor\Line\Char Right Is(])</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#GetNullableTypeArray#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System" OptExpanded="true">
        <Template Name="#ArrayBodyRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«?Get(FieldType)» «:#GetVarName#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#FieldInNativeClassRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«?Get(Type)» «:#GetVarName#»[]</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«?Get(Type)» «:#GetVarName#»[]</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#SetSuffix#»«:#GetArrayInClassRouter#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#GetArrayInClassRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«:#GetNotLinkingType#» «:#GetVarName#» __nogc[]</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«:#GetNotLinkingType#» «:#GetVarName#»[]</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Set(InstanceBaseName,«?Get(Type)»)»array&lt;«:#GetNotLinkingType#»&gt;^ «:#GetVarName#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#GetArrayVarRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#StaticIfNeeded#»«:#FieldInNativeClassRouter#»;</Body>
            <Context>
              <Selected>Editor\Code\InNativeClass</Selected>
              <Selected>Editor\Code\InNativeStruct</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#SetSuffix#»«:#GetArrayInClassRouter#»</Body>
            <Context>
              <Selected>Editor\Code\InParameterBlock</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#SetSuffix#»«:#GetArrayInClassRouter#»;</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#GetFullType#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="4">
            <Body>«:#StaticIfNeeded#»«:#SetSuffix#»«:#GetArrayInClassRouter#»;</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="5">
            <Body>«:#SetSuffix#»«:#GetArrayInClassRouter#»;</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
              <Excluded>Editor\Code\InValueType</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="6">
            <Body>«:#SetSuffix#»«:#GetArrayInClassRouter#»;</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
              <Excluded>Editor\Code\InValueType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#NewLocalVarNameBasedOnType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?PrefixLocal»«Field(«?RootFormatLocalName(«?Get(Type)»)»,Variable name)»«?SuffixLocal»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#VarRouter#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ParamBody#»</Body>
            <Context>
              <Selected>Editor\Code\InParameterBlock</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#LocalFieldBody#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«:#GetNotlinkingType#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#FieldBody#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="4">
            <Body>«:#LocalFieldBody#»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
              <Excluded>Editor\Code\InValueType</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="5">
            <Body>«:#StaticIfNeeded#»«:#LocalFieldBody#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
              <Excluded>Editor\Code\InValueType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#VarRouterSelectType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#ParamBodySelectType#»</Body>
            <Context>
              <Selected>Editor\Code\InParameterBlock</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#LocalFieldBodySelectType#»</Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«Caret»«Field(«:#GetFullType#»)»«BlockAnchor» </Body>
            <Context>
              <Selected>Editor\Code\InMethod</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Line\OnEmptyLine</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«:#StaticIfNeeded#»«:#FieldBodySelectType#»</Body>
            <Context>
              <Selected>Editor\Code\InClass</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InMethod</Excluded>
              <Excluded>Editor\Code\InProperty</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="4">
            <Body>«:#LocalFieldBodySelectType#»</Body>
            <Context>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
              <Excluded>Editor\Code\InValueType</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="5">
            <Body>«:#GetFullType#»</Body>
            <Context>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InManagedClass</Excluded>
              <Excluded>Editor\Code\InManagedStruct</Excluded>
              <Excluded>Editor\Code\InNativeClass</Excluded>
              <Excluded>Editor\Code\InNativeStruct</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InValueStruct</Excluded>
              <Excluded>Editor\Code\InValueType</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="v." CaseSensitiveName="false">
        <Comment>Variable of type Object.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetIntType#»«:#VarRouterSelectType#»</Body>
          <Context>
            <Selected>Editor\Code\InNativeClass</Selected>
            <Selected>Editor\Code\InNativeStruct</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#SetObjectType#»«:#VarRouterSelectType#»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="v?NativeType?" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«:#VarRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InParameterBlock</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Project\IsNative</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="v?Type?" CaseSensitiveName="false">
        <Comment>Declares a field of the specified type. The letters following the "f" indicate the type. Use the Core\Aliases\Dynamic Lists options page to add new types.</Comment>
        <Expansion Priority="0">
          <Body>«:#SetSuffix#»«:#VarRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InManagedStruct</Selected>
            <Selected>Editor\Code\InMethod</Selected>
            <Selected>Editor\Code\InParameterBlock</Selected>
            <Selected>Editor\Code\InStruct</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
            <Selected>Editor\Code\InValueStruct</Selected>
            <Selected>Project\IsManaged</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="v?Type?[" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«DeleteRight("]")»«:#GetArrayVarRouter#»</Body>
          <Context>
            <Selected>Editor\Line\Char Right Is(])</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>System\AutoCompletion\Inserted Closing Bracket on this Line</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#GetArrayVarRouter#»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <Template Name="ns" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>namespace «Cursor»
{
	«Marker»
}
</Body>
        <Context>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="DevEx">
    <Comments>Templates for Developer Express Products</Comments>
    <TemplateCategory Name="CodeRush" OptExpanded="true">
      <Comments>Templates in this category make it easier to write CodeRush plug-ins.</Comments>
      <Template Name="cr." CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>CodeRush::«CompleteWord»«Cursor»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
          <UsingClause>DevExpress::CodeRush::Core</UsingClause>
        </Expansion>
      </Template>
      <Template Name="le" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>LanguageElement</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>DevExpress::CodeRush::StructuralParser</UsingClause>
        </Expansion>
      </Template>
      <Template Name="udxc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>using namespace DevExpress::CodeRush::«Cursor»«CompleteWord»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="XPO" OptExpanded="true">
      <Comments>Templates in this category generate code to work with Express Persistent Objects.</Comments>
      <Template Name="xc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>public «:#ManagedClass#» «BlockAnchor»«Link(PersistentClass)»«Cursor»: public XPObject
{
  public:
  «Link(PersistentClass)»()
	{
		«Marker»
	}
		
	«Link(PersistentClass)»(Session«:#BeforeGcnew#» session): XPObject(session)
	{
	  «Marker»      
	}
};</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Project\XAFProject</Excluded>
          </Context>
          <UsingClause>DevExpress.Xpo</UsingClause>
        </Expansion>
        <Expansion Priority="1">
          <Body>[DefaultClassOptions]
public «:#ManagedClass#» «BlockAnchor»«Link(PersistentClass)»«Cursor»: public BaseObject
{
  public:
  «Link(PersistentClass)»()
	{
		«Marker»
	}
		
	«Link(PersistentClass)»(Session«:#BeforeGcnew#» session): XPObject(session)
	{
	  «Marker»      
	}
};</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\XAFProject</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <Template Name="udx" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>using namespace DevExpress::«Cursor»«CompleteWord»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Directives">
    <Comments>Templates in this category declare conditional directives.</Comments>
    <Template Name="3d" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#define </Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="3f" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#if «BlockAnchor»«Paste»«Cursor»</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>#if «Cursor»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="3fn" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#if «BlockAnchor»«Paste»«Cursor»
«Marker»
#endif</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>#if «Cursor»
«Marker»
#endif</Body>
        <Context>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="3i" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#include &lt;«Cursor»«Marker»&gt;
</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="3i'" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#include "«Cursor»«Marker»"
</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="3i," CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#include &lt;«Cursor»«Marker»&gt;
</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="3l" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#else </Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="3n" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#endif</Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="3p" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#pragma </Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="3po" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>#pragma once
</Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="do" CaseSensitiveName="false">
      <Comment>define once</Comment>
      <Expansion Priority="0">
        <Body>#ifndef «BlockAnchor»«Link(HEADERNAME_H)»«Caret»
#define «Link(HEADERNAME_H)»
// declarations...
#endif «Link(HEADERNAME_H)»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethodBlock</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="udo" CaseSensitiveName="false">
      <Comment>undefine once</Comment>
      <Expansion Priority="0">
        <Body>#ifdef «BlockAnchor»«Link(HEADERNAME_H)»«Caret»
#undef «Link(HEADERNAME_H)»
// declarations...
#endif «Link(HEADERNAME_H)»</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethodBlock</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Expressions">
    <Comments>Templates for checking the value of an identifier on the clipboard. Templates in this category that start with the letter "n" imply a negative boolean operation (e.g., nv = Not Visible). You can also use templates in the Setting Values category inside expressions.</Comments>
    <Template Name="#NullExpression#" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>0</Body>
        <Context>
          <Selected>System\VSVersion\VS2002</Selected>
          <Selected>System\VSVersion\VS2003</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>nullptr</Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="akd" CaseSensitiveName="false">
      <Comment>Alt Key Down</Comment>
      <Expansion Priority="0">
        <Body>(Control::ModifierKeys &amp; Keys::Alt) == Keys::Alt</Body>
        <Context />
        <UsingClause>System::Windows::Forms</UsingClause>
      </Expansion>
    </Template>
    <Template Name="ckd" CaseSensitiveName="false">
      <Comment>Control Key Down</Comment>
      <Expansion Priority="0">
        <Body>(Control::ModifierKeys &amp; Keys::Control) == Keys::Control</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
        <UsingClause>System::Windows::Forms</UsingClause>
      </Expansion>
    </Template>
    <Template Name="n&quot;" CaseSensitiveName="false">
      <Comment>not equal to a string</Comment>
      <Expansion Priority="0" IsExpression="true">
        <Body>!= "«Marker(30)»«Caret»"</Body>
        <Context>
          <Selected>Editor\Code\InString</Selected>
          <Selected>Editor\Line\Left Text Matches RegEx(.*%Identifier%%mws%n")</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="1" IsExpression="true">
        <Body>«Paste» != "«Marker(30)»«Caret»"</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InString</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="2" IsExpression="true">
        <Body>«Marker»«Caret» != "«HardMarker(60)»"</Body>
        <Context>
          <Selected>Editor\Code\InString</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="n0" CaseSensitiveName="false">
      <Comment>not zero</Comment>
      <Expansion Priority="0" IsExpression="true">
        <Body>!= 0</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Line\Left Text Matches RegEx(.*%Identifier%%mws%n0)</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="1" IsExpression="true">
        <Body>«Paste» != 0</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="2" IsExpression="true">
        <Body>«Marker»«Caret» != 0</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="n1" CaseSensitiveName="false">
      <Comment>not one</Comment>
      <Expansion Priority="0" IsExpression="true">
        <Body>!= 1</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Line\Left Text Matches RegEx(.*%Identifier%%mws%n1)</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="1" IsExpression="true">
        <Body>«Paste» != 1</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
      <Expansion Priority="2" IsExpression="true">
        <Body>«Marker»«Caret» != 1</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="na" CaseSensitiveName="false">
      <Comment>not null</Comment>
      <Expansion Priority="0" IsExpression="true">
        <Body>== «:#NullExpression#»</Body>
        <Context>
          <Selected>Editor\Code\InMethodBlock</Selected>
          <Selected>Editor\Code\InPropertyAccessor</Selected>
          <Selected>Editor\Line\Left Text Matches RegEx(.*%Identifier%%mws%na)</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InParameterBlock</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1" IsExpression="true">
        <Body>«Paste» == «:#NullExpression#»</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InMethodBlock</Selected>
          <Selected>Editor\Code\InPropertyAccessor</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="2" IsExpression="true">
        <Body>«Caret»«Marker» == «:#NullExpression#»</Body>
        <Context>
          <Selected>Editor\Code\InMethodBlock</Selected>
          <Selected>Editor\Code\InPropertyAccessor</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ne" CaseSensitiveName="false">
      <Comment>not enabled</Comment>
      <Expansion Priority="0">
        <Body>!«Paste»::Enabled</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="nn" CaseSensitiveName="false">
      <Comment>not null</Comment>
      <Expansion Priority="0" IsExpression="true">
        <Body>!= «:#NullExpression#»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Line\Left Text Matches RegEx(.*%Identifier%%mws%nn)</Selected>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1" IsExpression="true">
        <Body>«Paste» != «:#NullExpression#»</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="2" IsExpression="true">
        <Body>«Caret»«Marker» != «:#NullExpression#»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="nse" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>!= String::Empty</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Editor\Line\Left Text Matches RegEx(.*%Identifier%%mws%nn)</Selected>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«Paste» != String::Empty</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="2">
        <Body>«Caret»«Marker» != String::Empty</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="nv" CaseSensitiveName="false">
      <Comment>not visible</Comment>
      <Expansion Priority="0">
        <Body>!«Paste»::Visible</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="skd" CaseSensitiveName="false">
      <Comment>Shift Key Down</Comment>
      <Expansion Priority="0">
        <Body>(Control::ModifierKeys &amp; Keys::Shift) == Keys::Shift</Body>
        <Context />
        <UsingClause>System::Windows::Forms</UsingClause>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Graphics">
    <Comments>Templates in this category make it easier to work with classes and properties declared in System.Drawing.</Comments>
    <TemplateCategory Name="GDI" OptExpanded="true">
      <Template Name="bfr" ExpansionTrigger="Secondary" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>Bitmap::FromResource(GetType(), "«Caret».bmp")</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="cl" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>Color::«CompleteWord»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="syb" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>SystemBrushes::«CompleteWord»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="syc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>SystemColors::«CompleteWord»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="syp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>SystemPens::«CompleteWord»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Identity">
    <Comments>The Identify templates all begin with the letter "I" and work with an identifier on the clipboard, pasting it plus a property or method call at the cursor.</Comments>
    <Template Name="ibm" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Bottom</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Bottom)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ic" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Checked</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Checked)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="icl" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Clear();</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithMethod(Clear)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="icn" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Count</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Count)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="icr" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;ClientRectangle</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(ClientRectangle)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="idi" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Dispose()</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithMethod(Dispose)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="ie" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Enabled</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Enabled)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="iht" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Height</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Height)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="iln" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Length</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Length)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ilo" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Location</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Location)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ilt" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Left</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Left)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="inm" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Name</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Name)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ipa" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Parent</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Parent)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="irt" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Right</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Right)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="isz" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Size</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Size)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="itp" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Top</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Top)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="iv" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Visible</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Visible)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="iwd" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«Paste»-&gt;Width</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Width)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Member Access">
    <Comments>Templates in this category access common properties and methods.</Comments>
    <TemplateCategory Name="DateTime" OptExpanded="true">
      <Template Name="d8n" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>DateTime::Now</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="d8t" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>DateTime::Today </Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="dtn" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:d8n»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="dtt" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:d8t»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Diagnostics" OptExpanded="true">
      <Template Name="cw" CaseSensitiveName="false">
        <Comment>Console WriteLine...</Comment>
        <Expansion Priority="0">
          <Body>Console::WriteLine(«Caret»«Field()»);</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="cwf" CaseSensitiveName="false">
        <Comment>Console WriteLine with String.Format(...)</Comment>
        <Expansion Priority="0">
          <Body>Console::WriteLine(String.Format("«Field(,Message)»«Caret»", «Field(,arguments to String.Format)»));</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="cwq" CaseSensitiveName="false">
        <Comment>Console WriteLine (with quotes)...</Comment>
        <Expansion Priority="0">
          <Body>Console::WriteLine("«Caret»«Field()»");</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ddb" CaseSensitiveName="false">
        <Comment>Debug WriteLine...</Comment>
        <Expansion Priority="0">
          <Body>Debugger::Break();</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Diagnostics</UsingClause>
        </Expansion>
      </Template>
      <Template Name="wl" CaseSensitiveName="false">
        <Comment>Debug WriteLine</Comment>
        <Expansion Priority="0">
          <Body>Debug::WriteLine(«Caret»«Field()»);</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Diagnostics</UsingClause>
        </Expansion>
      </Template>
      <Template Name="wlf" CaseSensitiveName="false">
        <Comment>Debug WriteLine with String.Format(...)</Comment>
        <Expansion Priority="0">
          <Body>Debug::WriteLine(String.Format("«Field(,Message)»«Caret»", «Field(,arguments to String.Format)»));</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Diagnostics</UsingClause>
        </Expansion>
      </Template>
      <Template Name="wlq" CaseSensitiveName="false">
        <Comment>Debug WriteLine (with quotes)</Comment>
        <Expansion Priority="0">
          <Body>Debug::WriteLine("«Caret»«Field()»");</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Diagnostics</UsingClause>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Empty" OptExpanded="true">
      <Comments>Templates in this category access the .Empty static property of many classes and all end with ".e". The letters before the "." represent the struct.</Comments>
      <TemplateCategory Name="CodeRush 1.1.46 Compatibility" OptExpanded="true">
        <Template Name="eae" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>EventArgs::Empty</Body>
            <Context>
              <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System">
        <Template Name="#TypeEmpty#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Get(Type)»::Empty</Body>
            <Context>
              <Selected>Editor\Code\Analysis\HasStaticMember(«?Get(Type.FullName)»,Empty)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#NoExpansion#»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="?Type?.e" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#TypeEmpty#»</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="c.e" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>Color::Empty</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System::Drawing</UsingClause>
        </Expansion>
      </Template>
      <Template Name="g.e" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>Gui::Empty</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="s.e" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>String::Empty</Body>
          <Context>
            <Selected>Editor\Code\InType</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>System</UsingClause>
        </Expansion>
      </Template>
    </TemplateCategory>
    <Template Name="apr" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>Application::Run(«:#RefNew#» «Class»());</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="cr" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>ClientRectangle</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="cvt" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>Convert::To«CompleteWord»«Caret»(«HardMarker»);</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Line\OnEmptyLine</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="dr." CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>DialogResult::«CompleteWord»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="dtn" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>DateTime::Now</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="dtt" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>DateTime::Today </Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="gtfn" CaseSensitiveName="false">
      <Expansion Priority="0" SuppressLastChar="true">
        <Body>GetType()::FullName </Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="inv" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>Invalidate();</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="io" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>IndexOf(«Cursor»)</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ipz" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>IntPtr::Zero</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ma" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>Marshal::«Cursor»«CompleteWord»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InClass</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
        <UsingClause>System::Runtime::InteropServices</UsingClause>
      </Expansion>
    </Template>
    <Template Name="mb" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>MessageBox::Show(«Field()»«Caret»);</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>Project\IsNative</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
        <UsingClause>System::Windows::Forms</UsingClause>
      </Expansion>
    </Template>
    <Template Name="mbq" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>MessageBox::Show("«Field(,Message to display)»«Caret»");</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
        <UsingClause>System::Windows::Forms</UsingClause>
      </Expansion>
    </Template>
    <Template Name="si" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>SystemInformation::«Cursor»«CompleteWord»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\DeclaresLocal(si)</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Line\AppearsToDeclare</Excluded>
        </Context>
        <UsingClause>System::Windows::Forms</UsingClause>
      </Expansion>
    </Template>
    <Template Name="t." CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>this-&gt;«CompleteWord»«Cursor»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ti" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«BlockAnchor»type«Caret»::typeid</Body>
        <Context>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="to" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>__typeof(«Cursor»«Paste»«BlockAnchor»)</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>System\VSVersion\VS2002</Selected>
          <Selected>System\VSVersion\VS2003</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>__typeof(«Cursor»«Marker»)</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Selected>System\VSVersion\VS2002</Selected>
          <Selected>System\VSVersion\VS2003</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="2">
        <Body>«Cursor»«Paste»«BlockAnchor»::typeid</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="3">
        <Body>«Cursor»«Paste»«BlockAnchor»::typeid</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ts" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>ToString();</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Program Blocks">
    <TemplateCategory Name="Else blocks" OptExpanded="true">
      <Template Name="blb" CaseSensitiveName="false">
        <Comment>block - else - block (useful after an if-expression)</Comment>
        <Expansion Priority="0">
          <Body>{
	«Cursor»«Marker»
}
else
{
	«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(blb)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(blb)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lb" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
{
	«Cursor»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lb)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lb)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else if («Cursor»)</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lf)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lf)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ll" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(ll)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(ll)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lr" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	«SmartReturn»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lr)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lr)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lr&quot;" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	return "";</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lrf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	return false;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lrf)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lrf)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lrn" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	return «:n»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lrn)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lrn)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lrt" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	return true;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lrt)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lrt)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lsf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	«Paste» = false;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lsf)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lsf)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lsn" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	«Paste» = «:n»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lsn)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lsn)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="lst" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>else
	«Paste» = true;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\DeclaresLocal(lst)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(lst)</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Flow" OptExpanded="true">
      <TemplateCategory Name="System" OptExpanded="true">
        <Template Name="#CaseStatement#" CaseSensitiveName="false">
          <Comment>Generates a Case block -- called from the switch template.</Comment>
          <Expansion Priority="0">
            <Body>	case «?Get(itemType)»::«?Get(itemName)»:
		«Marker»
		break;

</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#default#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>default:
	«Caret»
break;</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#DefaultForEach#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>for each(«Caret»«Field(Type,Element type)»«:#BeforeGcnew#»«BlockAnchor» «Field(item,Variable name)» in «Field(Collection,Collection instance)»)
{
	«Target»
}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#fe2003#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(IteratorVar,i)»«:#fe2003ToFor2003#»</Body>
            <Context>
              <Selected>Editor\Clipboard\HasArrayType</Selected>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Set(Type,«?EnumerableType(«?PasteType»)»)»IEnumerator* «Link(enumerator)» = «:#ForEachPaste#»-&gt;GetEnumerator();
while(«Link(enumerator)»-&gt;MoveNext())
{
	«TypeLink(«?Get(Type)»)»* «?FormatLocalName(«?Get(Type)»)» = («TypeLink(«?Get(Type)»)»*)«Link(enumerator)»-&gt;Current;
	«Caret»
}</Body>
            <Context>
              <Selected>Editor\Clipboard\Implements(System.Collections.IEnumerable)</Selected>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Clipboard\EnumerableTypeIsObject</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Set(Type,«?EnumerableType(«?PasteType»)»)»IEnumerator* «Link(enumerator)» = «?Paste»-&gt;GetEnumerator();
while(«Link(enumerator)»-&gt;MoveNext())
{
	«Caret»«TypeLink(«?Get(Type)»)»«BlockAnchor»* «Field(item,Variable name)» = («TypeLink(«?Get(Type)»)»*)«Link(enumerator)»-&gt;Current;
	«Target»
}</Body>
            <Context>
              <Selected>Editor\Clipboard\EnumerableTypeIsObject</Selected>
              <Selected>Editor\Clipboard\Implements(System.Collections.IEnumerable)</Selected>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>IEnumerator* «Link(enumerator)» = «Field(Collection,Collection instance)»-&gt;GetEnumerator();
while(«Link(enumerator)»-&gt;MoveNext())
{
	«TypeLink(Type)»* «Caret»«Field(Type,Element type)»«BlockAnchor» = («TypeLink(Type)»*)«Link(enumerator)»-&gt;Current;
	«Target»
}</Body>
            <Context>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#fe2003ToFor2003#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>for (int «:#IteratorVar#» = 0; «:#IteratorVar#» &lt; «FieldStart(Upper bound)»upperBound«Link(«?Paste»)»«FieldEnd»; «:#IteratorVar#»++)
{
	«?Get(Type)» «?FormatLocalName(«?Get(Type)»)» = «Link(«?Paste»)»[«:#IteratorVar#»];
	«Caret»
}</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifierWithProperty(Count)</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>for (int «:#IteratorVar#» = 0; «:#IteratorVar#» &lt; «FieldStart(Upper bound)»upperBound«Link(«?Paste»)»«FieldEnd»; «:#IteratorVar#»++)
{
	«?Get(Type)» «?FormatLocalName(«?Get(Type)»)» = «Link(«?Paste»)»[«:#IteratorVar#»];
	«Caret»
}</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>for (int «:#IteratorVar#» = 0; «:#IteratorVar#» &lt; «FieldStart(Upper bound)»upperBound«Link(«?Paste»)»«FieldEnd»; «:#IteratorVar#»++)
{
	«?Get(Type)» «?FormatLocalName(«?Get(Type)»)» = «Link(«?Paste»)»[«:#IteratorVar#»];
	«Caret»
}</Body>
            <Context>
              <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>for (int «:#IteratorVar#» = 0; «:#IteratorVar#» &lt; «FieldStart(Upper bound)»«Link(«?Paste»)»-&gt;Length«FieldEnd»; «:#IteratorVar#»++)
{
	«?Get(Type)» «?FormatLocalName(«?Get(Type)»)» = «Link(«?Paste»)»[«:#IteratorVar#»];
	«Caret»
}</Body>
            <Context>
              <Excluded>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#fe2005#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(EnumType,«?SimpleTypeName(«?PasteArrayBaseType»)»)»for each(«?Get(EnumType)»«:#BeforeGcnew#» «?FormatLocalName(«?Get(EnumType)»)» in «?Paste»)
{
	«Caret»
}</Body>
            <Context>
              <Selected>Editor\Clipboard\HasArrayType</Selected>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#DefaultForEach#»</Body>
            <Context>
              <Selected>Editor\Clipboard\Implements(System.Collections.Generic.IEnumerable`1)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Set(EnumType,«?EnumerableType(«?PasteType»)»)»for each(«?Get(EnumType)»«:#BeforeGcnew#» «?FormatLocalName(«?Get(EnumType)»)» in «:#ForEachPaste#»)
{
	«Caret»
}</Body>
            <Context>
              <Selected>Editor\Clipboard\Implements(System.Collections.IEnumerable)</Selected>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Clipboard\EnumerableTypeIsObject</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>«?Set(EnumType,«?EnumerableType(«?PasteType»)»)»for each(«Caret»«Field(«?Get(EnumType)»)»«:#BeforeGcnew#»«BlockAnchor» «Field(item,Variable name)» in «?Paste»)
{
	«Target»
}</Body>
            <Context>
              <Selected>Editor\Clipboard\EnumerableTypeIsObject</Selected>
              <Selected>Editor\Clipboard\Implements(System.Collections.IEnumerable)</Selected>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="4">
            <Body>«:#DefaultForEach#»</Body>
            <Context>
              <Selected>Editor\Code\InMethodBlock</Selected>
              <Selected>Editor\Code\InPropertyAccessor</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#finally#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>__finally</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>finally</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ForEachPaste#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Paste»()</Body>
            <Context>
              <Selected>Editor\Clipboard\HasMethodName</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Paste»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#ForLoopRouter#" CaseSensitiveName="false">
          <Comment>Expands the MainForLoop template with the correct upperBound, based on context.</Comment>
          <Expansion Priority="0">
            <Body>«?Set(upperBound,«?Paste»-&gt;Length)»«:#MainForLoop#»</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifierWithProperty(Length)</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Set(upperBound,«?Paste»-&gt;Count)»«:#MainForLoop#»</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifierWithProperty(Count)</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="2">
            <Body>«?Set(upperBound,«?Paste»)»«:#MainForLoop#»</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="3">
            <Body>for (int «:#IteratorVar#» = 0; «:#IteratorVar#» &lt; «FieldStart(UpperBound)»«:#UpperBoundPlaceholder#»«FieldEnd»; «:#IteratorVar#»++)
{
	«Target»«Marker»
}</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\AtEndOfLine</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="#IteratorVar#" CaseSensitiveName="false">
          <Comment>A linked iterator variable of the for-loop.</Comment>
          <Expansion Priority="0">
            <Body>«Link(«?Get(IteratorVar)»)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#MainForLoop#" CaseSensitiveName="false">
          <Comment>System template that expans to a for-loop. The iteratorVar and upperBound variables should be set before calling.</Comment>
          <Expansion Priority="0">
            <Body>for (int «:#IteratorVar#» = 0; «:#IteratorVar#» &lt; «Caret»«FieldStart(Upper bound)»«?Get(upperBound)»«FieldEnd»«BlockAnchor»; «:#IteratorVar#»++)
{
	«Target»
}</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="b," CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:bk,»</Body>
          <Context>
            <Selected>Editor\Line\AtEndOfLine</Selected>
            <Excluded>Editor\Code\DeclaresLocal(b)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\AppearsToDeclare(b)</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="bk" CaseSensitiveName="false">
        <Comment>C# code block</Comment>
        <Expansion Priority="0">
          <Body>{
	«Cursor»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Line\AtEndOfLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="bk," CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>{ «Caret» }</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="br" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>break;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ca" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>case «Caret»«Field(value)»«BlockAnchor»:</Body>
          <Context>
            <Selected>Editor\Code\InCase</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>case «Caret»«Field(value)»«BlockAnchor»:
	«Target»
break;</Body>
          <Context>
            <Selected>Editor\Code\InSwitch</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="co" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:con»</Body>
          <Context>
            <Selected>Editor\Code\InBreakableLoop</Selected>
            <Selected>Editor\Code\InFieldInitializer</Selected>
            <Excluded>Editor\Code\DeclaresLocal(co)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="con" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>continue;</Body>
          <Context>
            <Selected>Editor\Code\InBreakableLoop</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="do" CaseSensitiveName="false">
        <Comment>do - while loop</Comment>
        <Expansion Priority="0">
          <Body>«:dw»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="dw" CaseSensitiveName="false">
        <Comment>do - while loop</Comment>
        <Expansion Priority="0">
          <Body>do
{
	«Marker»
} while («Cursor»);</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="fe" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(Type,«?SimpleTypeName(«?PasteArrayBaseType»)»)»«?Set(upperBound,«?Paste»-&gt;Length)»«:#fe2003#»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Project\IsNative</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#fe2005#»</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Project\IsNative</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="for" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(IteratorVar,i)»«:#ForLoopRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\AtEndOfLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="fr?IteratorVar?" CaseSensitiveName="false">
        <Comment>For loop. The mnemonic following the "fr" indicates the iterator variable to use in the loop (try i, j, k, ix, and c).</Comment>
        <Expansion Priority="0">
          <Body>«:#ForLoopRouter#»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\AtEndOfLine</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="sw" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:switch»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\AtEndOfLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>switch </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\AtEndOfLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="switch" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>switch («Caret»«Field(«?Paste»,Expression to direct the switch statement)»«BlockAnchor»)
{
	«ForEach(EnumElement in ClipType,#CaseStatement#)»}</Body>
          <Context>
            <Selected>Editor\Clipboard\HasEnum</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>switch («Caret»«?Paste»«BlockAnchor»)
{
	case 0«Marker»:
		«Marker»
		break;
}</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>switch («:#ExpressionPlaceholder#»)
{
	case 0«Marker»:
		«Marker»
		break;
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tn" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>throw «:#gcnew#» «Marker»«Cursor»;</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tne" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>// «Paste»
throw «:#SimpleGcnew#» Exception(String::Format("«Cursor»",«Cursor»));</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>throw «:#SimpleGcnew#» Exception(String::Format("«Cursor»", «Cursor»));</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tne," CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>throw «:#SimpleGcnew#» Exception("«Cursor»");</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tx" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>try
{
	«Cursor»
}
catch (Exception «:#BeforeGcnew#»«Marker»e)
{
	«Marker»
}</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\InParens</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="wh" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:while»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="while">
        <Expansion Priority="0">
          <Body>while («:#ExpressionPlaceholder#»)
{
	«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="If blocks" OptExpanded="true">
      <Template Name="cod" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// Create on demand...
		if («?Paste» == «:#NullSign#»)
			«?Paste» = «:#SimpleGcnew#» «PasteType»(«Marker»);</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="if" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>if («Cursor»)</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\AtEndOfLine</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ifa" CaseSensitiveName="false">
        <Comment>if assigned</Comment>
        <Expansion Priority="0">
          <Body>if («Paste» != «:n»)</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>if («Marker»«Cursor» != «:n»)</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ifb" CaseSensitiveName="false">
        <Comment>if block</Comment>
        <Expansion Priority="0">
          <Body>if («Cursor»)
{
	«Marker»;
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ifn" CaseSensitiveName="false">
        <Comment>if not</Comment>
        <Expansion Priority="0">
          <Body>if (!«Cursor»)</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ifna" CaseSensitiveName="false">
        <Comment>if not assigned</Comment>
        <Expansion Priority="0">
          <Body>if («Paste» == «:n»)</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="inr" CaseSensitiveName="false">
        <Comment>if not assigned (or if false)  then return</Comment>
        <Expansion Priority="0">
          <Body>if (!«Paste»)
	return;</Body>
          <Context>
            <Selected>Editor\Clipboard\HasBoolean</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>if («Paste» == «:n»)
	return;</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasBoolean</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>if («Cursor» == «:n»)
	return;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="inr&quot;" CaseSensitiveName="false">
        <Comment>if not assigned then return an empty string</Comment>
        <Expansion Priority="0">
          <Body>if («Paste» == «:n»)
	return "";</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Code\InString</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>if («Cursor»«Marker»Identifier«BlockAnchor» == «:n»)
	return "";</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Code\InString</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="inr0" CaseSensitiveName="false">
        <Comment>if not assigned then return zero</Comment>
        <Expansion Priority="0">
          <Body>if («Paste» == «:n»)
	return 0;</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>if («Cursor»«Marker»Identifier«BlockAnchor» == «:n»)
	return 0;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="inrf" CaseSensitiveName="false">
        <Comment>if not assigned then return false</Comment>
        <Expansion Priority="0">
          <Body>if («Paste» == «:n»)
	return false;</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>if («Cursor»«Marker»Identifier«BlockAnchor» == «:n»)
	return false;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="inrn" CaseSensitiveName="false">
        <Comment>if not assigned then return null</Comment>
        <Expansion Priority="0">
          <Body>if («Paste» == «:n»)
	return «:n»;</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>if («Cursor»«Marker»Identifier«BlockAnchor» == «:n»)
	return «:n»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="inrt" CaseSensitiveName="false">
        <Comment>if not assigned then return true</Comment>
        <Expansion Priority="0">
          <Body>if («Paste» == «:n»)
	return true;</Body>
          <Context>
            <Selected>Editor\Clipboard\HasIdentifier</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>if («Cursor»«Marker»Identifier«BlockAnchor» == «:n»)
	return true;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="inx" CaseSensitiveName="false">
        <Comment>if not assigned then exit (return)</Comment>
        <Expansion Priority="0">
          <Body>«:inr»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Returning Values" OptExpanded="true">
      <Template Name="r'" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return '«Cursor»';</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="r&quot;" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return "«Cursor»";</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="r0" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return 0;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="r1" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return 1;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="r-1" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return -1;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="rf" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return false;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ri" CaseSensitiveName="false">
        <Comment>Return Instance -- creates a local variable (called "lResult") of the same type as the method.</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>«ReturnType» «Cursor»«Link(result)»«BlockAnchor»;
«Marker»
return «Link(result)»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Excluded>Editor\Code\DeclaresLocal(ri)</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="rn" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return «:n»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="rr" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«SmartReturn»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Line\InParens</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="rse" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>return String::Empty;</Body>
          <Context>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="rt" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return true;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="rth" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return this;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="try..." OptExpanded="true">
      <Template Name="tc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>try
{
	«Cursor»«Marker»
}
catch (Exception «:#BeforeGcnew#»«Marker»ex)
{
	«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Project\IsNative</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tcf" CaseSensitiveName="false">
        <Comment>try/catch/finally</Comment>
        <Expansion Priority="0">
          <Body>try
{
	«Cursor»«Marker»
}
catch (Exception «:#BeforeGcnew#»«Marker»ex)
{
	«Marker»
}
«:#finally#»
{
	«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Project\IsNative</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>try
{
	«Caret»«Marker»
}
«:#finally#»
{
	«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Project\IsNative</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tfb" CaseSensitiveName="false">
        <Comment>Try/Finally block toggles boolean on the clipboard.</Comment>
        <Expansion Priority="0">
          <Body>«Paste» = true;

try
{
	«Cursor»
}
«:#finally#»
{
	«Paste» = false;
}</Body>
          <Context>
            <Selected>Editor\Clipboard\HasBoolean</Selected>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Project\IsNative</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Serialization">
    <Comments>Templates in this category generate code to make easier to write serialization code. The "is" template generates the needed methods to implement ISerializable, and the "av" (AddValue) and "gv" (GetValue) templates are used to move data between the stream and a field identifier on the clipboard.</Comments>
    <Template Name="av" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>info-&gt;AddValue("«Paste»", «Paste»);</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause>System::Runtime::Serialization</UsingClause>
      </Expansion>
    </Template>
    <Template Name="gv" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«Paste» = info-&gt;GetBoolean("«Paste»");</Body>
        <Context>
          <Selected>Editor\Clipboard\HasBoolean</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause>System::Runtime::Serialization</UsingClause>
      </Expansion>
      <Expansion Priority="1">
        <Body>«Paste» = info-&gt;GetInteger("«Paste»");</Body>
        <Context>
          <Selected>Editor\Clipboard\HasInteger</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause>System::Runtime::Serialization</UsingClause>
      </Expansion>
      <Expansion Priority="2">
        <Body>«Paste» = info-&gt;GetString("«Paste»");</Body>
        <Context>
          <Selected>Editor\Clipboard\HasString</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause>System::Runtime::Serialization</UsingClause>
      </Expansion>
      <Expansion Priority="3">
        <Body>«Paste» = («PasteType»)info-&gt;GetValue(«Marker»);</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause>System::Runtime::Serialization</UsingClause>
      </Expansion>
    </Template>
    <Template Name="is" CaseSensitiveName="false">
      <Comment>Implements ISerializable</Comment>
      <Expansion Priority="0">
        <Body>«Class»(SerializationInfo info, StreamingContext context): public «Marker» baseClass (info, context)
{
	// TODO: Add calls to info-&gt;GetValue
	// Tip: copy fields to the clipboard and use the "gv" template.
	«Cursor»
};
void GetObjectData(SerializationInfo info, StreamingContext context)override
{
 __super::GetObjectData(info, context);
	// TODO: Add calls to info.AddValue as needed.
	// Tip: copy fields to the clipboard and use the "av" template.
	«Marker»
}</Body>
        <Context>
          <Selected>Editor\Code\InClass</Selected>
          <Selected>Editor\Code\InStruct</Selected>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::Serialization</UsingClause>
      </Expansion>
      <Expansion Priority="1">
        <Body>ISerializable</Body>
        <Context>
          <Selected>Editor\Code\InClass</Selected>
          <Selected>Editor\Code\InStruct</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InMethod</Excluded>
          <Excluded>Editor\Code\InProperty</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
        <UsingClause>System::Runtime::Serialization</UsingClause>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Setting Values">
    <Comments>Templates in this category all begin with the letter "S" and work with an identifier copied to the clipboard</Comments>
    <Template Name="s--" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = «Paste» - «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s&quot;" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = "«Cursor»«Marker(30)»";</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InMethod</Selected>
          <Selected>Editor\Code\InPropertyAccessor</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="s++" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = «Paste» + «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s=" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = «Cursor»</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s==" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«:s++»</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s0" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = 0;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s1" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = 1;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s-1" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = -1;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sbc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;BackColor = Color::«Cursor»«CompleteWord»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(BackColor)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sbs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;BorderStyle = BorderStyle::«Cursor»«CompleteWord»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(BorderStyle)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sbt" CaseSensitiveName="false">
      <Comment>Set Boolean Toggle (toggles the state of the boolean identifier on the clipboard)</Comment>
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = !«Paste»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Checked = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Checked)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="scf" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Checked = false;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Checked)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sct" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Checked = true;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Checked)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="se" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Enabled = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Enabled)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sef" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Enabled = false;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Enabled)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="set" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Enabled = true;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Enabled)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
          <Excluded>Editor\Code\InInterface</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sf" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = false;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="shi" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Hint = "";</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Hint)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sht" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Height = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Height)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="slo" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Location = new Point(0«Cursor», 0);</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Location)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="slt" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Left = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Left)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sn" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = «:n»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sn&quot;" CaseSensitiveName="false">
      <Comment>Need to clear the InString context</Comment>
      <Expansion Priority="0">
        <Body>«Paste» != "«Cursor»«Marker(30)»"</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InMethod</Selected>
          <Selected>Editor\Code\InPropertyAccessor</Selected>
          <Selected>Editor\Code\InString</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="sn0" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«Paste» != 0</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="snn" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«Paste» != «:n»</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="spa" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Parent = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Parent)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="spat" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Parent = this;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Parent)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sse" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«Paste» = String::Empty;</Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="ssr" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Sorted = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Sorted)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ssrf" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Sorted = false;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Sorted)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ssrt" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Sorted = true;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Sorted)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ssz" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Size = new Size(0«Cursor», 0);</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Size)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="st" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = true;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sth" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = this;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="stp" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Top = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Top)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="stx" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Text = "«Cursor»";</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Text)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sv" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Visible = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Visible)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="sva" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste» = value;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifier</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
        <UsingClause />
      </Expansion>
    </Template>
    <Template Name="svf" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Visible = false;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Visible)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="svt" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Visible = true;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Visible)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="swd" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true" UseDoubleEqualsInsideParens="true">
        <Body>«Paste»-&gt;Width = «Cursor»;</Body>
        <Context>
          <Selected>Editor\Clipboard\HasIdentifierWithProperty(Width)</Selected>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="System">
    <TemplateCategory Name="Declaration Bodies" OptExpanded="true">
      <Template Name="#AccessOperator#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body />
          <Context />
        </Expansion>
        <Expansion Priority="1">
          <Body />
          <Context />
        </Expansion>
      </Template>
      <Template Name="#AfterGNewType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#BeforeGcnew#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#AfterNewType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#BeforeNew#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#BeforeGcnew#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>*</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>^</Body>
          <Context>
            <Excluded>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Excluded>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#BeforeNew#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body />
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>*</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#CarriageReturn#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>
</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#EndProperty#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>
«Target»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#FieldBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#StaticIfNeeded#»«:#GetNotLinkingType#» «?PrefixField»«Caret»«Field(«?RootFormatFieldName(FieldName)»,Variable name)»«BlockAnchor»«?SuffixField»;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#FieldBodySelectType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#SelectedTypeName#» «Field(«?FormatFieldName(FieldName)»)»;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#FieldQualifier#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body />
          <Context />
        </Expansion>
        <Expansion Priority="1">
          <Body>«Class»-&gt;</Body>
          <Context>
            <Selected>Editor\Templates\First Character is Uppercase</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>this-&gt;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GetFullNullableType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>array&lt;Nullable&lt;«?Get(Type)»&gt;&gt;^</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>Nullable&lt;«?Get(Type)»&gt;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>«?Get(Type)»«?Get(AfterType)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GetFullType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«TypeLink("«?Get(Type)»«?Get(AfterType)»")»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GetFullTypeVS2005#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«TypeLink("«:#GetFullTypeVS2005Body#»")»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GetFullTypeVS2005Body#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#GetFullNullableType#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsNullableType,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>array&lt;«?Get(Type)»«?Get(AfterType)»&gt;^</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>«?Get(Type)»«?Get(AfterType)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GetNotLinkingType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(Type)»«?Get(AfterType)»</Body>
          <Context>
            <Selected>Project\IsManaged</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?Get(NativeType)»«?Get(AfterType)»</Body>
          <Context>
            <Selected>Project\IsNative</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#GetterNotImplemented#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«Marker»throw «:#RefNew#» NotImplementedException("«Link(PropertyName)» getter.");</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GetTypeLinkingType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«TypeLink(«?Get(Type)»)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GetTypeName#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(Type)»</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?Get(Type)»«?Get(AfterType)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#InterfaceGetter#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>{«:#GetFullType#» get();}</Body>
          <Context>
            <Selected>System\VSVersion\VS2005</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#InterfaceMethodBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>;«FinalTarget»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#InterfacePropertyAccessors#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>
{
	«:#GetFullType#» get(); 
	void set(«:#GetFullType#» value);
}</Body>
          <Context>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#InterfacePropertyBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>__property «:#GetFullType#» get_«Caret»«Field(PropertyName)»«BlockAnchor»();
__property void set_«Caret»«Field(PropertyName)»«BlockAnchor»(«:#GetFullType#» value);</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>property «:#GetFullType#» «Caret»«Field(PropertyName)»«BlockAnchor» «:#InterfacePropertyAccessors#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#InterfaceReadOnlyPropertyBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>__property «:#GetFullType#» get_«Caret»«Field(PropertyName)»«BlockAnchor» ();</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>property «:#GetFullType#» «Caret»«Field(PropertyName)»«BlockAnchor» «:#InterfaceGetter#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#InterfaceSetter#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>{void set(«:#GetFullType#» value);}</Body>
          <Context>
            <Selected>System\VSVersion\VS2005</Selected>
            <Selected>System\VSVersion\VS2008</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#InterfaceWriteOnlyPropertyBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>__property void set_«Caret»«Field(PropertyName)»«BlockAnchor» («:#GetFullType#» value);</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>property «:#GetFullType#» «Caret»«Field(PropertyName)»«BlockAnchor» «:#InterfaceSetter#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#LocalFieldBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#GetNotLinkingType#» «?PrefixLocal»«Caret»«Field(«?RootFormatLocalName(VarName)»)»«BlockAnchor»«?SuffixLocal»;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#LocalFieldBodySelectType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#SelectedTypeName#» «Field(«?FormatLocalName(VarName)»)»;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ManagedClass#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>__gc class</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>ref class</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#MethodBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body> = 0;«FinalTarget»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body> abstract;«FinalTarget»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>
{
	«FinalTarget»
}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#MethodParameters#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>(«Field(,Enter any parameters)»)</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#MethodSignature#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#StaticIfNeeded#»«:#MethodVirtual#»«:#GetNotLinkingType#»* «Caret»«Field(MethodName)»«BlockAnchor»«:#MethodParameters#»</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#StaticIfNeeded#»«:#MethodVirtual#»«:#GetNotLinkingType#» «Caret»«Field(MethodName)»«BlockAnchor»«:#MethodParameters#»[]</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>«:#StaticIfNeeded#»«:#MethodVirtual#»«:#GetNotLinkingType#» «Caret»«Field(MethodName)»«BlockAnchor»«:#MethodParameters#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="3">
          <Body>«:#StaticIfNeeded#»«:#MethodVirtual#»«:#GetNotLinkingType#» «Caret»«Field(MethodName)»«BlockAnchor»«:#MethodParameters#»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="4">
          <Body>«:#StaticIfNeeded#»«:#MethodVirtual#»«:#GetFullTypeVS2005Body#» «Caret»«Field(MethodName)»«BlockAnchor»«:#MethodParameters#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#MethodSignatureSelectType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#StaticIfNeeded#»«:#MethodVirtual#»«:#SelectedTypeName#» «Field(MethodName)»«:#MethodParameters#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#MethodVirtual#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>virtual </Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#NullSign#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>0</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>nullptr</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ParamBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#ParamSeparatorLeft#»«:#GetNotLinkingType#» «?PrefixParam»«Caret»«Field(«?RootFormatParamName(ParamName)»)»«BlockAnchor»«?SuffixParam»«Target»«:#ParamSeparatorRight#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ParamBodySelectType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#ParamSeparatorLeft#»«:#SelectedTypeName#» «Field(«?FormatParamName(ParamName)»)»«Target»«:#ParamSeparatorRight#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ParamSeparatorLeft#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body />
          <Context>
            <Selected>Editor\Line\Left Text Matches RegEx(.*(\(| )(ref|out) *$)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«TrimLeft», </Body>
          <Context>
            <Selected>Editor\Line\Left Text Matches RegEx(.*(%Identifier%) *$)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body />
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ParamSeparatorRight#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>,</Body>
          <Context>
            <Selected>Editor\Line\Right Text Matches RegEx(^ *(%Identifier%).*$)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body />
          <Context />
        </Expansion>
      </Template>
      <Template Name="#Pointer#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>*</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>^</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#ReadOnlyPropertyBody#»
«:#WriteOnlyPropertyBody#»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>property «:#StaticIfNeeded#»«:#GetFullTypeVS2005#» «BlockAnchor»«:#PropertyName#»«Caret»
{
«:#PropertyGetter#»
«:#PropertySetter#»
}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyGetter#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>	«:#Virtual#»«:#GetFullTypeVS2005#» get()«:#ReadOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>	«:#Virtual#»«:#GetFullTypeVS2005#» get()«:#ReadOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>	«:#GetFullTypeVS2005#» get()«:#ReadOnlyPropertyBodyWithoutSignature#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyName#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«FieldStart(Property name)»«Link(PropertyName)»«FieldEnd»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyNameSelected#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«Caret»«:#PropertyName#»«BlockAnchor»</Body>
          <Context>
            <Selected>System\VariableMatches(IsWritePropertySelectedName,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«Caret»«Link(PropertyName)»«BlockAnchor»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyNameSelectedAlways#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«Caret»«:#PropertyName#»«BlockAnchor»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyReadOnly#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#ReadOnlyPropertyBody#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#ReadOnlyPropertyBody#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsNoField,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>«:#PropertyVarDeclaration#»
«:#ReadOnlyPropertyBody#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyReadWrite#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#PropertyBody#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#PropertyBody#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsNoField,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>«:#PropertyVarDeclaration#»
«:#PropertyBody#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertySetter#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>	«:#Virtual#»void set(«:#GetFullTypeVS2005#» «Link(value)»)«:#WriteOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>	«:#Virtual#»void set(«:#GetFullTypeVS2005#» «Link(value)»)«:#WriteOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>	void set(«:#GetFullTypeVS2005#» «Link(value)»)«:#WriteOnlyPropertyBodyWithoutSignature#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyTypeField#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«FieldStart»«:#GetFullType#»«FieldEnd»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyVar#" CaseSensitiveName="false">
        <Comment>Field variable reference for a property</Comment>
        <Expansion Priority="1">
          <Body>«Link(PropertyName,FormatFieldName,PropertyNameFromField)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyVarArrayDeclarationBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#GetFullType#»* «:#PropertyVar#»;</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#GetFullType#» «:#PropertyVar#»[];</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>array&lt;«:#GetFullType#»&gt;^ «:#PropertyVar#»;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyVarDeclaration#" CaseSensitiveName="false">
        <Comment>Declares the field and the start of a property declaration (this template is called from other system templates)</Comment>
        <Expansion Priority="0">
          <Body>«:#StaticIfNeeded#»«:#GetFullTypeVS2005#» «:#PropertyVar#»;</Body>
          <Context />
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#StaticIfNeeded#»«:#PropertyVarArrayDeclarationBody#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>«:#StaticIfNeeded#»«:#GetFullType#» «:#PropertyVar#»;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyWriteOnly#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#WriteOnlyPropertyBody#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#WriteOnlyPropertyBody#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsNoField,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>«:#PropertyVarDeclaration#»
«:#WriteOnlyPropertyBody#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ReadOnlyPropertyBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#ReadOnlyPropertyBodyRouter#»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>property «:#StaticIfNeeded#»«:#GetFullTypeVS2005#» «BlockAnchor»«:#PropertyName#»«Caret»
{
«:#PropertyGetter#»
}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ReadOnlyPropertyBodyRouter#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>__property«:#Virtual#» «:#StaticIfNeeded#»«:#GetFullType#»* get_«:#PropertyNameSelectedAlways#»()«:#ReadOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>__property«:#Virtual#» «:#StaticIfNeeded#»«:#GetFullType#» get_«:#PropertyNameSelectedAlways#»()[]«:#ReadOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>__property virtual «:#GetFullType#» get_«:#PropertyNameSelectedAlways#»()«:#ReadOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="3">
          <Body>__property «:#StaticIfNeeded#»«:#GetFullType#» get_«:#PropertyNameSelectedAlways#»()«:#ReadOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#ReadOnlyPropertyBodyWithoutSignature#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body> = 0;</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body> abstract;</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>
	{
		«:#GetterNotImplemented#»«:#ReadPropertyReturn#»
	}</Body>
          <Context>
            <Selected>System\VariableMatches(IsNoField,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="3">
          <Body>
	{
		return «:#FieldQualifier#»«:#PropertyVar#»;
	}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ReadPropertyReturn#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>
		return «Marker»;</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#RefNew#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>new</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>gcnew</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#SelectedTypeName#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«Caret»«FieldStart(Type name)»«TypeLink(«?Get(Type)»)»«?Get(AfterType)»«FieldEnd»«BlockAnchor»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#SerGenericTypeArgs#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(GenericType)»«?Get(TypeStart)»«TypeLink(args)»«?Get(TypeEnd)»«?Get(AfterType)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#SetSuffix#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(AfterType,«?GetTypeSuffix(«?Get(Type.FullName)»)»)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#SetterNotImplemented#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«Marker»throw «:#RefNew#» NotImplementedException("«Link(PropertyName)» setter.");</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#Virtual#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body> virtual</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>virtual </Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#WriteOnlyPropertyBody#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#WriteOnlyPropertyBodyRouter#»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>property «:#StaticIfNeeded#»«:#GetFullTypeVS2005#» «BlockAnchor»«:#PropertyName#»«Caret»
{
«:#PropertySetter#»
}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#WriteOnlyPropertyBodyRouter#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>__property«:#Virtual#» «:#StaticIfNeeded#»void set_«:#PropertyNameSelected#»(«:#GetFullType#»* «Link(value)»)«:#WriteOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsBuiltInType(«?Get(Type.FullName)»)</Selected>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>__property«:#Virtual#» «:#StaticIfNeeded#»void set_«:#PropertyNameSelected#»(«:#GetFullType#» «Link(value)»[])«:#WriteOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>__property virtual «:#StaticIfNeeded#»void set_«:#PropertyNameSelected#»(«:#GetFullType#» «Link(value)»)«:#WriteOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="3">
          <Body>__property «:#StaticIfNeeded#»void set_«:#PropertyNameSelected#»(«:#GetFullType#» «Link(value)»)«:#WriteOnlyPropertyBodyWithoutSignature#»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#WriteOnlyPropertyBodyWithoutSignature#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body> = 0;</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body> abstract;</Body>
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>
	{
		«:#SetterNotImplemented#»
	}</Body>
          <Context>
            <Selected>System\VariableMatches(IsNoField,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="3">
          <Body>
	{
		«:#FieldQualifier#»«:#PropertyVar#»«Marker» = «Link(value)»;
	}</Body>
          <Context />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Generics" OptExpanded="true">
      <Template Name="#AssembleGenericType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(TypeStart,&lt;)»«?Set(TypeEnd,&gt;)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GenericNoArgsMethodSignature#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#GenericTypeSelectedNoArgs#» «Field(MethodName)»«:#MethodParameters#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GenericNoArgsPropertySignature#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#GenericTypeSelectedNoArgs#» «FieldStart(Enter the property name)»«Link(PropertyName)»«FieldEnd»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GenericType#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(GenericType)»&lt;«?Get(GenericParameters)»&gt;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GenericTypeNoArgs#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(GenericType)»«?Get(TypeStart)»«TypeLink(args)»«?Get(TypeEnd)»^</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GenericTypeNoArgsTail#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(GenericType)»«?Get(TypeStart)»«TypeLink(args)»«?Get(TypeEnd)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GenericTypeNoArgsWithTextField#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(GenericType)»«?Get(TypeStart)»«FieldStart(Arguments for the generic type)»«TypeLink(args)»«FieldEnd»«?Get(TypeEnd)»^</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#GenericTypeSelectedNoArgs#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Get(GenericType)»«?Get(TypeStart)»«Caret»«FieldStart(Generic type arguments)»«TypeLink(args)»«FieldEnd»«BlockAnchor»«?Get(TypeEnd)»^</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#OneGenericArgPrep#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(GenericParameters,«?Get(Type)»«?GetTypeSuffix(«?Get(Type.FullName)»)»)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#SetGeneric1Type#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(GenericType,«?Get(Generic1Type)»)»«?Set(GenericType.FullName,«?Get(Generic1Type.FullName)»)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#SetGeneric2Type#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(GenericType,«?Get(Generic2Type)»)»«?Set(GenericType.FullName,«?Get(Generic2Type.FullName)»)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#TwoGenericArgsPrep#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(GenericParameters,«?Get(Type1)»«?GetTypeSuffix(«?Get(Type1.FullName)»)», «?Get(Type2)»«?GetTypeSuffix(«?Get(Type2.FullName)»)»)»</Body>
          <Context />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Misc" OptExpanded="true">
      <Template Name="#CaretPlaceholder#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«Caret»</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«Caret»«?Get(placeholderText)»«BlockAnchor»</Body>
          <Context>
            <Excluded>System\VSVersion\VS2002</Excluded>
            <Excluded>System\VSVersion\VS2003</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#EnumPlaceholder#" CaseSensitiveName="false">
        <Expansion Priority="1">
          <Body>«?Set(placeholderText,Name)»«:#CaretPlaceholder#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#ExpressionPlaceholder#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(placeholderText,Expression)»«:#CaretPlaceholder#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#NoExpansion#" CaseSensitiveName="false">
        <Comment>Simply expands the template name.</Comment>
        <Expansion Priority="0">
          <Body>«SuppressActionHint»«?Get(TemplateName)» </Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#NullableTypePrep#" CaseSensitiveName="false">
        <Comment>Adds the nullable modifier to a type declaration is IsNullable == true (otherwise no change)</Comment>
        <Expansion Priority="0">
          <Body>«?Set(Type,Nullable&lt;«?Get(Type)»^&gt;)»</Body>
          <Context>
            <Selected>Editor\Code\Analysis\IsValueType(«?Get(Type.FullName)»)</Selected>
            <Selected>System\VariableMatches(IsNullable,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body />
          <Context />
        </Expansion>
      </Template>
      <Template Name="#SetBaseNames#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(InstanceBaseName,«?Get(Type)»)»«?Set(ArrayType,«?Get(Type)»)»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#StringQuotes" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>"«Caret»"</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#TypePrep#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#SetBaseNames#»«:#TypeArrayPrep#»</Body>
          <Context>
            <Selected>System\VariableMatches(IsArray,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#SetBaseNames#»«:#NullableTypePrep#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#UpperBoundPlaceholder#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(placeholderText,UpperBound)»«:#CaretPlaceholder#»</Body>
          <Context />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Test" Enabled="false" OptExpanded="true">
      <Comments>This category contains test templates that may be useful to customers. Otherwise, this category should be disabled.</Comments>
      <Template Name="#InnerTest#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// Outside is one.</Body>
          <Context>
            <Selected>System\VariableMatches(Outside,1)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>// Outside is two.</Body>
          <Context>
            <Selected>System\VariableMatches(Outside,2)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>// Outside is three.</Body>
          <Context>
            <Selected>System\VariableMatches(Outside,3)</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="SetTest1" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#InnerTest#(Outside=1)»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="SetTest2" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#InnerTest#(Outside=2)»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="SetTest3" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#InnerTest#(Outside=3)»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="SPTest" CaseSensitiveName="false">
        <Comment>Tests StringProvider output</Comment>
        <Expansion Priority="0">
          <Body>/* This template tests StringProviders....
Time:
Date: «?Date»
DateLong: «?DateLong»
Year: «?Year»
Month: «?Month»
Day: «?Day»
DayOfWeek: «?DayOfWeek»
Hour: «?Hour»
Minute(0): «?Minute(0)»
Second(0): «?Second(0)»
Minute: «?Minute»
Second: «?Second»
Time: «?Time»
TimeLong: «?TimeLong»

File:
FileBase: «?FileBase»
FileName: «?FileName»
FilePath: «?FilePath»
FileDrive: «?FileDrive»
ProjectName: «?ProjectName»
ProjectFileName: «?ProjectFileName»
SolutionFileName: «?SolutionFileName»

String Manipulation:
InitialCap(testString) = «?InitialCap(testString)»
InitialLow(TestString) = «?InitialLow(TestString)»

System Information:
UserName: «?UserName»
*/</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="test?Type1?,?Type2?" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>// «?Get(Type1)» == «?Get(Type1.FullName)»,
// «?Get(Type2)» == «?Get(Type2.FullName)»</Body>
          <Context />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Visibility" OptExpanded="true">
      <Comments>Templates in this category provide default access modifiers (e.g., "private", "public", etc.) for properties, methods, and fields.</Comments>
      <Template Name="#ConstDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="1">
          <Body>«:#StaticIfNeeded#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#DelegateDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?ScopeNestedType»</Body>
          <Context>
            <Selected>Editor\Code\InCase</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?ScopeProperty»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#EventDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?ScopeEvent»:</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#FieldDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?ScopeField»:</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#InterfaceDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?ScopeNestedType»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?ScopeType»</Body>
          <Context>
            <Excluded>Editor\Code\InClass</Excluded>
            <Excluded>Editor\Code\InManagedClass</Excluded>
            <Excluded>Editor\Code\InValueClass</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#MethodDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="1">
          <Body>«?ScopeMethod»: «:#StaticIfNeeded#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#PropertyDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?ScopeProperty»:</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#Static#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#StaticIfNeeded#»</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="#StaticIfNeeded#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body />
          <Context>
            <Selected>System\VariableMatches(IsAbstract,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body />
          <Context>
            <Excluded>Editor\Code\InClass</Excluded>
            <Excluded>Editor\Code\InManagedClass</Excluded>
            <Excluded>Editor\Code\InManagedStruct</Excluded>
            <Excluded>Editor\Code\InNativeClass</Excluded>
            <Excluded>Editor\Code\InNativeStruct</Excluded>
            <Excluded>Editor\Code\InValueClass</Excluded>
            <Excluded>Editor\Code\InValueStruct</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="2">
          <Body>static </Body>
          <Context>
            <Selected>Editor\Code\InStaticType</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="3">
          <Body>static </Body>
          <Context>
            <Selected>Editor\Templates\First Character is Uppercase</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="4">
          <Body>static </Body>
          <Context>
            <Selected>System\VariableMatches(IsStatic,true)</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="5">
          <Body />
          <Context />
        </Expansion>
      </Template>
      <Template Name="#StructDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?ScopeNestedType»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?ScopeType»</Body>
          <Context>
            <Excluded>Editor\Code\InClass</Excluded>
            <Excluded>Editor\Code\InManagedClass</Excluded>
            <Excluded>Editor\Code\InValueClass</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="#TypeDefaultScope#" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?ScopeNestedType»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Code\InManagedClass</Selected>
            <Selected>Editor\Code\InValueClass</Selected>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?ScopeType»</Body>
          <Context>
            <Excluded>Editor\Code\InClass</Excluded>
            <Excluded>Editor\Code\InManagedClass</Excluded>
            <Excluded>Editor\Code\InValueClass</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Testing">
    <TemplateCategory Name="MbUnit">
      <TemplateCategory Name="Asserts">
        <TemplateCategory Name="System" OptExpanded="true">
          <Template Name="#MbUnitAssertOneCollectionParameter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The sequence of values to be tested)»«BlockAnchor»);«FinalTarget»</Body>
              <Context>
                <Selected>Editor\Clipboard\Implements(System.Collections.Generic.IEnumerable`1)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(values,The sequence of values to be tested)»«BlockAnchor»);«FinalTarget»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#MbUnitAssertOneParameter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The actual value)»«BlockAnchor»);«FinalTarget»</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(value,The actual value)»«BlockAnchor»);«FinalTarget»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#MbUnitAssertTwoCollectionParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The expected sequence)»«BlockAnchor», «Field(actualSequence,The actual sequence)»);</Body>
              <Context>
                <Selected>Editor\Clipboard\Implements(System.Collections.Generic.IEnumerable`1)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(expectedSequence,The expected sequence)»«BlockAnchor», «Field(actualSequence,The actual sequence)»);</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#MbUnitAssertTwoParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The expected value)»«BlockAnchor», «Field(actualValue,The actual value)»);</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(expectedValue,The expected value)»«BlockAnchor», «Field(actualValue,The actual value)»);</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#MbUnitBetweenThreeParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The actual value)»«BlockAnchor», «Field(minimum, Inclusive minimum value)», «Field(maximum,Inclusive maximum value)»)</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(actualValue,The actual value)»«BlockAnchor», «Field(minimum, Inclusive minimum value)», «Field(maximum,Inclusive maximum value)»)</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#MbUnitContainsKeyParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The dictionary of items)»«BlockAnchor», «Field(expectedKey, The key expected to be found in the dictionary)»);«FinalTarget»</Body>
              <Context>
                <Selected>Editor\Clipboard\Implements(System.Collections.Generic.IDictionary`2)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(dictionary,The dictionary of items)»«BlockAnchor», «Field(«?Paste», The key expected to be found in the dictionary)»);«FinalTarget»</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2">
              <Body>(«Caret»«Field(dictionary,The dictionary of items)»«BlockAnchor», «Field(expectedKey, The key expected to be found in the dictionary)»);«FinalTarget»</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#MbUnitContainsParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The enumeration of items)»«BlockAnchor», «Field(expected, The expected value expected to be found in the collection)»);</Body>
              <Context>
                <Selected>Editor\Clipboard\Implements(System.Collections.Generic.IEnumerable`1)</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Field(enumeration, The enumeration of items)», «Caret»«Field(«?Paste», The expected value expected to be found in the collection)»«BlockAnchor»)</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="2">
              <Body>(«Field(enumeration, The enumeration of items)», «Caret»«Field(expected, The expected value expected to be found in the collection)»«BlockAnchor»)</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#MbUnitExistsParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,The sequence of values to evaluate)»«BlockAnchor», «Field(predicate,The condition that must be fulfilled (returns true) by at least one element of the sequence)»);</Body>
              <Context>
                <Selected>Editor\Clipboard\Implements(System.Collections.Generic.IEnumerable`1)</Selected>
                <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Field(values,The sequence of values to evaluate)», «Caret»«Field(«?Paste»,The condition that must be fulfilled (returns true) by at least one element of the sequence)»«BlockAnchor»);</Body>
              <Context>
                <Selected>Editor\Clipboard\Implements(System.Collections.Generic.Predicate`1)</Selected>
                <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              </Context>
            </Expansion>
            <Expansion Priority="2">
              <Body>(«Field(values,The sequence of values to evaluate)», «Caret»«Field(predicate,The condition that must be fulfilled (returns true) by at least one element of the sequence)»«BlockAnchor»);</Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="aae" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreApproximatelyEqual(«Caret»«Field(expectedValue,The expected value)»«BlockAnchor», «Field(actualValue, The actual value)», «Field(delta,The inclusive delta between the values)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ab" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Between«:#MbUnitBetweenThreeParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="abd" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::BinaryDeserialize&lt;«Caret»«Field(T)»«BlockAnchor»&gt;(«Field(stream)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="abs" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::BinarySerialize«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="abstd" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::BinarySerializeThenDeserialize&lt;«Caret»«Field(T)»«BlockAnchor»&gt;(«Field(value)»);«FinalTarget»
</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ac" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Contains«:#MbUnitContainsParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ack" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::ContainsKey«:#MbUnitContainsKeyParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ad" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Distinct«:#MbUnitAssertOneCollectionParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="adnc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::DoesNotContain«:#MbUnitContainsParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="adnck" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::DoesNotContainKey«:#MbUnitContainsKeyParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="adnt" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::DoesNotThrow«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ae" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreEqual«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aee" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreElementsEqual«:#MbUnitAssertTwoCollectionParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aeeio" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreElementsEqualIgnoringOrder«:#MbUnitAssertTwoCollectionParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aene" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreElementsNotEqual«:#MbUnitAssertTwoCollectionParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aew" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::EndsWith«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aex" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Exists«:#MbUnitExistsParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="afa" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::ForAll«:#MbUnitExistsParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="afl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Fail();«Caret»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="afm" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::FullMatch«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="agt" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::GreaterThan«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="agtoet" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::GtreaterThanOrEqualTo«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aiaf" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsAssignableFrom«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aie" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsEmpty«:#MbUnitAssertOneCollectionParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aif" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsFalse«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aiiot" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsInstanceOfType«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ain" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsNull«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aine" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsNotEmpty«:#MbUnitAssertOneCollectionParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ainiot" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsNotInstanceOfType«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ainn" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsNotNull«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aisnaf" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsNotAssignableFrom«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="alt" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::LessThan«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="altoet" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::GtreaterThanOrEqualTo«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anae" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreNotApproximatelyEqual(«Caret»«Field(expectedValue,The expected value)»«BlockAnchor», «Field(actualValue, The actual value)», «Field(delta,The inclusive delta between the values)»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anb" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::NotBetween«:#MbUnitBetweenThreeParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:adnc»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anck" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:adnck»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ane" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreNotEqual«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ans" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreNotSame«:#MbUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="as" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreSame«:mbans»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="axd" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::XmlDeserialize&lt;«Caret»«Field(T)»«BlockAnchor»&gt;(«Field(stream)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="axs" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::BinarySerialize«:#MbUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="axstd" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::BinarySerializeThenDeserialize&lt;«Caret»«Field(T)»«BlockAnchor»&gt;(«Field(value)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Attributes">
        <Template Name="[a" CaseSensitiveName="false">
          <Comment>Associates an annotation message of the specified type with the code element. </Comment>
          <Expansion Priority="0">
            <Body>[Annotation(«Caret»«Field(type,The annotation type)»«BlockAnchor»,«Field(message,The annotation message)»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[af" CaseSensitiveName="false">
          <Comment>Declares that a class contains assembly-level setup and teardown methods. </Comment>
          <Expansion Priority="0">
            <Body>[AssemblyFixture]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[ar" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[AssemblyResolver«Caret»«Field(assemblyResolverType,The assembly resolver type)»«BlockAnchor»]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[as" CaseSensitiveName="false">
          <Comment>Sets the apartment state to be used to run the decorated test and its children unless subsequently overridden. </Comment>
          <Expansion Priority="0">
            <Body>[ApartmentState(«Caret»«Field(apartmentState,The apartment state to use)»«BlockAnchor»]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[au" CaseSensitiveName="false">
          <Comment>Associates the author's name and email address with a test fixture, test method, test parameter or other test component. </Comment>
          <Expansion Priority="0">
            <Body>[Author(«Caret»«Field(name,The author's name)»«BlockAnchor», «Field(email,The author's email address)», «Field(homepage,The author's home page)»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[b" CaseSensitiveName="false">
          <Comment>The bind attribute overrides the default binding rules for a test parameter by specifying a different data source, a binding path or an index. </Comment>
          <Expansion Priority="0">
            <Body>[Bind(«Caret»«Field(path,The binding path)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[c" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Category(«Caret»«Field(category,The name of the category to associate)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[cj" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[CombinatorialJoin]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[co" CaseSensitiveName="false">
          <Comment>Provides a column of literal values as a data source. </Comment>
          <Expansion Priority="0">
            <Body>[Column(«Caret»«Field(values,The array of values in the column)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[con" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Content]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[csv" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[CsvData]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[da" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Data]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[de" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Description(«Caret»«Field(description,The description to associate)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[do" CaseSensitiveName="false">
          <Comment>Creates a dependency from this test assembly, test fixture or test method on some other test fixture or test method. </Comment>
          <Expansion Priority="0">
            <Body>[DependsOn(«Caret»«Field(testFixtureType,The dependent test fixture type)»«BlockAnchor», «Field(testMethodName,The dependent test method name)»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[dop" CaseSensitiveName="false">
          <Comment>Specifies the maximum number of concurrent threads to use when tests are run in parallel for all tests in the test assembly. </Comment>
          <Expansion Priority="0">
            <Body>[DegreeOfParallelism(«Caret»«Field(degreeOfParallelism,The degree of parallelism)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[dtct" CaseSensitiveName="false">
          <Comment>Sets the default timeout in seconds, or zero if none. </Comment>
          <Expansion Priority="0">
            <Body>[DefaultTestCaseTimeout(«Caret»«Field(timeoutSeconds,The timeout in seconds, or zero if none.)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[dtf" CaseSensitiveName="false">
          <Comment>Specifies a method that is used to generate tests dynamically at runtime</Comment>
          <Expansion Priority="0">
            <Body>[DynamicTestFactory]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[e" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Explicit(«Caret»«Field(reason,The reason for which the test should be run explicitly)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[eane" CaseSensitiveName="false">
          <Comment>Declares that the associated test is expected to throw an ArgumentNullException.</Comment>
          <Expansion Priority="0">
            <Body>[ExpectedArgumentNullExeption(«Caret»«Field(message,The expected exception message)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[eaoore" CaseSensitiveName="false">
          <Comment>Declares that the associated test is expected to throw an ArgumentOutOfRangeException. </Comment>
          <Expansion Priority="0">
            <Body>[ExpectedArgumentOutOfRangeException(«Caret»«Field(message,The expected exception message)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[ed" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[EnumData(«Caret»«Field(type,The type of the enumeration)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[ee" CaseSensitiveName="false">
          <Comment>Declares that the associated test is expected to throw an exception of a particular type.</Comment>
          <Expansion Priority="0">
            <Body>[ExpectedException(«Caret»«Field(message,The expected exception message)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[f" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Factory(«Caret»«Field(type,The declaring type of the fact)»«BlockAnchor», «Field(memberName,The factory member name)»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[fi" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[FixtureInitializer]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[fsu" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[FixtureSetUp]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[ftd" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[FixtureTearDown]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[h" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Header(«Caret»«Field(firstColumnName,The name of the first column)»«BlockAnchor», «FinalTarget»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[i" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Ignore(«Caret»«Field(reason,The reason for which the test is to be ignored)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[impe" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Impersonate]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[impo" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Importance(«Caret»«Field(importance,The importance to associate)»«BlockAnchor»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[j" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Join]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="[md" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[MetaData(«Caret»«Field(metadataKey,The metadata key)»«BlockAnchor», «Field(metadataValue,metadataValue)»)]</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Namespaces">
        <Template Name="umbc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>using namespace MbUnit.Core;</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umbf" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>using namespace MbUnit.Framework;</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umbfcv" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>using namespace MbUnit.Framework.ContractVerifiers;</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umbfx" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>using namespace MbUnit.Framework.Xml;</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umbuc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbc»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umbuf" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbf»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umbufcv" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbfcv»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umbufx" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbfx»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbc»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umf" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbf»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umfcv" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbfcv»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umfx" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbfx»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umuc" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbc»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umuf" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbf»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umufcv" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbfcv»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="umufx" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:umbfx»</Body>
            <Context>
              <Selected>Project\Testing\MbUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System">
        <Template Name="#MbUnitFixtureSetUpAttribute#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[TestFixtureSetUp]</Body>
            <Context>
              <Selected>Project\References(mbunit.framework)</Selected>
            </Context>
            <UsingClause>MbUnit.Framework</UsingClause>
          </Expansion>
          <Expansion Priority="1">
            <Body>[FixtureSetUp]</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#MbUnitFixtureTearDownAttribute#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[TestFixtureTearDown]</Body>
            <Context>
              <Selected>Project\References(mbunit.framework)</Selected>
            </Context>
            <UsingClause>MbUnit.Framework</UsingClause>
          </Expansion>
          <Expansion Priority="1">
            <Body>[FixtureTearDown]</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#MbUnitSetUpAttribute#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[SetUp]</Body>
            <Context />
            <UsingClause>MbUnit.Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#MbUnitTearDownAttribute#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[TearDown]</Body>
            <Context />
            <UsingClause>MbUnit.Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#MbUnitTestAttribute#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Test]</Body>
            <Context />
            <UsingClause>MbUnit.Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#MbUnitTestClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#MbUnitTestFixtureAttribute#»
public class «Caret»«Field(TestFixture)»«BlockAnchor»
{
	«:#MbUnitTestMethod#(SelectMethodName=false)»
}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#MbUnitTestFixtureAttribute#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[TestFixture]</Body>
            <Context />
            <UsingClause>MbUnit.Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#MbUnitTestMethod#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#MbUnitTestAttribute#»
public:
void «:#MbUnitTestMethodName»()
{
	«Marker»«FinalTarget»
}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#MbUnitTestMethodName" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»«Field(TestMethod)»«BlockAnchor»</Body>
            <Context>
              <Selected>System\VariableMatches(SelectMethodName,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Field(TestMethod)»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="fsu" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#MbUnitFixtureSetUpAttribute#»
void FixtureSetUp()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\MbUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ftd" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#MbUnitFixtureTearDownAttribute#»
void FixtureTearDown()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\MbUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#MbUnitTestClass#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\MbUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#MbUnitTestClass#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\MbUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#MbUnitTestMethod#(SelectMethodName=true)»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\MbUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tsu" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#MbUnitSetUpAttribute#»
void SetUp()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\MbUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="ttd" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#MbUnitTearDownAttribute#»
void TearDown()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\MbUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="NUnit">
      <Comments>Templates in this category create test fixtures and test methods for NUnit testing.</Comments>
      <TemplateCategory Name="Asserts">
        <Comments>Templates in this category create assert method calls for NUnit testing.</Comments>
        <Template Name="aas" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreSame(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::AreSame(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ae" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreEqual(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::AreEqual(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ae0" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreEqual(0, «Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::AreEqual(0, «Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ae1" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::AreEqual(1, «Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::AreEqual(1, «Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="af" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsFalse(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::IsFalse(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="afl" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Fail(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::Fail(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ai" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Ignore(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::Ignore(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="an" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsNull(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::IsNull(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ann" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsNotNull(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::IsNotNull(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="as" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:aas»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="at" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::IsTrue(«Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Clipboard\HasIdentifier</Excluded>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::IsTrue(«Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Attributes">
        <Comments>Templates in this category create attributes for NUnit testing.</Comments>
        <Template Name="[ia" CaseSensitiveName="false">
          <Expansion Priority="0" SuppressLastChar="true">
            <Body>[Ignore("«Caret»")]</Body>
            <Context>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>NUnit::Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[su" CaseSensitiveName="false">
          <Expansion Priority="0" SuppressLastChar="true">
            <Body>[SetUp]</Body>
            <Context>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>NUnit::Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[t" CaseSensitiveName="false">
          <Comment>NUnit Test Attribute</Comment>
          <Expansion Priority="0" SuppressLastChar="true">
            <Body>[Test]</Body>
            <Context>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>NUnit::Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[td" CaseSensitiveName="false">
          <Expansion Priority="0" SuppressLastChar="true">
            <Body>[TearDown]</Body>
            <Context>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>NUnit::Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[tf" CaseSensitiveName="false">
          <Expansion Priority="0" SuppressLastChar="true">
            <Body>[TestFixture]</Body>
            <Context>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>NUnit::Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[tfsu" CaseSensitiveName="false">
          <Expansion Priority="0" SuppressLastChar="true">
            <Body>[TestFixtureSetUp]</Body>
            <Context>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>NUnit::Framework</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[tftd" CaseSensitiveName="false">
          <Expansion Priority="0" SuppressLastChar="true">
            <Body>[TestFixtureTearDown]</Body>
            <Context>
              <Selected>Project\Testing\NUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>NUnit::Framework</UsingClause>
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="tf" CaseSensitiveName="false">
        <Comment>Test Fixture</Comment>
        <Expansion Priority="0">
          <Body>[TestFixture]
public «:#ManagedClass#» Tests
{
	public:
	[Test]
	void «Caret»Test«BlockAnchor»()
	{
		«Marker»
	}
};</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
          <UsingClause>NUnit::Framework</UsingClause>
        </Expansion>
      </Template>
      <Template Name="tfsu" CaseSensitiveName="false">
        <Comment>Setup Test Method</Comment>
        <Expansion Priority="0">
          <Body>[TestFixtureSetUp]
void TextFixtureSetup()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>NUnit::Framework</UsingClause>
        </Expansion>
      </Template>
      <Template Name="tftd" CaseSensitiveName="false">
        <Comment>Teardown Test Method</Comment>
        <Expansion Priority="0">
          <Body>[TestFixtureTearDown]
void TestFixtureTearDown()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>NUnit::Framework</UsingClause>
        </Expansion>
      </Template>
      <Template Name="tm" CaseSensitiveName="false">
        <Comment>Test Method</Comment>
        <Expansion Priority="0">
          <Body>[Test]
void «Caret»Test«BlockAnchor»()
{
	«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>NUnit::Framework</UsingClause>
        </Expansion>
      </Template>
      <Template Name="tsu" CaseSensitiveName="false">
        <Comment>Setup Test Method</Comment>
        <Expansion Priority="0">
          <Body>[SetUp]
void Setup()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>NUnit::Framework</UsingClause>
        </Expansion>
      </Template>
      <Template Name="ttd" CaseSensitiveName="false">
        <Comment>Teardown Test Method</Comment>
        <Expansion Priority="0">
          <Body>[TearDown]
void TearDown()
{
	«Caret»«Marker»
}</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
          <UsingClause>NUnit::Framework</UsingClause>
        </Expansion>
      </Template>
      <Template Name="unf" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>using namespace NUnit::Framework;</Body>
          <Context>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unuf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:unf»</Body>
          <Context>
            <Selected>Project\Testing\NUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="xUnit">
      <TemplateCategory Name="Asserts">
        <TemplateCategory Name="System">
          <Template Name="#xUnitAssertOneParameter#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»)»«BlockAnchor»);</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(value)»«BlockAnchor»);</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#xUnitAssertThreeParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,Expected value)»«BlockAnchor», «Field(actual,Actual value)», «Field(comparer, Comparer)»);</Body>
              <Context>
                <Selected>Editor\Clipboard\HasInteger</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(expected,Expected value)»«BlockAnchor», «Field(actual,Actual value)», «Field(comparer, Comparer)»);</Body>
              <Context />
            </Expansion>
          </Template>
          <Template Name="#xUnitAssertTwoParameters#" CaseSensitiveName="false">
            <Expansion Priority="0">
              <Body>(«Caret»«Field(«?Paste»,Expected value)»«BlockAnchor», «Field(actual,Actual value)»);</Body>
              <Context>
                <Selected>Editor\Clipboard\HasIdentifier</Selected>
              </Context>
            </Expansion>
            <Expansion Priority="1">
              <Body>(«Caret»«Field(expected,Expected value)»«BlockAnchor», «Field(actual,Actual value)»);</Body>
              <Context />
            </Expansion>
          </Template>
        </TemplateCategory>
        <Template Name="ac" CaseSensitiveName="false">
          <Comment>Verifies that a collection contains a given object.</Comment>
          <Expansion Priority="0">
            <Body>Assert::Contains«:#xUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="acc" CaseSensitiveName="false">
          <Comment>Verifies that a collection contains a given object, using a comparer. </Comment>
          <Expansion Priority="0">
            <Body>Assert::Contains«:#xUnitAssertThreeParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="adnc" CaseSensitiveName="false">
          <Comment>Verifies that a collection does not contain a given object. </Comment>
          <Expansion Priority="0">
            <Body>Assert::DoesNotContain«:#xUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="adncc" CaseSensitiveName="false">
          <Comment>Verifies that a collection does not contain a given object, using a comparer. </Comment>
          <Expansion Priority="0">
            <Body>Assert::DoesNotContain«:#xUnitAssertThreeParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="adntr" CaseSensitiveName="false">
          <Comment>Verifies that a block of code does not throw any exceptions. </Comment>
          <Expansion Priority="0">
            <Body>Assert::DoesNotThrow«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ae" CaseSensitiveName="false">
          <Comment>Verifies that two objects are equal, using a default comparer. </Comment>
          <Expansion Priority="1">
            <Body>Assert::Equal«:#AssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ae0" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Equal(0, «Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::Equal(0, «Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ae1" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Equal(1, «Caret»«?Paste»«BlockAnchor»);</Body>
            <Context>
              <Selected>Editor\Clipboard\HasIdentifier</Selected>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>Assert::Equal(1, «Caret»);</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aec" CaseSensitiveName="false">
          <Comment>Verifies that two objects are equal, using a custom comparer.</Comment>
          <Expansion Priority="0">
            <Body>Assert::Equal«:#xUnitAssertThreeParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aem" CaseSensitiveName="false">
          <Comment>Verifies that a collection is empty. </Comment>
          <Expansion Priority="0">
            <Body>Assert::Empty«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="af" CaseSensitiveName="false">
          <Comment>Verifies that the condition is false. </Comment>
          <Expansion Priority="0">
            <Body>Assert::False«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aiaf" CaseSensitiveName="false">
          <Comment>Verifies that an object is of the given type or a derived type. </Comment>
          <Expansion Priority="0">
            <Body>Assert::IsAssignableFrom«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="aint" CaseSensitiveName="false">
          <Comment>Verifies that an object is not exactly the given type. </Comment>
          <Expansion Priority="0">
            <Body>Assert::IsNotType«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="air" CaseSensitiveName="false">
          <Comment>Verifies that a value is within a given range.</Comment>
          <Expansion Priority="0">
            <Body>Assert::InRange(«Caret»«Field(actual,The actual value to be evalua)»«BlockAnchor», «Field(low,The (inclusive) low value of the range)», «Field(high,The (inclusive) high value of the range)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="airc" CaseSensitiveName="false">
          <Comment>Verifies that a value is within a given range, using a comparer. </Comment>
          <Expansion Priority="0">
            <Body>Assert::InRange(«Caret»«Field(actual,The actual value to be evalua)»«BlockAnchor», «Field(low,The (inclusive) low value of the range)», «Field(high,The (inclusive) high value of the range)», «Field(comparer,The comparer used to evaluate the value's range)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ait" CaseSensitiveName="false">
          <Comment>Verifies that an object is exactly the given type (and not a derived type). </Comment>
          <Expansion Priority="0">
            <Body>Assert::IsType«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="an" CaseSensitiveName="false">
          <Comment>Verifies that an object reference is null. </Comment>
          <Expansion Priority="0">
            <Body>Assert::Null«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anc" CaseSensitiveName="false">
          <Comment>Verifies that a collection does not contain a given object. </Comment>
          <Expansion Priority="0">
            <Body>«:adnc»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ancc" CaseSensitiveName="false">
          <Comment>Verifies that a collection does not contain a given object, using a comparer.</Comment>
          <Expansion Priority="0">
            <Body>«:adncc»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ane" CaseSensitiveName="false">
          <Comment>Verifies that two objects are not equal, using a default comparer. </Comment>
          <Expansion Priority="1">
            <Body>Assert::NotEqual«:#AssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anec" CaseSensitiveName="false">
          <Comment>Verifies that two objects are not equal, using a custom comparer. </Comment>
          <Expansion Priority="0">
            <Body>Assert::NotEqual«:#xUnitAssertThreeParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anem" CaseSensitiveName="false">
          <Comment>Verifies that a collection is not empty.</Comment>
          <Expansion Priority="0">
            <Body>Assert::NotEmpty«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anir" CaseSensitiveName="false">
          <Comment>Verifies that a value is not within a given range, using the default comparer. </Comment>
          <Expansion Priority="0">
            <Body>Assert::NotInRange(«Caret»«Field(actual,The actual value to be evalua)»«BlockAnchor», «Field(low,The (inclusive) low value of the range)», «Field(high,The (inclusive) high value of the range)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="anirc" CaseSensitiveName="false">
          <Comment>Verifies that a value is not within a given range, using a comparer.</Comment>
          <Expansion Priority="0">
            <Body>Assert::NotInRange(«Caret»«Field(actual,The actual value to be evalua)»«BlockAnchor», «Field(low,The (inclusive) low value of the range)», «Field(high,The (inclusive) high value of the range)», «Field(comparer,The comparer used to evaluate the value's range)»);«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ann" CaseSensitiveName="false">
          <Comment>Verifies that an object reference is not null. </Comment>
          <Expansion Priority="0">
            <Body>Assert::NotNull«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="ans" CaseSensitiveName="false">
          <Comment>Verifies that two objects are not the same instance. </Comment>
          <Expansion Priority="0">
            <Body>Assert::NotSame«:#xUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="as" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Assert::Same«:#xUnitAssertTwoParameters#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="at" CaseSensitiveName="false">
          <Comment>Verifies that an expression is true. </Comment>
          <Expansion Priority="0">
            <Body>Assert::True«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="atr" CaseSensitiveName="false">
          <Comment>Verifies that the exact exception is thrown (and not a derived exception type). </Comment>
          <Expansion Priority="0">
            <Body>Assert::Throws«:#xUnitAssertOneParameter#»</Body>
            <Context>
              <Selected>Editor\Code\InCodeBlock</Selected>
              <Selected>Editor\Line\OnEmptyLine</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Attributes">
        <Template Name="[ai" CaseSensitiveName="false">
          <Comment>Apply this attribute to your test method to replace the CurrentPrincipal with another role. </Comment>
          <Expansion Priority="0">
            <Body>[AssumeIdentity(«Caret»«Field(Name,The role's name)»«BlockAnchor»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[ar" CaseSensitiveName="false">
          <Comment>Apply this attribute to your test method to automatically create a TransactionScope that is rolled back when the test is finished. </Comment>
          <Expansion Priority="0">
            <Body>[AutoRollbackAttribute]«Caret»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[cd" CaseSensitiveName="false">
          <Comment>Provides a data source for a data theory, with the data coming from a class which must implement IEnumerable&lt;object[]&gt;. </Comment>
          <Expansion Priority="0">
            <Body>[ClassData(«Caret»«Field(Type,The class that provides the data)»«BlockAnchor»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[ed" CaseSensitiveName="false">
          <Comment>Provides a data source for a data theory, with the data coming a Microsoft Excel (.xls) spreadsheet. </Comment>
          <Expansion Priority="0">
            <Body>[ExcelData(«Caret»«Field(FileName,The filename of the XLS spreadsheet file.)»«BlockAnchor», «Field(SelectStatement,The SELECT statement that returns the data for the theory)»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[f" CaseSensitiveName="false">
          <Comment>Attribute that is applied to a method to indicate that it is a fact that should be run by the test runner. It can also be extended to support a customized definition of a test method.</Comment>
          <Expansion Priority="0">
            <Body>[Fact]«Caret»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[fc" CaseSensitiveName="false">
          <Comment>Apply this attribute to your test method to freeze the time represented by the Clock class.</Comment>
          <Expansion Priority="0">
            <Body>[FreezeClock(«Caret»«Field(year,The frozen year)»«BlockAnchor», «Field(month,The frozen month)», «Field(day,The frozen day)»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[id" CaseSensitiveName="false">
          <Comment>Provides a data source for a data theory, with the data coming from inline values. </Comment>
          <Expansion Priority="0">
            <Body>[InlineData(«Caret»«Field(DataValues,The data values to pass to the theory)»«BlockAnchor»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[odd" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[OleDbData(«Caret»«Field(connectionString,The OLEDB connection string to the data)»«BlockAnchor», «Field(selectStatement,The SELECT statement used to return the data for the theory)»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[pd" CaseSensitiveName="false">
          <Comment>Provides a data source for a data theory, with the data coming from a public static property on the test class. The property must return IEnumerable&lt;object[]&gt; with the test data. </Comment>
          <Expansion Priority="0">
            <Body>[PropertyData(«Caret»«Field(PropertyName,The name of the public static property on the test class that will provide the test data)»«BlockAnchor»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[rw" CaseSensitiveName="false">
          <Comment>Attributes used to decorate a test fixture that is run with an alternate test runner. The test runner must implement the ITestClassCommand interface. </Comment>
          <Expansion Priority="0">
            <Body>[RunWith(«Caret»«FieldStart(Type of command)»«Paste»«FieldEnd»«BlockAnchor»)]«FinalTarget»</Body>
            <Context>
              <Selected>Editor\Clipboard\Implements(Xunit.Sdk.ITestCommand)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit</UsingClause>
          </Expansion>
          <Expansion Priority="1">
            <Body>[RunWith(«Caret»«Field(CommandType, Type of command)»«BlockAnchor»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[ssd" CaseSensitiveName="false">
          <Comment>Provides a data source for a data theory, with the data coming a Microsoft SQL Server.</Comment>
          <Expansion Priority="0">
            <Body>[SqlServerData(«Caret»«Field(serverName,The server name of the Microsoft SQL Server)»«BlockAnchor», «Field(databaseName,The database name)», «Field(selectStatement,The SQL SELECT statement to return the data for the data theory)»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[t" CaseSensitiveName="false">
          <Comment>Attribute used to decorate a test method with arbitrary name/value pairs ("traits"). </Comment>
          <Expansion Priority="0">
            <Body>[Trait(«Caret»«Field(name,The trait name)»«BlockAnchor»,«Field(value,The trait value)»)]«FinalTarget»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[th" CaseSensitiveName="false">
          <Comment>Marks a test method as being a data theory. Data theories are tests which are fed various bits of data from a data source, mapping to parameters on the test method. If the data source contains multiple rows, then the test method is executed multiple times (once with each data row). </Comment>
          <Expansion Priority="0">
            <Body>[Theory]«Caret»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
        <Template Name="[tr" CaseSensitiveName="false">
          <Comment>Apply to a test method to trace the method begin and end. </Comment>
          <Expansion Priority="0">
            <Body>[Trace]«Caret»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
            </Context>
            <UsingClause>Xunit.Extensions</UsingClause>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Namespaces">
        <Template Name="ux" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>using namespace Xunit;</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="uxe" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>using namespace Xunit::Extensions;</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="uxs" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>using namespace Xunit::Sdk;</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="uxu" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:ux»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="uxue" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:uxe»</Body>
            <Context>
              <Selected>Project\References(xunit.extensions)</Selected>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
        <Template Name="uxus" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:uxs»</Body>
            <Context>
              <Selected>Project\Testing\xUnit</Selected>
              <Excluded>Editor\Code\InComment</Excluded>
              <Excluded>Editor\Code\InEnum</Excluded>
              <Excluded>Editor\Code\InString</Excluded>
              <Excluded>Editor\Code\InType</Excluded>
            </Context>
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="System">
        <Template Name="#xUnitFixtureTests#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public class «:#xUnitFixtureTestsName#» : IUseFixture&lt;«Link(«?Get(FixtureType)»)»&gt;
{
  private:
    «Link(«?Get(FixtureType)»)» _Fixture;
	public:
	  void SetFixture(«Link(«?Get(FixtureType)»)» fixture)
	  {
	  	_Fixture = fixture;
  	}
};</Body>
            <Context />
            <UsingClause>Xunit</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#xUnitFixtureTestsName#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»«Field(FixtureTests)»«BlockAnchor»</Body>
            <Context>
              <Selected>System\VariableMatches(SelectName,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Field(FixtureTests)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#xUnitTestClass#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public class «Caret»«Field(TestClsas)»«BlockAnchor»
{
 «:#xUnitTestMethod#(SelectMethodName=false)» 
};</Body>
            <Context />
            <UsingClause>Xunit.Sdk</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#xUnitTestFixture#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>public class «FieldStart»«Caret»«Link(«?Get(FixtureType)»)»«BlockAnchor»«FieldEnd» : IDisposable
{
  public:
    «Link(«?Get(FixtureType)»)»()
    {
  	  «Target»
    }
  
    void Dispose()
    {
  	  «FinalTarget»
    }
};</Body>
            <Context />
            <UsingClause>System</UsingClause>
          </Expansion>
        </Template>
        <Template Name="#xUnitTestMethod#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#xUnitTestMethodAttribute#»
void «:#xUnitTestMethodName#»()
{
	«Marker»«Target»
}</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#xUnitTestMethodAttribute#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>[Fact]</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#xUnitTestMethodName#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«Caret»«Field(TestMethod)»«BlockAnchor»</Body>
            <Context>
              <Selected>System\VariableMatches(SelectMethodName,true)</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«Field(TestMethod)»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <Template Name="tc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#xUnitTestClass#»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\xUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tf" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«?Set(FixtureType,«?Paste»)»«:#xUnitFixtureTests#(SelectName=true)»</Body>
          <Context>
            <Selected>Editor\Clipboard\Implements(System.IDisposable)</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\xUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«?Set(FixtureType,TestFixture)»«:#xUnitTestFixture#»
«:#xUnitFixtureTests#(SelectName,false)»</Body>
          <Context>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\xUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InInterface</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InStruct</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="tm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#xUnitTestMethod#(SelectMethodName=true)»</Body>
          <Context>
            <Selected>Editor\Code\InClass</Selected>
            <Selected>Editor\Line\OnEmptyLine</Selected>
            <Selected>Project\Testing\xUnit</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InMethod</Excluded>
            <Excluded>Editor\Code\InProperty</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Text">
    <Comments>Templates in this category make it easier to work with strings and characters.</Comments>
    <TemplateCategory Name="StringComparison" OptExpanded="true">
      <Template Name="scc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>StringComparison::CurrentCulture</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="scci" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>StringComparison::CurrentCultureIgnoreCase</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="sci" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>StringComparison::InvariantCulture</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="scii" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>StringComparison::InvariantCultureIgnoreCase</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="sco" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>StringComparison::Ordinal</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="scoi" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>StringComparison::OrdinalIgnoreCase</Body>
          <Context>
            <Selected>Editor\Code\InMethodBlock</Selected>
            <Selected>Editor\Code\InPropertyAccessor</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Line\OnEmptyLine</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <Template Name="fmt" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>String::Format("«Field(,Message)»«Caret»", «Field(,arguments to String.Format)»)</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
    <Template Name="s.f" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:fmt»</Body>
        <Context>
          <Selected>Editor\Code\InCodeBlock</Selected>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Transitional">
    <Comments>Templates in this category provide transitional assistance for developers working in C# that are familiar with other programming languages.</Comments>
    <TemplateCategory Name="AutoCorrect" OptExpanded="true">
      <Template Name="!+" ExpansionTrigger="Both" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="Deprecated CodeRush/Delphi" Enabled="false" OptExpanded="true">
      <Comments>Templates in this category are no longer in use in CodeRush for Visual Studio, but are included for CodeRush for Delphi users who depend on them. These templates may conflict with newer, better ways of doing the same thing, so we recommend that this category remain disabled.</Comments>
      <Template Name="bg" CaseSensitiveName="false">
        <Comment>Begin/End block (deprecated for CR/VS -- use "b" instead)</Comment>
        <Expansion Priority="0">
          <Body>«:b»
</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="lbg" CaseSensitiveName="false">
        <Comment>Delphi-compatibility template - use lb instead.</Comment>
        <Expansion Priority="0">
          <Body>else
{
	«Cursor»
}</Body>
          <Context />
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="pr" CaseSensitiveName="false">
        <Comment>Procedure (Delphi compatibility)</Comment>
        <Expansion Priority="0">
          <Body>void «Cursor»()
{
}</Body>
          <Context />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="From CodeRush/Delphi" Enabled="false" OptExpanded="true">
      <Comments>Templates in this category are for developers familiar with CodeRush/Delphi templates.</Comments>
      <Template Name="='" CaseSensitiveName="false">
        <Expansion Priority="0" UseDoubleEqualsInsideParens="true" SuppressLastChar="true">
          <Body>= "«Cursor»";</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="a" CaseSensitiveName="false">
        <Comment>assigned</Comment>
        <Expansion Priority="0">
          <Body>«:nn»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="brk" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>break;</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="cfe" CaseSensitiveName="false">
        <Comment>Change File Extension (Delphi transitional)</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>Path::ChangeExtension(«Paste», ".«BlockAnchor»ext«Cursor»");</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="efn" CaseSensitiveName="false">
        <Comment>Extract File Name (Delphi compatibility)</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>Path::GetFileName(«Cursor»)</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="efp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>Path::GetDirectoryName(«BlockAnchor»«Paste»«Cursor»)</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="fnb" CaseSensitiveName="false">
        <Comment>Function returning a bool (Delphi compatibility) - use mb instead</Comment>
        <Expansion Priority="0">
          <Body>bool «Cursor»()
{
	return false;
	«Marker»return true;
}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="fni" CaseSensitiveName="false">
        <Comment>Function returning an int (Delphi compatibility) - use mi instead</Comment>
        <Expansion Priority="0">
          <Body>int «Cursor»()
{
	return 0«Marker»;
}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="fns" CaseSensitiveName="false">
        <Comment>Function returning a string (Delphi compatibility) - use ms instead</Comment>
        <Expansion Priority="0">
          <Body>«:#SetStringType#» «Cursor»()
{
	return "«Marker»";
}</Body>
          <Context />
        </Expansion>
      </Template>
      <Template Name="inh" CaseSensitiveName="false">
        <Comment>Inherited call</Comment>
        <Expansion Priority="0" IsExpression="true">
          <Body>.«BlockAnchor»«Method»«Cursor»</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="r=" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>return «Cursor»;</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="From Delphi" Enabled="false" ActionHintColor="#ff808000" OptExpanded="true">
      <Comments>Templates in this category are for developers familiar with the Pascal/Delphi language.</Comments>
      <ActionHint>Delphi to C#</ActionHint>
      <Template Name="and">
        <Comment>Delphi compatibility</Comment>
        <Expansion Priority="0">
          <Body>&amp;&amp; </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
      <Template Name="or">
        <Comment>Delphi compatibility</Comment>
        <Expansion Priority="0">
          <Body>|| </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <TemplateCategory Name="From Visual Basic" ActionHintColor="#ff0000c0" OptExpanded="true">
      <Comments>Templates in this category are for developers familiar with Visual Basic.</Comments>
      <ActionHint>Visual Basic to C#</ActionHint>
      <Template Name="&lt;&gt;" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!= </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="And" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>&amp;&amp; </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="MustInherit" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>abstract </Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="Not" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>!</Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="NotInheritable" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>sealed </Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="Or" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>|| </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="Xor" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>^ </Body>
          <Context>
            <Selected>Editor\Code\InCodeBlock</Selected>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
  </TemplateCategory>
  <TemplateCategory Name="Types">
    <Comments>Templates in this category generate common types. These templates are all abbreviations for  the longer type name ("sg" = "string", "dt" = "DateTime", etc.).</Comments>
    <TemplateCategory Name="Type Setters" OptExpanded="true">
      <TemplateCategory Name="Managed Type Setters" OptExpanded="true">
        <Template Name="#SetArrayListType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,ArrayList)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetBitmapType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,Bitmap)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetBrushType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,Brush)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetColorType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,Color)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetFontType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,Font)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetGraphicsType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,Graphics)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetHashtableType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,Hashtable)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetObjectType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,Object)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetPenType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,Pen)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetStringBuilderType#" CaseSensitiveName="false">
          <Expansion Priority="1">
            <Body>«?Set(Type,StringBuilder)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetStringType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,String)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="PrimitiveTypeSetters" OptExpanded="true">
        <Template Name="#SetBoolType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,bool)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetCharType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,char)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetDateTimeType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,DateTime)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetDoubleType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,double)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetFloatType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,float)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetIntPtrType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,IntPtr)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetIntType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,int)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetPointType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,Point)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetRectangleType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,Rectangle)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetShortType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,short)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetUnsignedIntType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,unsigned int)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetVoidType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,void)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Type Bodies" OptExpanded="true">
        <Template Name="#NoSetSymbolAfterType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(AfterType,)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetSymbolAfterType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(AfterType,*)»</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«?Set(AfterType,^)»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#TypeOf#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>__typeof</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>typeid</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#WriteTypeOfTypeName#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«:#TypeOf#»(«?Get(TypeName)»)</Body>
            <Context>
              <Selected>System\VSVersion\VS2002</Selected>
              <Selected>System\VSVersion\VS2003</Selected>
            </Context>
          </Expansion>
          <Expansion Priority="1">
            <Body>«:#TypeOf#»::«?Get(TypeName)»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Type Setters For Events">
        <Template Name="#SetEventArgsType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,EventArgs)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetExceptionType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,Exception)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetKeyEventArgsType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,KeyEventArgs)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetKeyPressEventArgsType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,KeyPressEventArgs)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetSerializationInfoType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,SerializationInfo)»«:#SetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#SetStreamingContextType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>«?Set(Type,StreamingContext)»«:#NoSetSymbolAfterType#»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
    </TemplateCategory>
    <TemplateCategory Name="Type Writers" OptExpanded="true">
      <TemplateCategory Name="Managed Type Writers" OptExpanded="true">
        <Template Name="#WriteStringType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>String«:#Pointer#»</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
      <TemplateCategory Name="Type Event Writers" OptExpanded="true">
        <Template Name="#WriteExceptionType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>Exception«:#Pointer#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#WriteSerializationInfoType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>SerializationInfo«:#Pointer#»</Body>
            <Context />
          </Expansion>
        </Template>
        <Template Name="#WriteStreamingContextType#" CaseSensitiveName="false">
          <Expansion Priority="0">
            <Body>StreamingContext</Body>
            <Context />
          </Expansion>
        </Template>
      </TemplateCategory>
    </TemplateCategory>
    <Template Name="t?Generic1Type?." CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#AssembleGenericType#»«:#GenericTypeSelectedNoArgs#»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>System\VSVersion\VS2002</Excluded>
          <Excluded>System\VSVersion\VS2003</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="t?Generic1Type?.?Type?" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#OneGenericArgPrep#»«:#SetGeneric1Type#»«:#GenericTypeReference#»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>System\VSVersion\VS2002</Excluded>
          <Excluded>System\VSVersion\VS2003</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="t?Generic2Type?." CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#AssembleGenericType#»«:#GenericTypeSelectedNoArgs#»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>System\VSVersion\VS2002</Excluded>
          <Excluded>System\VSVersion\VS2003</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="t?Generic2Type?.?Type1?,?Type2?" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#TwoGenericArgsPrep#»«:#SetGeneric2Type#»«:#GenericTypeReference#»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>System\VSVersion\VS2002</Excluded>
          <Excluded>System\VSVersion\VS2003</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="t?Type?" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«?Get(Type)»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="t?Type?[" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«DeleteRight("]")»«ClearFields»«:#TypeArrayPrep#»«:#TypeReference#»</Body>
        <Context>
          <Selected>Editor\Code\InType</Selected>
          <Selected>Editor\Line\Char Right Is(])</Selected>
          <Selected>System\AutoCompletion\Just Inserted Closing Bracket</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«:#TypeArrayPrep#»«:#TypeReference#»</Body>
        <Context>
          <Selected>Editor\Code\InType</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="tv" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>void</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="Using">
    <Comments>Templates in this category generate namespace reference declarations. Templates in this category all start with the letter "u" (the equivalent templates start with the letter "i" in VB). To add a namespace, just enter a "u" followed by the uppercase letters of the namespace. For example, to add a reference to "System.Xml", use "usx".</Comments>
    <TemplateCategory Name="Using namespace" OptExpanded="true">
      <Comments>Templates in this category generate namespace reference declarations. Templates in this category all start with the letter "u" (the equivalent templates start with the letter "i" in VB). To add a namespace, just enter a "u" followed by the uppercase letters of the namespace. For example, to add a reference to "System.Xml", use "usx".</Comments>
      <Template Name="un2d" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usdd»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
          <UsingClause />
        </Expansion>
      </Template>
      <Template Name="unmc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:umcs»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unmcs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» Microsoft::CSharp;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unmj" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:umjs»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unmjs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» Microsoft::JScript;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unmv" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» Microsoft::Vsa;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unmvb" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» Microsoft::VisualBasic;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unmw" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» Microsoft::Win32;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="uns" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="uns2d" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usdd2d»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Collections","System::Configuration")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsca" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Configuration::Assemblies;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unscd" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::CodeDom;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unscdc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::CodeDom::Compiler;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsci" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Configuration::Install;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unscm" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::ComponentModel;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unscmd" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::ComponentModel::Design;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unscmds" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::ComponentModel::Design::Serialization;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unscs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Collections::Specialized;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsd" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Data","System::Diagnostics","System::Drawing")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsd2d" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usdd2d»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Data::Common;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdd" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Drawing::Drawing2D","System::Drawing::Design")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdd2d" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Drawing::Drawing2D;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdg" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Diagnostics;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdi" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Drawing::Imaging;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdo" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Data::Odbc;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdoc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Data::OracleClient;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdod" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Data::OleDb;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdodb" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usdod»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Drawing::Printing;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsds" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Diagnostics::SymbolStore;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdss" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usds»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdssce" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Data::SqlServerCE;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdst" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Data::SqlTypes;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsdt" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Drawing::Text;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unse" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uses»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsec" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usescrm»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsei" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usesi»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unses" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::EnterpriseServices;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsescrm" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::EnterpriseServices::CompensatingResourceManager;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsesi" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::EnterpriseServices::Internal;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsg" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Globalization;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsi" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usio»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsii" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usiois»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsio" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::IO;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsiois" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::IO::IsolatedStorage;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsm" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Messaging","System::Management")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsmi" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Management::Instrumentation;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsn" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Net;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsns" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Net::Sockets;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsr" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Resources","System::Reflection")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usrcs»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrcs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::CompilerServices;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsre" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Reflection::Emit;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsri" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::InteropServices;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsric" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usriscm»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrie" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usrise»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsris" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usri»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsriscm" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::InteropServices::CustomMarshalers;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrise" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::InteropServices::Expando;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrr" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::Remoting;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrra" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::Remoting::Activation;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrc" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Runtime::Remoting::Channels","System::Runtime::Remoting::Contexts")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrch" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::Remoting::Channels::Http;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrct" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::Remoting::Channels::Tcp;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrl" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::Remoting::Lifetime;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Runtime::Remoting::Messaging","System::Runtime::Remoting::Metadata")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrms" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::Remoting::MetadataServices;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrmw" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::Runtime::Remoting::Metadata::W3cXsd2001;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::Remoting::Proxies;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrrs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::Remoting::Services;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::Serialization;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrsf" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::Serialization::Formatters;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrsfb" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::Serialization::Formatters::Binary;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsrsfs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Runtime::Serialization::Formatters.Soap;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unss" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Security;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unssc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Security::Cryptography;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsscx" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Security::Cryptography::Xml","System::Security::Cryptography::X509Certificates")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unssm" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System::ServiceModel;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unssp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Security::Permissions","System::Security::Policy","System::Security::Principal","System::ServiceProcess")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unst" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Text","System::Threading","System::Timers")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unstr" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:ustre»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unstre" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Text::RegularExpressions;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unstrx" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:ustre»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsw" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Configuration","System::Web::Caching")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswf" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Windows::Forms;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswfd" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Windows::Forms::Design;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswh" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::Hosting;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswm" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Mail","System::Web::Mobile")»;</Body>
          <Context>
            <Selected>System\VSVersion\VS2002</Selected>
            <Selected>System\VSVersion\VS2003</Selected>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
        <Expansion Priority="1">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Mail","System::Web::Mobile")»;
«:#Using#» System.Windows.Media;
«:#Using#» System.Windows.Markup;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsws" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Services","System::Web::Security")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswsc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::Services::Configuration;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswsd" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Services::Description","System::Web::Services::Discovery")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswsp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::Services::Protocols;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswss" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::SessionState;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswu" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uswui»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswud" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uswuid»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswudw" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uswuidwc»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuh" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uswuihc»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswui" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::UI;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuid" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::UI::Design;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuidwc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::UI::Design::WebControls;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuihc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::UI::HtmlControls;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuimc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::UI::MobileControls;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuimca" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::UI::MobileControls::Adapters;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuiwc" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Web::UI::WebControls;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswum" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uswuimc»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuma" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uswuimca»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unswuw" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:uswuiwc»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsx" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Xml;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsxs" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Xml::Serialization","System::Xml::Schema")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsxx" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,System::Xml::Xsl","System::Xml::XPath")»;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unsxxp" CaseSensitiveName="false">
        <Expansion Priority="0" IsExpression="true">
          <Body>«:#Using#» System::Xml::XPath;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unw" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:#Using#» System;
«:#Using#» System::Drawing;
«:#Using#» System::Windows::Forms;</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
      <Template Name="unw3" CaseSensitiveName="false">
        <Expansion Priority="0">
          <Body>«:usrrmw»</Body>
          <Context>
            <Excluded>Editor\Code\InComment</Excluded>
            <Excluded>Editor\Code\InEnum</Excluded>
            <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
            <Excluded>Editor\Code\InString</Excluded>
            <Excluded>Editor\Code\InType</Excluded>
          </Context>
        </Expansion>
      </Template>
    </TemplateCategory>
    <Template Name="#Using#" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>using namespace</Body>
        <Context />
      </Expansion>
    </Template>
    <Template Name="u2d" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usdd»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="umc" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:umcs»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="umcs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» Microsoft::CSharp;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="umj" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:umjs»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="umjs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» Microsoft::JScript;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="umv" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» Microsoft::Vsa;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="umvb" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» Microsoft::VisualBasic;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="umw" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» Microsoft::Win32;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="un" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:using»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="us" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="us2d" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usdd2d»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Collections","System::Configuration")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usca" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Configuration::Assemblies;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uscd" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::CodeDom;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uscdc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::CodeDom::Compiler;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usci" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Configuration::Install;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uscm" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::ComponentModel;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uscmd" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::ComponentModel::Design;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uscmds" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::ComponentModel::Design::Serialization;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uscs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Collections::Specialized;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usd" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Data","System::Diagnostics","System::Drawing")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usd2d" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usdd2d»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Data::Common;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdd" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Drawing::Drawing2D","System::Drawing::Design")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdd2d" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Drawing::Drawing2D;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdg" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Diagnostics;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdi" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Drawing::Imaging;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdo" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Data::Odbc;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdoc" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Data::OracleClient;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdod" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Data::OleDb;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdodb" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usdod»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdp" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Drawing::Printing;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usds" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Diagnostics::SymbolStore;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdsc" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Data::SqlClient;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdss" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usds»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdssce" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Data::SqlServerCE;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdst" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Data::SqlTypes;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usdt" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Drawing::Text;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="use" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uses»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usec" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usescrm»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usei" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usesi»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uses" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::EnterpriseServices;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usescrm" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::EnterpriseServices::CompensatingResourceManager;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usesi" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::EnterpriseServices::Internal;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usg" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Globalization;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usi" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usio»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usii" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usiois»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="using" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Cursor»;</Body>
        <Context>
          <Selected>Editor\Line\OnEmptyLine</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usio" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::IO;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usiois" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::IO::IsolatedStorage;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usm" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Messaging","System::Management")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usmi" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Management::Instrumentation;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usn" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Net;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usns" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Net::Sockets;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usr" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Resources","System::Reflection")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrc" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usrcs»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrcs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::CompilerServices;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usre" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Reflection::Emit;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usri" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::InteropServices;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usric" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usriscm»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrie" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usrise»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usris" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usri»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usriscm" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::InteropServices::CustomMarshalers;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrise" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::InteropServices::Expando;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrr" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::Remoting;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrra" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::Remoting::Activation;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrc" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Runtime::Remoting::Channels","System::Runtime::Remoting::Contexts")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrch" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::Remoting::Channels::Http;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrct" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::Remoting::Channels::Tcp;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrl" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::Remoting::Lifetime;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrm" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Runtime::Remoting::Messaging","System::Runtime::Remoting::Metadata")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrms" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::Remoting::MetadataServices;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrmw" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::Runtime::Remoting::Metadata::W3cXsd2001;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrp" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::Remoting::Proxies;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrrs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::Remoting::Services;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::Serialization;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrsf" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::Serialization::Formatters;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrsfb" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::Serialization::Formatters::Binary;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usrsfs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Runtime::Serialization::Formatters.Soap;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uss" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Security;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ussc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Security::Cryptography;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usscx" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Security::Cryptography::Xml","System::Security::Cryptography::X509Certificates")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ussm" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System::ServiceModel;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ussp" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Security::Permissions","System::Security::Policy","System::Security::Principal","System::ServiceProcess")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ust" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Text","System::Threading","System::Timers")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ustr" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:ustre»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ustre" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Text::RegularExpressions;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="ustrx" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:ustre»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usw" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Configuration","System::Web::Caching")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswf" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Windows::Forms;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswfd" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Windows::Forms::Design;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswh" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::Hosting;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswm" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Mail","System::Web::Mobile")»;</Body>
        <Context>
          <Selected>System\VSVersion\VS2002</Selected>
          <Selected>System\VSVersion\VS2003</Selected>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
      <Expansion Priority="1">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Mail","System::Web::Mobile")»;
«:#Using#» System.Windows.Media;
«:#Using#» System.Windows.Markup;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usws" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Services","System::Web::Security")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswsc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::Services::Configuration;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswsd" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Web::Services::Description","System::Web::Services::Discovery")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswsp" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::Services::Protocols;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswss" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::SessionState;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswu" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uswui»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswud" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uswuid»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswudw" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uswuidwc»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuh" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uswuihc»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswui" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::UI;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuid" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::UI::Design;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuidwc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::UI::Design::WebControls;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuihc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::UI::HtmlControls;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuimc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::UI::MobileControls;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuimca" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::UI::MobileControls::Adapters;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuiwc" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Web::UI::WebControls;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswum" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uswuimc»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuma" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uswuimca»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uswuw" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:uswuiwc»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usx" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Xml;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usxs" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,"System::Xml::Serialization","System::Xml::Schema")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usxx" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» «Intellassist($ImageIndex.Namespace,System::Xml::Xsl","System::Xml::XPath")»;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="usxxp" CaseSensitiveName="false">
      <Expansion Priority="0" IsExpression="true">
        <Body>«:#Using#» System::Xml::XPath;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uw" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:#Using#» System;
«:#Using#» System::Drawing;
«:#Using#» System::Windows::Forms;</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
    <Template Name="uw3" CaseSensitiveName="false">
      <Expansion Priority="0">
        <Body>«:usrrmw»</Body>
        <Context>
          <Excluded>Editor\Code\InComment</Excluded>
          <Excluded>Editor\Code\InEnum</Excluded>
          <Excluded>Editor\Code\InPreprocessorDirective</Excluded>
          <Excluded>Editor\Code\InString</Excluded>
          <Excluded>Editor\Code\InType</Excluded>
        </Context>
      </Expansion>
    </Template>
  </TemplateCategory>
  <TemplateCategory Name="{Misc}">
    <Comments>Uncategorized templates may be placed here.</Comments>
  </TemplateCategory>
</Templates>